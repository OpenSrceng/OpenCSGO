// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#include "cstrike15_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cstrike15_5fgcmessages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountActivity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroupTeam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CEconItemPreviewDataBlock_Sticker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPreMatchInfoData_TeamStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataCenterPing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DetailedSearchStatistic;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameServerPing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IpAddressMask;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MatchEndItemUpdates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OperationalStatisticDescription;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OperationalStatisticElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommendationInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerDecalDigitalSignature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerMedalsInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerQuestData_QuestItemData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRankingInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScoreLeaderboardData_Entry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerHltvInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TournamentEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TournamentMatchSetup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TournamentPlayer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WatchableMatchInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XpProgressData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentSection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CEconItemPreviewDataBlock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GlobalStatistics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OperationalStatisticsPacket;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScoreLeaderboardData_AccountEntries;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TournamentTeam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_MatchInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_TournamentGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGC_ServerQuestUpdateData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CPreMatchInfoData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ScoreLeaderboardData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CDataGCCStrike15_v2_TournamentInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlayerQuestData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cstrike15_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello;
}  // namespace protobuf_cstrike15_5fgcmessages_2eproto
namespace protobuf_engine_5fgcmessages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_engine_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CEngineGotvSyncPacket;
}  // namespace protobuf_engine_5fgcmessages_2eproto
class GameServerPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServerPing>
      _instance;
} _GameServerPing_default_instance_;
class DataCenterPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataCenterPing>
      _instance;
} _DataCenterPing_default_instance_;
class DetailedSearchStatisticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetailedSearchStatistic>
      _instance;
} _DetailedSearchStatistic_default_instance_;
class TournamentPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentPlayer>
      _instance;
} _TournamentPlayer_default_instance_;
class TournamentTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentTeam>
      _instance;
} _TournamentTeam_default_instance_;
class TournamentEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentEvent>
      _instance;
} _TournamentEvent_default_instance_;
class GlobalStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalStatistics>
      _instance;
} _GlobalStatistics_default_instance_;
class OperationalStatisticDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperationalStatisticDescription>
      _instance;
} _OperationalStatisticDescription_default_instance_;
class OperationalStatisticElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperationalStatisticElement>
      _instance;
} _OperationalStatisticElement_default_instance_;
class OperationalStatisticsPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperationalStatisticsPacket>
      _instance;
} _OperationalStatisticsPacket_default_instance_;
class PlayerRankingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRankingInfo>
      _instance;
} _PlayerRankingInfo_default_instance_;
class PlayerCommendationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCommendationInfo>
      _instance;
} _PlayerCommendationInfo_default_instance_;
class PlayerMedalsInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerMedalsInfo>
      _instance;
} _PlayerMedalsInfo_default_instance_;
class AccountActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountActivity>
      _instance;
} _AccountActivity_default_instance_;
class TournamentMatchSetupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentMatchSetup>
      _instance;
} _TournamentMatchSetup_default_instance_;
class ServerHltvInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerHltvInfo>
      _instance;
} _ServerHltvInfo_default_instance_;
class IpAddressMaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpAddressMask>
      _instance;
} _IpAddressMask_default_instance_;
class XpProgressDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XpProgressData>
      _instance;
} _XpProgressData_default_instance_;
class MatchEndItemUpdatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchEndItemUpdates>
      _instance;
} _MatchEndItemUpdates_default_instance_;
class ScoreLeaderboardData_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScoreLeaderboardData_Entry>
      _instance;
} _ScoreLeaderboardData_Entry_default_instance_;
class ScoreLeaderboardData_AccountEntriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScoreLeaderboardData_AccountEntries>
      _instance;
} _ScoreLeaderboardData_AccountEntries_default_instance_;
class ScoreLeaderboardDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScoreLeaderboardData>
      _instance;
} _ScoreLeaderboardData_default_instance_;
class PlayerQuestData_QuestItemDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuestData_QuestItemData>
      _instance;
} _PlayerQuestData_QuestItemData_default_instance_;
class PlayerQuestDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuestData>
      _instance;
} _PlayerQuestData_default_instance_;
class CMsgGC_ServerQuestUpdateDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_ServerQuestUpdateData>
      _instance;
} _CMsgGC_ServerQuestUpdateData_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
class CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>
      _instance;
} _CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingStart>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingStop>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>
      _instance;
} _CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentMatchDraft>
      _instance;
} _CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
class CPreMatchInfoData_TeamStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPreMatchInfoData_TeamStats>
      _instance;
} _CPreMatchInfoData_TeamStats_default_instance_;
class CPreMatchInfoDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPreMatchInfoData>
      _instance;
} _CPreMatchInfoData_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerMatchEndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerMatchEnd>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingClient2GCHello>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>
      _instance;
} _CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AccountPrivacySettings>
      _instance;
} _CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServer2GCKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServer2GCKick>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>
      _instance;
} _CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
class CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>
      _instance;
} _CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
class CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportPlayer>
      _instance;
} _CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientCommendPlayer>
      _instance;
} _CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportServer>
      _instance;
} _CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
class CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportResponse>
      _instance;
} _CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>
      _instance;
} _CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
class WatchableMatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WatchableMatchInfo>
      _instance;
} _WatchableMatchInfo_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>
      _instance;
} _CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestJoinServerData>
      _instance;
} _CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
class CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCstrike15_v2_ClientRequestNewMission>
      _instance;
} _CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>
      _instance;
} _CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
class CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_WatchInfoUsers>
      _instance;
} _CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>
      _instance;
} _CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayersProfile>
      _instance;
} _CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>
      _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>
      _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>
      _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
class CClientHeaderOverwatchEvidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientHeaderOverwatchEvidence>
      _instance;
} _CClientHeaderOverwatchEvidence_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientTextMsg>
      _instance;
} _CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
class CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCTextMsg>
      _instance;
} _CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>
      _instance;
} _CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
class CEconItemPreviewDataBlock_StickerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconItemPreviewDataBlock_Sticker>
      _instance;
} _CEconItemPreviewDataBlock_Sticker_default_instance_;
class CEconItemPreviewDataBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconItemPreviewDataBlock>
      _instance;
} _CEconItemPreviewDataBlock_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>
      _instance;
} _CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
class CMsgItemAcknowledgedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgItemAcknowledged>
      _instance;
} _CMsgItemAcknowledged_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>
      _instance;
} _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>
      _instance;
} _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification>
      _instance;
} _CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>
      _instance;
} _CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>
      _instance;
} _CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>
      _instance;
} _CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>
      _instance;
} _CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>
      _instance;
} _CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
class CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_MatchInfo>
      _instance;
} _CDataGCCStrike15_v2_MatchInfo_default_instance_;
class CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroupTeam>
      _instance;
} _CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
class CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroup_Picks>
      _instance;
} _CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
class CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroup>
      _instance;
} _CDataGCCStrike15_v2_TournamentGroup_default_instance_;
class CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentSection>
      _instance;
} _CDataGCCStrike15_v2_TournamentSection_default_instance_;
class CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentInfo>
      _instance;
} _CDataGCCStrike15_v2_TournamentInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchList>
      _instance;
} _CMsgGCCStrike15_v2_MatchList_default_instance_;
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>
      _instance;
} _CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
class CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Predictions>
      _instance;
} _CMsgGCCStrike15_v2_Predictions_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy_FantasySlot>
      _instance;
} _CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>
      _instance;
} _CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
class CMsgGCCStrike15_v2_FantasyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy>
      _instance;
} _CMsgGCCStrike15_v2_Fantasy_default_instance_;
class CAttribute_StringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_String>
      _instance;
} _CAttribute_String_default_instance_;
class CMsgGCToGCReloadVersionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCReloadVersions>
      _instance;
} _CMsgGCToGCReloadVersions_default_instance_;
class CMsgCStrike15WelcomeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCStrike15Welcome>
      _instance;
} _CMsgCStrike15Welcome_default_instance_;
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>
      _instance;
} _CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>
      _instance;
} _CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardRequest>
      _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>
      _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>
      _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
class CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>
      _instance;
} _CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
class CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Server2GCClientValidate>
      _instance;
} _CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure>
      _instance;
} _CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>
      _instance;
} _CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
class CSOEconCouponDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconCoupon>
      _instance;
} _CSOEconCoupon_default_instance_;
class CSOQuestProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOQuestProgress>
      _instance;
} _CSOQuestProgress_default_instance_;
class CSOPersonaDataPublicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOPersonaDataPublic>
      _instance;
} _CSOPersonaDataPublic_default_instance_;
class CMsgGC_GlobalGame_SubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Subscribe>
      _instance;
} _CMsgGC_GlobalGame_Subscribe_default_instance_;
class CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Unsubscribe>
      _instance;
} _CMsgGC_GlobalGame_Unsubscribe_default_instance_;
class CMsgGC_GlobalGame_PlayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Play>
      _instance;
} _CMsgGC_GlobalGame_Play_default_instance_;
class CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AcknowledgePenalty>
      _instance;
} _CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>
      _instance;
} _CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
class CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCStreamUnlock>
      _instance;
} _CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCRequestElevate>
      _instance;
} _CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCChat>
      _instance;
} _CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
class CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GCToClientChat>
      _instance;
} _CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
class CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientAuthKeyCode>
      _instance;
} _CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
class CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_GotvSyncPacket>
      _instance;
} _CMsgGCCStrike15_GotvSyncPacket_default_instance_;
class PlayerDecalDigitalSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDecalDigitalSignature>
      _instance;
} _PlayerDecalDigitalSignature_default_instance_;
class CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPlayerDecalSign>
      _instance;
} _CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
class CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientLogonFatalError>
      _instance;
} _CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
class CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPollState>
      _instance;
} _CMsgGCCStrike15_v2_ClientPollState_default_instance_;
class CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Register>
      _instance;
} _CMsgGCCStrike15_v2_Party_Register_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Search>
      _instance;
} _CMsgGCCStrike15_v2_Party_Search_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_SearchResults_Entry>
      _instance;
} _CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_SearchResults>
      _instance;
} _CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
class CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Invite>
      _instance;
} _CMsgGCCStrike15_v2_Party_Invite_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>
      _instance;
} _CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Account_RequestCoPlays>
      _instance;
} _CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCRequestTicket>
      _instance;
} _CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
namespace protobuf_cstrike15_5fgcmessages_2eproto {
static void InitDefaultsGameServerPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameServerPing_default_instance_;
    new (ptr) ::GameServerPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameServerPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameServerPing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameServerPing}, {}};

static void InitDefaultsDataCenterPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataCenterPing_default_instance_;
    new (ptr) ::DataCenterPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataCenterPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataCenterPing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataCenterPing}, {}};

static void InitDefaultsDetailedSearchStatistic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetailedSearchStatistic_default_instance_;
    new (ptr) ::DetailedSearchStatistic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetailedSearchStatistic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DetailedSearchStatistic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDetailedSearchStatistic}, {}};

static void InitDefaultsTournamentPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentPlayer_default_instance_;
    new (ptr) ::TournamentPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TournamentPlayer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTournamentPlayer}, {}};

static void InitDefaultsTournamentTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentTeam_default_instance_;
    new (ptr) ::TournamentTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TournamentTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTournamentTeam}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentPlayer.base,}};

static void InitDefaultsTournamentEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentEvent_default_instance_;
    new (ptr) ::TournamentEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TournamentEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTournamentEvent}, {}};

static void InitDefaultsGlobalStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GlobalStatistics_default_instance_;
    new (ptr) ::GlobalStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GlobalStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GlobalStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGlobalStatistics}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DetailedSearchStatistic.base,}};

static void InitDefaultsOperationalStatisticDescription() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticDescription_default_instance_;
    new (ptr) ::OperationalStatisticDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperationalStatisticDescription =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperationalStatisticDescription}, {}};

static void InitDefaultsOperationalStatisticElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticElement_default_instance_;
    new (ptr) ::OperationalStatisticElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperationalStatisticElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperationalStatisticElement}, {}};

static void InitDefaultsOperationalStatisticsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticsPacket_default_instance_;
    new (ptr) ::OperationalStatisticsPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticsPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OperationalStatisticsPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOperationalStatisticsPacket}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticElement.base,}};

static void InitDefaultsPlayerRankingInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerRankingInfo_default_instance_;
    new (ptr) ::PlayerRankingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerRankingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRankingInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerRankingInfo}, {}};

static void InitDefaultsPlayerCommendationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerCommendationInfo_default_instance_;
    new (ptr) ::PlayerCommendationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerCommendationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommendationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCommendationInfo}, {}};

static void InitDefaultsPlayerMedalsInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerMedalsInfo_default_instance_;
    new (ptr) ::PlayerMedalsInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerMedalsInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerMedalsInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerMedalsInfo}, {}};

static void InitDefaultsAccountActivity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountActivity_default_instance_;
    new (ptr) ::AccountActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountActivity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountActivity}, {}};

static void InitDefaultsTournamentMatchSetup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentMatchSetup_default_instance_;
    new (ptr) ::TournamentMatchSetup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentMatchSetup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TournamentMatchSetup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTournamentMatchSetup}, {}};

static void InitDefaultsServerHltvInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerHltvInfo_default_instance_;
    new (ptr) ::ServerHltvInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerHltvInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerHltvInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerHltvInfo}, {}};

static void InitDefaultsIpAddressMask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IpAddressMask_default_instance_;
    new (ptr) ::IpAddressMask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IpAddressMask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IpAddressMask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIpAddressMask}, {}};

static void InitDefaultsXpProgressData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XpProgressData_default_instance_;
    new (ptr) ::XpProgressData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XpProgressData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XpProgressData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXpProgressData}, {}};

static void InitDefaultsMatchEndItemUpdates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchEndItemUpdates_default_instance_;
    new (ptr) ::MatchEndItemUpdates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchEndItemUpdates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchEndItemUpdates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchEndItemUpdates}, {}};

static void InitDefaultsScoreLeaderboardData_Entry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_Entry_default_instance_;
    new (ptr) ::ScoreLeaderboardData_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScoreLeaderboardData_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScoreLeaderboardData_Entry}, {}};

static void InitDefaultsScoreLeaderboardData_AccountEntries() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_AccountEntries_default_instance_;
    new (ptr) ::ScoreLeaderboardData_AccountEntries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScoreLeaderboardData_AccountEntries =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScoreLeaderboardData_AccountEntries}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_Entry.base,}};

static void InitDefaultsScoreLeaderboardData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_default_instance_;
    new (ptr) ::ScoreLeaderboardData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ScoreLeaderboardData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScoreLeaderboardData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_AccountEntries.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_Entry.base,}};

static void InitDefaultsPlayerQuestData_QuestItemData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerQuestData_QuestItemData_default_instance_;
    new (ptr) ::PlayerQuestData_QuestItemData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerQuestData_QuestItemData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerQuestData_QuestItemData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerQuestData_QuestItemData}, {}};

static void InitDefaultsPlayerQuestData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerQuestData_default_instance_;
    new (ptr) ::PlayerQuestData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerQuestData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PlayerQuestData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPlayerQuestData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData_QuestItemData.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_XpProgressData.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_MatchEndItemUpdates.base,}};

static void InitDefaultsCMsgGC_ServerQuestUpdateData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_ServerQuestUpdateData_default_instance_;
    new (ptr) ::CMsgGC_ServerQuestUpdateData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_ServerQuestUpdateData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGC_ServerQuestUpdateData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgGC_ServerQuestUpdateData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGCOperationalStats}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticDescription.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticsPacket.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GC2ServerReservationUpdate}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingStart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingStart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingStart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchmakingStart}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentMatchSetup.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingStop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingStop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingStop}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgGCCStrike15_v2_MatchmakingClient2ServerPing}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GameServerPing.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DataCenterPing.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GlobalStatistics.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_IpAddressMask.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.base,}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDataGCCStrike15_v2_TournamentMatchDraft_Entry}, {}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentMatchDraft() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentMatchDraft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDataGCCStrike15_v2_TournamentMatchDraft}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry.base,}};

static void InitDefaultsCPreMatchInfoData_TeamStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPreMatchInfoData_TeamStats_default_instance_;
    new (ptr) ::CPreMatchInfoData_TeamStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPreMatchInfoData_TeamStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPreMatchInfoData_TeamStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPreMatchInfoData_TeamStats}, {}};

static void InitDefaultsCPreMatchInfoData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPreMatchInfoData_default_instance_;
    new (ptr) ::CPreMatchInfoData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPreMatchInfoData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CPreMatchInfoData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCPreMatchInfoData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData_TeamStats.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerReserve}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerRankingInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_IpAddressMask.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentEvent.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerReservationResponse}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ServerHltvInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientReserve}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerRoundStats}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerMatchEnd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgGCCStrike15_v2_MatchmakingServerMatchEnd}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_ServerQuestUpdateData.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingClient2GCHello}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientHello}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GlobalStatistics.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerRankingInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerCommendationInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerMedalsInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentEvent.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_AccountActivity.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_AccountPrivacySettings_Setting}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_AccountPrivacySettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AccountPrivacySettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AccountPrivacySettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_AccountPrivacySettings}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingServer2GCKick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingServer2GCKick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchmakingServer2GCKick}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerRankingInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ServerNotificationForUserPenalty}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientReportPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportPlayer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientReportPlayer}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientCommendPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientCommendPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientCommendPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_ClientCommendPlayer}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerCommendationInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientReportServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientReportServer}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientReportResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientReportResponse}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientRequestWatchInfoFriends}, {}};

static void InitDefaultsWatchableMatchInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WatchableMatchInfo_default_instance_;
    new (ptr) ::WatchableMatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WatchableMatchInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WatchableMatchInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWatchableMatchInfo}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_ClientRequestJoinFriendData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientRequestJoinServerData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestJoinServerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestJoinServerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_ClientRequestJoinServerData}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base,}};

static void InitDefaultsCMsgGCCstrike15_v2_ClientRequestNewMission() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
    new (ptr) ::CMsgGCCstrike15_v2_ClientRequestNewMission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCstrike15_v2_ClientRequestNewMission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCstrike15_v2_ClientRequestNewMission}, {}};

static void InitDefaultsCMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
    new (ptr) ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_XpProgressData.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_WatchInfoUsers() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_WatchInfoUsers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_WatchInfoUsers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_WatchInfoUsers =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_WatchInfoUsers}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_WatchableMatchInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientRequestPlayersProfile}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_PlayersProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayersProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayersProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_PlayersProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_PlayersProfile}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_PlayerOverwatchCaseStatus}, {}};

static void InitDefaultsCClientHeaderOverwatchEvidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClientHeaderOverwatchEvidence_default_instance_;
    new (ptr) ::CClientHeaderOverwatchEvidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClientHeaderOverwatchEvidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientHeaderOverwatchEvidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientHeaderOverwatchEvidence}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GC2ClientTextMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientTextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientTextMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GC2ClientTextMsg}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Client2GCTextMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCTextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCTextMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Client2GCTextMsg}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgGCCStrike15_v2_MatchEndRunRewardDrops}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_ServerQuestUpdateData.base,}};

static void InitDefaultsCEconItemPreviewDataBlock_Sticker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconItemPreviewDataBlock_Sticker_default_instance_;
    new (ptr) ::CEconItemPreviewDataBlock_Sticker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEconItemPreviewDataBlock_Sticker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEconItemPreviewDataBlock_Sticker}, {}};

static void InitDefaultsCEconItemPreviewDataBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconItemPreviewDataBlock_default_instance_;
    new (ptr) ::CEconItemPreviewDataBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconItemPreviewDataBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CEconItemPreviewDataBlock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCEconItemPreviewDataBlock}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock_Sticker.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_MatchEndRewardDropsNotification}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock.base,}};

static void InitDefaultsCMsgItemAcknowledged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgItemAcknowledged_default_instance_;
    new (ptr) ::CMsgItemAcknowledged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgItemAcknowledged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgItemAcknowledged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgItemAcknowledged}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchListRequestLiveGameForUser}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchListRequestRecentUserGames}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchListRequestTournamentGames}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_MatchListRequestFullGameInfo}, {}};

static void InitDefaultsCDataGCCStrike15_v2_MatchInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_MatchInfo_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_MatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_MatchInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_MatchInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDataGCCStrike15_v2_MatchInfo}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_WatchableMatchInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats.base,}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentGroupTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroupTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroupTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroupTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDataGCCStrike15_v2_TournamentGroupTeam}, {}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentGroup_Picks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroup_Picks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroup_Picks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDataGCCStrike15_v2_TournamentGroup_Picks}, {}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroup_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_TournamentGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDataGCCStrike15_v2_TournamentGroup}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroupTeam.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks.base,}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentSection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentSection_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentSection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentSection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentSection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDataGCCStrike15_v2_TournamentSection}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup.base,}};

static void InitDefaultsCDataGCCStrike15_v2_TournamentInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentInfo_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CDataGCCStrike15_v2_TournamentInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCDataGCCStrike15_v2_TournamentInfo}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentSection.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentEvent.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_MatchList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchList_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgGCCStrike15_v2_MatchList}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_MatchInfo.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base,
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentInfo.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Predictions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Predictions_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Predictions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Predictions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Predictions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Predictions}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_Fantasy_FantasySlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy_FantasySlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Fantasy_FantasySlot}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Fantasy_FantasyTeam}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_Fantasy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Fantasy}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam.base,}};

static void InitDefaultsCAttribute_String() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAttribute_String_default_instance_;
    new (ptr) ::CAttribute_String();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_String::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CAttribute_String =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCAttribute_String}, {}};

static void InitDefaultsCMsgGCToGCReloadVersions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCToGCReloadVersions_default_instance_;
    new (ptr) ::CMsgGCToGCReloadVersions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToGCReloadVersions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCReloadVersions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCReloadVersions}, {}};

static void InitDefaultsCMsgCStrike15Welcome() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgCStrike15Welcome_default_instance_;
    new (ptr) ::CMsgCStrike15Welcome();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCStrike15Welcome::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCStrike15Welcome =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCStrike15Welcome}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientVarValueNotificationInfo}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ServerVarValueNotificationInfo}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardRequest}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_GiftsLeaderboardResponse}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientSubmitSurveyVote}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Server2GCClientValidate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Server2GCClientValidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Server2GCClientValidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Server2GCClientValidate}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Server2GCPureServerValidationFailure}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GC2ClientTournamentInfo}, {}};

static void InitDefaultsCSOEconCoupon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOEconCoupon_default_instance_;
    new (ptr) ::CSOEconCoupon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOEconCoupon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconCoupon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconCoupon}, {}};

static void InitDefaultsCSOQuestProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOQuestProgress_default_instance_;
    new (ptr) ::CSOQuestProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOQuestProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOQuestProgress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOQuestProgress}, {}};

static void InitDefaultsCSOPersonaDataPublic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOPersonaDataPublic_default_instance_;
    new (ptr) ::CSOPersonaDataPublic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOPersonaDataPublic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSOPersonaDataPublic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSOPersonaDataPublic}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerCommendationInfo.base,}};

static void InitDefaultsCMsgGC_GlobalGame_Subscribe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Subscribe_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Subscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Subscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Subscribe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGC_GlobalGame_Subscribe}, {}};

static void InitDefaultsCMsgGC_GlobalGame_Unsubscribe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Unsubscribe_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Unsubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Unsubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Unsubscribe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGC_GlobalGame_Unsubscribe}, {}};

static void InitDefaultsCMsgGC_GlobalGame_Play() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Play_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Play();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Play::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Play =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGC_GlobalGame_Play}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_AcknowledgePenalty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AcknowledgePenalty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AcknowledgePenalty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_AcknowledgePenalty}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Client2GCStreamUnlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCStreamUnlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCStreamUnlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Client2GCStreamUnlock}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientToGCRequestElevate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCRequestElevate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCRequestElevate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientToGCRequestElevate}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientToGCChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCChat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientToGCChat}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_GCToClientChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GCToClientChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GCToClientChat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GCToClientChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_GCToClientChat}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientAuthKeyCode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientAuthKeyCode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientAuthKeyCode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientAuthKeyCode}, {}};

static void InitDefaultsCMsgGCCStrike15_GotvSyncPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_GotvSyncPacket_default_instance_;
    new (ptr) ::CMsgGCCStrike15_GotvSyncPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_GotvSyncPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_GotvSyncPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_GotvSyncPacket}, {
      &protobuf_engine_5fgcmessages_2eproto::scc_info_CEngineGotvSyncPacket.base,}};

static void InitDefaultsPlayerDecalDigitalSignature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerDecalDigitalSignature_default_instance_;
    new (ptr) ::PlayerDecalDigitalSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerDecalDigitalSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerDecalDigitalSignature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerDecalDigitalSignature}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientPlayerDecalSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPlayerDecalSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPlayerDecalSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_ClientPlayerDecalSign}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerDecalDigitalSignature.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientLogonFatalError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientLogonFatalError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientLogonFatalError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientLogonFatalError}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientPollState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPollState_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPollState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPollState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPollState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientPollState}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Party_Register() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Register_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Register();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Register::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Register =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Party_Register}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Party_Search() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Search_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Search();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Search::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Search =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Party_Search}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Party_SearchResults_Entry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_SearchResults_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Party_SearchResults_Entry}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Party_SearchResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_SearchResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_SearchResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Party_SearchResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Party_SearchResults}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_Party_Invite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Invite_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Invite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Invite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Invite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Party_Invite}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_Account_RequestCoPlays_Player}, {}};

static void InitDefaultsCMsgGCCStrike15_v2_Account_RequestCoPlays() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Account_RequestCoPlays();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCCStrike15_v2_Account_RequestCoPlays}, {
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.base,}};

static void InitDefaultsCMsgGCCStrike15_v2_ClientToGCRequestTicket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCRequestTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCRequestTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCStrike15_v2_ClientToGCRequestTicket}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameServerPing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataCenterPing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetailedSearchStatistic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentPlayer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GlobalStatistics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperationalStatisticDescription.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperationalStatisticElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperationalStatisticsPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRankingInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCommendationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerMedalsInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountActivity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentMatchSetup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerHltvInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IpAddressMask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XpProgressData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchEndItemUpdates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScoreLeaderboardData_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScoreLeaderboardData_AccountEntries.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScoreLeaderboardData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerQuestData_QuestItemData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerQuestData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGC_ServerQuestUpdateData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingStart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingStop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentMatchDraft.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPreMatchInfoData_TeamStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPreMatchInfoData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServer2GCKick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientReportPlayer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientReportServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientReportResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WatchableMatchInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_WatchInfoUsers.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayersProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientHeaderOverwatchEvidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEconItemPreviewDataBlock_Sticker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEconItemPreviewDataBlock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgItemAcknowledged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_MatchInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentGroupTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentSection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Predictions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Fantasy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CAttribute_String.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCReloadVersions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCStrike15Welcome.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconCoupon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOQuestProgress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOPersonaDataPublic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGC_GlobalGame_Subscribe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGC_GlobalGame_Unsubscribe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGC_GlobalGame_Play.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientToGCChat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GCToClientChat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_GotvSyncPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDecalDigitalSignature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPollState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_Register.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_Search.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_SearchResults.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_Invite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket.base);
}

::google::protobuf::Metadata file_level_metadata[134];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameServerPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameServerPing, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameServerPing, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameServerPing, instances_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DataCenterPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DataCenterPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DataCenterPing, data_center_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DataCenterPing, ping_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DetailedSearchStatistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DetailedSearchStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DetailedSearchStatistic, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DetailedSearchStatistic, search_time_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DetailedSearchStatistic, players_searching_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_dob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentPlayer, player_desc_),
  5,
  0,
  1,
  6,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, team_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentTeam, players_),
  3,
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_time_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_time_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, event_stage_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentEvent, active_section_id_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, players_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, servers_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, players_searching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, servers_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, ongoing_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, search_time_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, search_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, main_post_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, required_appid_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, pricesheet_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, twitch_streams_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, active_tournament_eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GlobalStatistics, active_survey_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticDescription, idkey_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticElement, idkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticElement, values_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticsPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticsPacket, packetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticsPacket, mstimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OperationalStatisticsPacket, values_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, rank_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerRankingInfo, rank_change_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerCommendationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerCommendationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerCommendationInfo, cmd_friendly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerCommendationInfo, cmd_teaching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerCommendationInfo, cmd_leader_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, medal_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, medal_combat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, medal_weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, medal_global_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, medal_arms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, display_items_defidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerMedalsInfo, featured_display_item_defidx_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountActivity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountActivity, activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountActivity, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountActivity, map_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, team_id_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, team_id_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TournamentMatchSetup, event_stage_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_watch_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_proxies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, game_mapgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, game_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_master_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_local_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_local_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_local_proxies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_proxies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerHltvInfo, tv_relay_steamid_),
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IpAddressMask, token_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XpProgressData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XpProgressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XpProgressData, xp_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XpProgressData, xp_category_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MatchEndItemUpdates, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MatchEndItemUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MatchEndItemUpdates, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MatchEndItemUpdates, item_attr_defidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MatchEndItemUpdates, item_attr_delta_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_Entry, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_Entry, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, entries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, accountentries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ScoreLeaderboardData, matchentries_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_normal_points_earned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_bonus_points_earned_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, quester_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, quest_item_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, xp_progress_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, time_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, mm_game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerQuestData, item_updates_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, player_quest_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, binary_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, mm_game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, missionlbsdata_),
  ~0u,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, namekeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packets_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, exchange_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_steam_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, ticket_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, tournament_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, prime_only_),
  ~0u,
  2,
  0,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, abandon_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, gameserverpings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, offset_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, final_batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, data_center_pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, max_ping_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, matchmaking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, waiting_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, ongoingmatch_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failping_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failready_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vacbanned_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, server_ipaddress_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, notes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, insufficientlevel_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vsncheck_account_id_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, launcher_mismatch_sessions_),
  3,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, mapid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, team_id_ct_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, event_stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, maps_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, maps_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_veto1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_pickn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, drafts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_idxtxt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_txt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_teams_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData, predictions_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData, draft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPreMatchInfoData, stats_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rankings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, party_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, whitelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_master_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_casters_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_relay_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, pre_match_data_),
  ~0u,
  3,
  2,
  4,
  ~0u,
  5,
  6,
  ~0u,
  ~0u,
  7,
  0,
  ~0u,
  ~0u,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, gc_reservation_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tv_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_player_accounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, idle_player_accounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_def_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_reward_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_drop_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tournament_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, steamdatagram_port_),
  4,
  2,
  0,
  5,
  6,
  3,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  1,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, server_address_),
  3,
  4,
  5,
  6,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, account_mvp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, team_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, confirm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_headshots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_3ks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_4ks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_5ks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, mvps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_tv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_lnk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_agg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, drop_info_),
  4,
  1,
  0,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  2,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  11,
  12,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, confirm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, rematch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, replay_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, replay_cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, aborted_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, match_end_quest_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, server_version_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ongoingmatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, global_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, vac_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, commendation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, medals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_stages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, survey_vote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_cur_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_xp_bonus_flags_),
  8,
  0,
  1,
  9,
  10,
  11,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,
  12,
  7,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, settings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, abandoned_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_reason_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, reservation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, reason_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, rankings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, match_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, main_post_url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, seconds_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_aimbot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_wallhack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_speedhack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_teamharm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_textabuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_voiceabuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, match_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, commendation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, tokens_),
  1,
  3,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_poorperf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_abusivemodels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_badmotd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_listingabuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_inventoryabuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, match_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, confirmation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, response_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, response_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, tokens_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, matchid_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, tv_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, tv_spectators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, tv_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, tv_watch_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, cl_decryptdata_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, cl_decryptdata_key_pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, game_mapgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, game_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WatchableMatchInfo, reservation_id_),
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  12,
  1,
  2,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_ipp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, errormsg_),
  2,
  3,
  4,
  5,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, errormsg_),
  2,
  3,
  4,
  5,
  6,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, campaign_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, xp_progress_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, upgraded_defidx_),
  ~0u,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, watchable_match_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, extended_timeout_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_id__deprecated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_ids__deprecated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_level_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, account_profiles_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, caseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, suspectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, fractionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_aimbot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_wallhack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_speedhack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_teamharm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, reason_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, verdict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, throttleseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, suspectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, numrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, streakconvictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, reason_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, caseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, statusid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, caseid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, payload_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, args_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, serverinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, match_end_quest_data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, sticker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, wear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, tint_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, defindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, rarity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintwear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintseed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, killeaterscoretype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, killeatervalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, customname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, stickers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, questid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, dropreason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, musicindex_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, iteminfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgItemAcknowledged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgItemAcknowledged, iteminfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_m_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, defindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, accountids_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, accountid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, accountid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, eventid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, outcomeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, token_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, matchtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, watchablematchinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, roundstats_legacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, roundstatsall_),
  2,
  3,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, correctpick_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, pickids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picks__deprecated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, stage_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picklockuntiltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, pickableteams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, points_per_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picks_),
  2,
  0,
  1,
  3,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, sectionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, groups_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, sections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, tournament_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, tournament_teams_),
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, msgrequestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, servertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, streams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, tournamentinfo_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, sectionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, itemid_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, group_match_team_picks_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, itemid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, sectionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, slots_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, teams_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCReloadVersions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCReloadVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, store_item_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, timeplayedconsecutively_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, time_first_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, last_time_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, last_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, gscookieid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCStrike15Welcome, uniqueid_),
  0,
  1,
  3,
  4,
  2,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, choked_blocks_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, viewangles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, type_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, gifts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, servertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, time_period_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_gifts_given_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_givers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, entries_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, survey_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, vote_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, accountid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, pack_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, pack_file_id_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, stageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, teamids_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOEconCoupon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOEconCoupon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOEconCoupon, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOEconCoupon, defidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOEconCoupon, expiration_date_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOQuestProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOQuestProgress, questid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOQuestProgress, points_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOQuestProgress, bonus_points_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOPersonaDataPublic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOPersonaDataPublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOPersonaDataPublic, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOPersonaDataPublic, commendation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOPersonaDataPublic, elevated_state_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, ticket_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, timeleft_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, gametimems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, msperpoint_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, acknowledged_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, os_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, stage_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, code_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, rtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, endpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, tx_defidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, hitbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, creationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, equipslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayerDecalDigitalSignature, tint_id_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, itemid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, pollid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, values_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, apr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, ark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, nby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, grp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, launcher_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, apr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, ark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, grps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, launcher_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, grp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, entries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, lobbyid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, rtcoplay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, online_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, servertime_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_net_id_),
  0,
  3,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::GameServerPing)},
  { 11, 18, sizeof(::DataCenterPing)},
  { 20, 28, sizeof(::DetailedSearchStatistic)},
  { 31, 43, sizeof(::TournamentPlayer)},
  { 50, 60, sizeof(::TournamentTeam)},
  { 65, 79, sizeof(::TournamentEvent)},
  { 88, 106, sizeof(::GlobalStatistics)},
  { 119, 126, sizeof(::OperationalStatisticDescription)},
  { 128, 135, sizeof(::OperationalStatisticElement)},
  { 137, 145, sizeof(::OperationalStatisticsPacket)},
  { 148, 157, sizeof(::PlayerRankingInfo)},
  { 161, 169, sizeof(::PlayerCommendationInfo)},
  { 172, 184, sizeof(::PlayerMedalsInfo)},
  { 191, 199, sizeof(::AccountActivity)},
  { 202, 211, sizeof(::TournamentMatchSetup)},
  { 215, 239, sizeof(::ServerHltvInfo)},
  { 258, 269, sizeof(::IpAddressMask)},
  { 275, 282, sizeof(::XpProgressData)},
  { 284, 292, sizeof(::MatchEndItemUpdates)},
  { 295, 302, sizeof(::ScoreLeaderboardData_Entry)},
  { 304, 311, sizeof(::ScoreLeaderboardData_AccountEntries)},
  { 313, 322, sizeof(::ScoreLeaderboardData)},
  { 326, 334, sizeof(::PlayerQuestData_QuestItemData)},
  { 337, 348, sizeof(::PlayerQuestData)},
  { 354, 363, sizeof(::CMsgGC_ServerQuestUpdateData)},
  { 367, 375, sizeof(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)},
  { 378, 386, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)},
  { 389, 396, sizeof(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate)},
  { 398, 409, sizeof(::CMsgGCCStrike15_v2_MatchmakingStart)},
  { 415, 421, sizeof(::CMsgGCCStrike15_v2_MatchmakingStop)},
  { 422, 432, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)},
  { 437, 446, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)},
  { 450, 470, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)},
  { 485, 492, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry)},
  { 494, 509, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft)},
  { 519, 527, sizeof(::CPreMatchInfoData_TeamStats)},
  { 530, 538, sizeof(::CPreMatchInfoData)},
  { 541, 561, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)},
  { 576, 595, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)},
  { 609, 621, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)},
  { 628, 634, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo)},
  { 635, 666, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats)},
  { 692, 705, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)},
  { 713, 718, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello)},
  { 718, 741, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)},
  { 759, 766, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting)},
  { 768, 774, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings)},
  { 775, 784, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)},
  { 788, 796, sizeof(::CMsgGCCStrike15_v2_MatchmakingServer2GCKick)},
  { 799, 806, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)},
  { 808, 814, sizeof(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)},
  { 815, 823, sizeof(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)},
  { 826, 839, sizeof(::CMsgGCCStrike15_v2_ClientReportPlayer)},
  { 847, 856, sizeof(::CMsgGCCStrike15_v2_ClientCommendPlayer)},
  { 860, 871, sizeof(::CMsgGCCStrike15_v2_ClientReportServer)},
  { 877, 888, sizeof(::CMsgGCCStrike15_v2_ClientReportResponse)},
  { 894, 903, sizeof(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)},
  { 907, 925, sizeof(::WatchableMatchInfo)},
  { 938, 949, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData)},
  { 955, 967, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinServerData)},
  { 974, 981, sizeof(::CMsgGCCstrike15_v2_ClientRequestNewMission)},
  { 983, 993, sizeof(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)},
  { 998, 1007, sizeof(::CMsgGCCStrike15_v2_WatchInfoUsers)},
  { 1011, 1020, sizeof(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile)},
  { 1024, 1031, sizeof(::CMsgGCCStrike15_v2_PlayersProfile)},
  { 1033, 1046, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)},
  { 1054, 1070, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)},
  { 1081, 1088, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)},
  { 1090, 1097, sizeof(::CClientHeaderOverwatchEvidence)},
  { 1099, 1107, sizeof(::CMsgGCCStrike15_v2_GC2ClientTextMsg)},
  { 1110, 1117, sizeof(::CMsgGCCStrike15_v2_Client2GCTextMsg)},
  { 1119, 1126, sizeof(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops)},
  { 1128, 1139, sizeof(::CEconItemPreviewDataBlock_Sticker)},
  { 1145, 1167, sizeof(::CEconItemPreviewDataBlock)},
  { 1184, 1190, sizeof(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)},
  { 1191, 1197, sizeof(::CMsgItemAcknowledged)},
  { 1198, 1207, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)},
  { 1211, 1217, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)},
  { 1218, 1226, sizeof(::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)},
  { 1229, 1234, sizeof(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)},
  { 1234, 1240, sizeof(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)},
  { 1241, 1247, sizeof(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)},
  { 1248, 1254, sizeof(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames)},
  { 1255, 1263, sizeof(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)},
  { 1266, 1276, sizeof(::CDataGCCStrike15_v2_MatchInfo)},
  { 1281, 1289, sizeof(::CDataGCCStrike15_v2_TournamentGroupTeam)},
  { 1292, 1298, sizeof(::CDataGCCStrike15_v2_TournamentGroup_Picks)},
  { 1299, 1314, sizeof(::CDataGCCStrike15_v2_TournamentGroup)},
  { 1324, 1333, sizeof(::CDataGCCStrike15_v2_TournamentSection)},
  { 1337, 1345, sizeof(::CDataGCCStrike15_v2_TournamentInfo)},
  { 1348, 1359, sizeof(::CMsgGCCStrike15_v2_MatchList)},
  { 1365, 1375, sizeof(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick)},
  { 1380, 1387, sizeof(::CMsgGCCStrike15_v2_Predictions)},
  { 1389, 1397, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasySlot)},
  { 1400, 1407, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam)},
  { 1409, 1416, sizeof(::CMsgGCCStrike15_v2_Fantasy)},
  { 1418, 1424, sizeof(::CAttribute_String)},
  { 1425, 1430, sizeof(::CMsgGCToGCReloadVersions)},
  { 1430, 1442, sizeof(::CMsgCStrike15Welcome)},
  { 1449, 1459, sizeof(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)},
  { 1464, 1472, sizeof(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)},
  { 1475, 1480, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest)},
  { 1480, 1487, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry)},
  { 1489, 1499, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse)},
  { 1504, 1511, sizeof(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote)},
  { 1513, 1519, sizeof(::CMsgGCCStrike15_v2_Server2GCClientValidate)},
  { 1520, 1533, sizeof(::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)},
  { 1541, 1550, sizeof(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo)},
  { 1554, 1562, sizeof(::CSOEconCoupon)},
  { 1565, 1573, sizeof(::CSOQuestProgress)},
  { 1576, 1584, sizeof(::CSOPersonaDataPublic)},
  { 1587, 1593, sizeof(::CMsgGC_GlobalGame_Subscribe)},
  { 1594, 1600, sizeof(::CMsgGC_GlobalGame_Unsubscribe)},
  { 1601, 1609, sizeof(::CMsgGC_GlobalGame_Play)},
  { 1612, 1618, sizeof(::CMsgGCCStrike15_v2_AcknowledgePenalty)},
  { 1619, 1624, sizeof(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)},
  { 1624, 1631, sizeof(::CMsgGCCStrike15_v2_Client2GCStreamUnlock)},
  { 1633, 1639, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestElevate)},
  { 1640, 1647, sizeof(::CMsgGCCStrike15_v2_ClientToGCChat)},
  { 1649, 1656, sizeof(::CMsgGCCStrike15_v2_GCToClientChat)},
  { 1658, 1665, sizeof(::CMsgGCCStrike15_v2_ClientAuthKeyCode)},
  { 1667, 1673, sizeof(::CMsgGCCStrike15_GotvSyncPacket)},
  { 1674, 1693, sizeof(::PlayerDecalDigitalSignature)},
  { 1707, 1714, sizeof(::CMsgGCCStrike15_v2_ClientPlayerDecalSign)},
  { 1716, 1723, sizeof(::CMsgGCCStrike15_v2_ClientLogonFatalError)},
  { 1725, 1733, sizeof(::CMsgGCCStrike15_v2_ClientPollState)},
  { 1736, 1749, sizeof(::CMsgGCCStrike15_v2_Party_Register)},
  { 1757, 1767, sizeof(::CMsgGCCStrike15_v2_Party_Search)},
  { 1772, 1779, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults_Entry)},
  { 1781, 1787, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults)},
  { 1788, 1795, sizeof(::CMsgGCCStrike15_v2_Party_Invite)},
  { 1797, 1805, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player)},
  { 1808, 1815, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays)},
  { 1817, 1826, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestTicket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameServerPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DataCenterPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DetailedSearchStatistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TournamentPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TournamentTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TournamentEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GlobalStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OperationalStatisticDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OperationalStatisticElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OperationalStatisticsPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerRankingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerCommendationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerMedalsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AccountActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TournamentMatchSetup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ServerHltvInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_IpAddressMask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XpProgressData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MatchEndItemUpdates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ScoreLeaderboardData_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ScoreLeaderboardData_AccountEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ScoreLeaderboardData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerQuestData_QuestItemData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerQuestData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_ServerQuestUpdateData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CPreMatchInfoData_TeamStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CPreMatchInfoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientReportServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WatchableMatchInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_PlayersProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CClientHeaderOverwatchEvidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CEconItemPreviewDataBlock_Sticker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CEconItemPreviewDataBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgItemAcknowledged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_MatchInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDataGCCStrike15_v2_TournamentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_MatchList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Predictions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_String_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCToGCReloadVersions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgCStrike15Welcome_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOEconCoupon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOQuestProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOPersonaDataPublic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GlobalGame_Subscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GlobalGame_Unsubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GlobalGame_Play_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_GCToClientChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_GotvSyncPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayerDecalDigitalSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientPollState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Party_Register_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Party_Search_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Party_Invite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cstrike15_gcmessages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 134);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032cstrike15_gcmessages.proto\032\023steammessa"
      "ges.proto\032\027engine_gcmessages.proto\"=\n\016Ga"
      "meServerPing\022\014\n\004ping\030\002 \001(\005\022\n\n\002ip\030\003 \001(\r\022\021"
      "\n\tinstances\030\005 \001(\r\"6\n\016DataCenterPing\022\026\n\016d"
      "ata_center_id\030\001 \001(\007\022\014\n\004ping\030\002 \001(\021\"`\n\027Det"
      "ailedSearchStatistic\022\021\n\tgame_type\030\001 \001(\r\022"
      "\027\n\017search_time_avg\030\002 \001(\r\022\031\n\021players_sear"
      "ching\030\004 \001(\r\"\247\001\n\020TournamentPlayer\022\022\n\nacco"
      "unt_id\030\001 \001(\r\022\023\n\013player_nick\030\002 \001(\t\022\023\n\013pla"
      "yer_name\030\003 \001(\t\022\022\n\nplayer_dob\030\004 \001(\r\022\023\n\013pl"
      "ayer_flag\030\005 \001(\t\022\027\n\017player_location\030\006 \001(\t"
      "\022\023\n\013player_desc\030\007 \001(\t\"}\n\016TournamentTeam\022"
      "\017\n\007team_id\030\001 \001(\005\022\020\n\010team_tag\030\002 \001(\t\022\021\n\tte"
      "am_flag\030\003 \001(\t\022\021\n\tteam_name\030\004 \001(\t\022\"\n\007play"
      "ers\030\005 \003(\0132\021.TournamentPlayer\"\337\001\n\017Tournam"
      "entEvent\022\020\n\010event_id\030\001 \001(\005\022\021\n\tevent_tag\030"
      "\002 \001(\t\022\022\n\nevent_name\030\003 \001(\t\022\030\n\020event_time_"
      "start\030\004 \001(\r\022\026\n\016event_time_end\030\005 \001(\r\022\024\n\014e"
      "vent_public\030\006 \001(\005\022\026\n\016event_stage_id\030\007 \001("
      "\005\022\030\n\020event_stage_name\030\010 \001(\t\022\031\n\021active_se"
      "ction_id\030\t \001(\r\"\217\003\n\020GlobalStatistics\022\026\n\016p"
      "layers_online\030\001 \001(\r\022\026\n\016servers_online\030\002 "
      "\001(\r\022\031\n\021players_searching\030\003 \001(\r\022\031\n\021server"
      "s_available\030\004 \001(\r\022\027\n\017ongoing_matches\030\005 \001"
      "(\r\022\027\n\017search_time_avg\030\006 \001(\r\0223\n\021search_st"
      "atistics\030\007 \003(\0132\030.DetailedSearchStatistic"
      "\022\025\n\rmain_post_url\030\010 \001(\t\022\036\n\026required_appi"
      "d_version\030\t \001(\r\022\032\n\022pricesheet_version\030\n "
      "\001(\r\022\036\n\026twitch_streams_version\030\013 \001(\r\022!\n\031a"
      "ctive_tournament_eventid\030\014 \001(\r\022\030\n\020active"
      "_survey_id\030\r \001(\r\">\n\037OperationalStatistic"
      "Description\022\014\n\004name\030\001 \001(\t\022\r\n\005idkey\030\002 \001(\r"
      "\"<\n\033OperationalStatisticElement\022\r\n\005idkey"
      "\030\001 \001(\r\022\016\n\006values\030\002 \003(\005\"r\n\033OperationalSta"
      "tisticsPacket\022\020\n\010packetid\030\001 \001(\005\022\023\n\013mstim"
      "estamp\030\002 \001(\005\022,\n\006values\030\003 \003(\0132\034.Operation"
      "alStatisticElement\"[\n\021PlayerRankingInfo\022"
      "\022\n\naccount_id\030\001 \001(\r\022\017\n\007rank_id\030\002 \001(\r\022\014\n\004"
      "wins\030\003 \001(\r\022\023\n\013rank_change\030\004 \001(\002\"X\n\026Playe"
      "rCommendationInfo\022\024\n\014cmd_friendly\030\001 \001(\r\022"
      "\024\n\014cmd_teaching\030\002 \001(\r\022\022\n\ncmd_leader\030\004 \001("
      "\r\"\300\001\n\020PlayerMedalsInfo\022\022\n\nmedal_team\030\001 \001"
      "(\r\022\024\n\014medal_combat\030\002 \001(\r\022\024\n\014medal_weapon"
      "\030\003 \001(\r\022\024\n\014medal_global\030\004 \001(\r\022\022\n\nmedal_ar"
      "ms\030\005 \001(\r\022\034\n\024display_items_defidx\030\007 \003(\r\022$"
      "\n\034featured_display_item_defidx\030\010 \001(\r\">\n\017"
      "AccountActivity\022\020\n\010activity\030\001 \001(\r\022\014\n\004mod"
      "e\030\002 \001(\r\022\013\n\003map\030\003 \001(\r\"g\n\024TournamentMatchS"
      "etup\022\020\n\010event_id\030\001 \001(\005\022\022\n\nteam_id_ct\030\002 \001"
      "(\005\022\021\n\tteam_id_t\030\003 \001(\005\022\026\n\016event_stage_id\030"
      "\004 \001(\005\"\300\003\n\016ServerHltvInfo\022\023\n\013tv_udp_port\030"
      "\001 \001(\r\022\024\n\014tv_watch_key\030\002 \001(\004\022\020\n\010tv_slots\030"
      "\003 \001(\r\022\022\n\ntv_clients\030\004 \001(\r\022\022\n\ntv_proxies\030"
      "\005 \001(\r\022\017\n\007tv_time\030\006 \001(\r\022\021\n\tgame_type\030\010 \001("
      "\r\022\025\n\rgame_mapgroup\030\t \001(\t\022\020\n\010game_map\030\n \001"
      "(\t\022\031\n\021tv_master_steamid\030\013 \001(\004\022\026\n\016tv_loca"
      "l_slots\030\014 \001(\r\022\030\n\020tv_local_clients\030\r \001(\r\022"
      "\030\n\020tv_local_proxies\030\016 \001(\r\022\026\n\016tv_relay_sl"
      "ots\030\017 \001(\r\022\030\n\020tv_relay_clients\030\020 \001(\r\022\030\n\020t"
      "v_relay_proxies\030\021 \001(\r\022\030\n\020tv_relay_addres"
      "s\030\022 \001(\r\022\025\n\rtv_relay_port\030\023 \001(\r\022\030\n\020tv_rel"
      "ay_steamid\030\024 \001(\004\"X\n\rIpAddressMask\022\t\n\001a\030\001"
      " \001(\r\022\t\n\001b\030\002 \001(\r\022\t\n\001c\030\003 \001(\r\022\t\n\001d\030\004 \001(\r\022\014\n"
      "\004bits\030\005 \001(\r\022\r\n\005token\030\006 \001(\r\"8\n\016XpProgress"
      "Data\022\021\n\txp_points\030\001 \001(\r\022\023\n\013xp_category\030\002"
      " \001(\005\"_\n\023MatchEndItemUpdates\022\017\n\007item_id\030\001"
      " \001(\004\022\030\n\020item_attr_defidx\030\002 \001(\r\022\035\n\025item_a"
      "ttr_delta_value\030\003 \001(\r\"\236\002\n\024ScoreLeaderboa"
      "rdData\022\020\n\010quest_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\022"
      "<\n\016accountentries\030\003 \003(\0132$.ScoreLeaderboa"
      "rdData.AccountEntries\0221\n\014matchentries\030\005 "
      "\003(\0132\033.ScoreLeaderboardData.Entry\032!\n\005Entr"
      "y\022\013\n\003tag\030\001 \001(\r\022\013\n\003val\030\002 \001(\r\032Q\n\016AccountEn"
      "tries\022\021\n\taccountid\030\001 \001(\r\022,\n\007entries\030\002 \003("
      "\0132\033.ScoreLeaderboardData.Entry\"\322\002\n\017Playe"
      "rQuestData\022\032\n\022quester_account_id\030\001 \001(\r\0227"
      "\n\017quest_item_data\030\002 \003(\0132\036.PlayerQuestDat"
      "a.QuestItemData\022)\n\020xp_progress_data\030\003 \003("
      "\0132\017.XpProgressData\022\023\n\013time_played\030\004 \001(\r\022"
      "\024\n\014mm_game_mode\030\005 \001(\r\022*\n\014item_updates\030\006 "
      "\003(\0132\024.MatchEndItemUpdates\032h\n\rQuestItemDa"
      "ta\022\020\n\010quest_id\030\001 \001(\004\022\"\n\032quest_normal_poi"
      "nts_earned\030\002 \001(\005\022!\n\031quest_bonus_points_e"
      "arned\030\003 \001(\005\"\245\001\n\034CMsgGC_ServerQuestUpdate"
      "Data\022+\n\021player_quest_data\030\001 \003(\0132\020.Player"
      "QuestData\022\023\n\013binary_data\030\002 \001(\014\022\024\n\014mm_gam"
      "e_mode\030\003 \001(\r\022-\n\016missionlbsdata\030\004 \001(\0132\025.S"
      "coreLeaderboardData\"\247\001\n0CMsgGCCStrike15_"
      "v2_MatchmakingGCOperationalStats\022\020\n\010pack"
      "etid\030\001 \001(\005\0222\n\010namekeys\030\002 \003(\0132 .Operation"
      "alStatisticDescription\022-\n\007packets\030\003 \003(\0132"
      "\034.OperationalStatisticsPacket\"`\n.CMsgGCC"
      "Strike15_v2_MatchmakingGC2ServerConfirm\022"
      "\r\n\005token\030\001 \001(\r\022\r\n\005stamp\030\002 \001(\r\022\020\n\010exchang"
      "e\030\003 \001(\004\"o\n-CMsgGCCStrike15_v2_GC2ServerR"
      "eservationUpdate\022\036\n\026viewers_external_tot"
      "al\030\001 \001(\r\022\036\n\026viewers_external_steam\030\002 \001(\r"
      "\"\277\001\n#CMsgGCCStrike15_v2_MatchmakingStart"
      "\022\023\n\013account_ids\030\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r"
      "\022\023\n\013ticket_data\030\003 \001(\t\022\026\n\016client_version\030"
      "\004 \001(\r\022/\n\020tournament_match\030\005 \001(\0132\025.Tourna"
      "mentMatchSetup\022\022\n\nprime_only\030\006 \001(\010\"5\n\"CM"
      "sgGCCStrike15_v2_MatchmakingStop\022\017\n\007aban"
      "don\030\001 \001(\005\"\304\001\n/CMsgGCCStrike15_v2_Matchma"
      "kingClient2ServerPing\022(\n\017gameserverpings"
      "\030\001 \003(\0132\017.GameServerPing\022\024\n\014offset_index\030"
      "\002 \001(\005\022\023\n\013final_batch\030\003 \001(\005\022*\n\021data_cente"
      "r_pings\030\004 \003(\0132\017.DataCenterPing\022\020\n\010max_pi"
      "ng\030\005 \001(\r\"\275\005\n-CMsgGCCStrike15_v2_Matchmak"
      "ingGC2ClientUpdate\022\023\n\013matchmaking\030\001 \001(\005\022"
      "#\n\033waiting_account_id_sessions\030\002 \003(\r\022\r\n\005"
      "error\030\003 \001(\t\022(\n ongoingmatch_account_id_s"
      "essions\030\006 \003(\r\022\'\n\014global_stats\030\007 \001(\0132\021.Gl"
      "obalStatistics\022$\n\034failping_account_id_se"
      "ssions\030\010 \003(\r\022#\n\033penalty_account_id_sessi"
      "ons\030\t \003(\r\022%\n\035failready_account_id_sessio"
      "ns\030\n \003(\r\022%\n\035vacbanned_account_id_session"
      "s\030\013 \003(\r\022-\n\025server_ipaddress_mask\030\014 \001(\0132\016"
      ".IpAddressMask\022B\n\005notes\030\r \003(\01323.CMsgGCCS"
      "trike15_v2_MatchmakingGC2ClientUpdate.No"
      "te\022)\n!penalty_account_id_sessions_green\030"
      "\016 \003(\r\022\"\n\032insufficientlevel_sessions\030\017 \003("
      "\r\022$\n\034vsncheck_account_id_sessions\030\020 \003(\r\022"
      "\"\n\032launcher_mismatch_sessions\030\021 \003(\r\032K\n\004N"
      "ote\022\014\n\004type\030\001 \001(\005\022\021\n\tregion_id\030\002 \001(\005\022\020\n\010"
      "region_r\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\"\326\002\n(CDa"
      "taGCCStrike15_v2_TournamentMatchDraft\022\020\n"
      "\010event_id\030\001 \001(\005\022\026\n\016event_stage_id\030\002 \001(\005\022"
      "\021\n\tteam_id_0\030\003 \001(\005\022\021\n\tteam_id_1\030\004 \001(\005\022\022\n"
      "\nmaps_count\030\005 \001(\005\022\024\n\014maps_current\030\006 \001(\005\022"
      "\025\n\rteam_id_start\030\007 \001(\005\022\025\n\rteam_id_veto1\030"
      "\010 \001(\005\022\025\n\rteam_id_pickn\030\t \001(\005\022\?\n\006drafts\030\n"
      " \003(\0132/.CDataGCCStrike15_v2_TournamentMat"
      "chDraft.Entry\032*\n\005Entry\022\r\n\005mapid\030\001 \001(\005\022\022\n"
      "\nteam_id_ct\030\002 \001(\005\"\355\001\n\021CPreMatchInfoData\022"
      "\027\n\017predictions_pct\030\001 \001(\005\0228\n\005draft\030\004 \001(\0132"
      ").CDataGCCStrike15_v2_TournamentMatchDra"
      "ft\022+\n\005stats\030\005 \003(\0132\034.CPreMatchInfoData.Te"
      "amStats\032X\n\tTeamStats\022\031\n\021match_info_idxtx"
      "t\030\001 \001(\005\022\026\n\016match_info_txt\030\002 \001(\t\022\030\n\020match"
      "_info_teams\030\003 \003(\t\"\362\003\n.CMsgGCCStrike15_v2"
      "_MatchmakingGC2ServerReserve\022\023\n\013account_"
      "ids\030\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010match_id"
      "\030\003 \001(\004\022\026\n\016server_version\030\004 \001(\r\022$\n\010rankin"
      "gs\030\005 \003(\0132\022.PlayerRankingInfo\022\026\n\016encrypti"
      "on_key\030\006 \001(\004\022\032\n\022encryption_key_pub\030\007 \001(\004"
      "\022\021\n\tparty_ids\030\010 \003(\r\022!\n\twhitelist\030\t \003(\0132\016"
      ".IpAddressMask\022\031\n\021tv_master_steamid\030\n \001("
      "\004\022*\n\020tournament_event\030\013 \001(\0132\020.Tournament"
      "Event\022)\n\020tournament_teams\030\014 \003(\0132\017.Tourna"
      "mentTeam\022&\n\036tournament_casters_account_i"
      "ds\030\r \003(\r\022\030\n\020tv_relay_steamid\030\016 \001(\004\022*\n\016pr"
      "e_match_data\030\017 \001(\0132\022.CPreMatchInfoData\"\355"
      "\003\n7CMsgGCCStrike15_v2_MatchmakingServerR"
      "eservationResponse\022\025\n\rreservationid\030\001 \001("
      "\004\022D\n\013reservation\030\002 \001(\0132/.CMsgGCCStrike15"
      "_v2_MatchmakingGC2ServerReserve\022\013\n\003map\030\003"
      " \001(\t\022\033\n\023gc_reservation_sent\030\004 \001(\004\022\026\n\016ser"
      "ver_version\030\005 \001(\r\022 \n\007tv_info\030\006 \001(\0132\017.Ser"
      "verHltvInfo\022\036\n\026reward_player_accounts\030\007 "
      "\003(\r\022\034\n\024idle_player_accounts\030\010 \003(\r\022 \n\030rew"
      "ard_item_attr_def_idx\030\t \001(\r\022\036\n\026reward_it"
      "em_attr_value\030\n \001(\r\022#\n\033reward_item_attr_"
      "reward_idx\030\013 \001(\r\022\030\n\020reward_drop_list\030\014 \001"
      "(\r\022\026\n\016tournament_tag\030\r \001(\t\022\032\n\022steamdatag"
      "ram_port\030\016 \001(\r\"\364\001\n.CMsgGCCStrike15_v2_Ma"
      "tchmakingGC2ClientReserve\022\020\n\010serverid\030\001 "
      "\001(\004\022\025\n\rdirect_udp_ip\030\002 \001(\r\022\027\n\017direct_udp"
      "_port\030\003 \001(\r\022\025\n\rreservationid\030\004 \001(\004\022D\n\013re"
      "servation\030\005 \001(\0132/.CMsgGCCStrike15_v2_Mat"
      "chmakingGC2ServerReserve\022\013\n\003map\030\006 \001(\t\022\026\n"
      "\016server_address\030\007 \001(\t\"\377\005\n.CMsgGCCStrike1"
      "5_v2_MatchmakingServerRoundStats\022\025\n\rrese"
      "rvationid\030\001 \001(\004\022D\n\013reservation\030\002 \001(\0132/.C"
      "MsgGCCStrike15_v2_MatchmakingGC2ServerRe"
      "serve\022\013\n\003map\030\003 \001(\t\022\r\n\005round\030\004 \001(\005\022\r\n\005kil"
      "ls\030\005 \003(\005\022\017\n\007assists\030\006 \003(\005\022\016\n\006deaths\030\007 \003("
      "\005\022\016\n\006scores\030\010 \003(\005\022\r\n\005pings\030\t \003(\005\022\024\n\014roun"
      "d_result\030\n \001(\005\022\024\n\014match_result\030\013 \001(\005\022\023\n\013"
      "team_scores\030\014 \003(\005\022@\n\007confirm\030\r \001(\0132/.CMs"
      "gGCCStrike15_v2_MatchmakingGC2ServerConf"
      "irm\022\031\n\021reservation_stage\030\016 \001(\005\022\026\n\016match_"
      "duration\030\017 \001(\005\022\023\n\013enemy_kills\030\020 \003(\005\022\027\n\017e"
      "nemy_headshots\030\021 \003(\005\022\021\n\tenemy_3ks\030\022 \003(\005\022"
      "\021\n\tenemy_4ks\030\023 \003(\005\022\021\n\tenemy_5ks\030\024 \003(\005\022\014\n"
      "\004mvps\030\025 \003(\005\022\030\n\020spectators_count\030\026 \001(\r\022\033\n"
      "\023spectators_count_tv\030\027 \001(\r\022\034\n\024spectators"
      "_count_lnk\030\030 \001(\r\022\027\n\017enemy_kills_agg\030\031 \003("
      "\005\022K\n\tdrop_info\030\032 \001(\01328.CMsgGCCStrike15_v"
      "2_MatchmakingServerRoundStats.DropInfo\032\037"
      "\n\010DropInfo\022\023\n\013account_mvp\030\001 \001(\r\"\336\002\n,CMsg"
      "GCCStrike15_v2_MatchmakingServerMatchEnd"
      "\022>\n\005stats\030\001 \001(\0132/.CMsgGCCStrike15_v2_Mat"
      "chmakingServerRoundStats\022@\n\007confirm\030\003 \001("
      "\0132/.CMsgGCCStrike15_v2_MatchmakingGC2Ser"
      "verConfirm\022\017\n\007rematch\030\004 \001(\004\022\024\n\014replay_to"
      "ken\030\005 \001(\r\022\031\n\021replay_cluster_id\030\006 \001(\r\022\025\n\r"
      "aborted_match\030\007 \001(\010\022;\n\024match_end_quest_d"
      "ata\030\010 \001(\0132\035.CMsgGC_ServerQuestUpdateData"
      "\022\026\n\016server_version\030\t \001(\r\".\n,CMsgGCCStrik"
      "e15_v2_MatchmakingClient2GCHello\"\255\005\n,CMs"
      "gGCCStrike15_v2_MatchmakingGC2ClientHell"
      "o\022\022\n\naccount_id\030\001 \001(\r\022E\n\014ongoingmatch\030\002 "
      "\001(\0132/.CMsgGCCStrike15_v2_MatchmakingGC2C"
      "lientReserve\022\'\n\014global_stats\030\003 \001(\0132\021.Glo"
      "balStatistics\022\027\n\017penalty_seconds\030\004 \001(\r\022\026"
      "\n\016penalty_reason\030\005 \001(\r\022\022\n\nvac_banned\030\006 \001"
      "(\005\022#\n\007ranking\030\007 \001(\0132\022.PlayerRankingInfo\022"
      "-\n\014commendation\030\010 \001(\0132\027.PlayerCommendati"
      "onInfo\022!\n\006medals\030\t \001(\0132\021.PlayerMedalsInf"
      "o\022*\n\020my_current_event\030\n \001(\0132\020.Tournament"
      "Event\022/\n\026my_current_event_teams\030\013 \003(\0132\017."
      "TournamentTeam\022(\n\017my_current_team\030\014 \001(\0132"
      "\017.TournamentTeam\0221\n\027my_current_event_sta"
      "ges\030\r \003(\0132\020.TournamentEvent\022\023\n\013survey_vo"
      "te\030\016 \001(\r\022\"\n\010activity\030\017 \001(\0132\020.AccountActi"
      "vity\022\024\n\014player_level\030\021 \001(\005\022\025\n\rplayer_cur"
      "_xp\030\022 \001(\005\022\035\n\025player_xp_bonus_flags\030\023 \001(\005"
      "\"\251\001\n)CMsgGCCStrike15_v2_AccountPrivacySe"
      "ttings\022D\n\010settings\030\001 \003(\01322.CMsgGCCStrike"
      "15_v2_AccountPrivacySettings.Setting\0326\n\007"
      "Setting\022\024\n\014setting_type\030\001 \001(\r\022\025\n\rsetting"
      "_value\030\002 \001(\r\"\277\001\n.CMsgGCCStrike15_v2_Matc"
      "hmakingGC2ClientAbandon\022\022\n\naccount_id\030\001 "
      "\001(\r\022H\n\017abandoned_match\030\002 \001(\0132/.CMsgGCCSt"
      "rike15_v2_MatchmakingGC2ClientReserve\022\027\n"
      "\017penalty_seconds\030\003 \001(\r\022\026\n\016penalty_reason"
      "\030\004 \001(\r\"\227\001\n+CMsgGCCStrike15_v2_Matchmakin"
      "gServer2GCKick\022\022\n\naccount_id\030\001 \001(\r\022D\n\013re"
      "servation\030\002 \001(\0132/.CMsgGCCStrike15_v2_Mat"
      "chmakingGC2ServerReserve\022\016\n\006reason\030\003 \001(\r"
      "\"k\n1CMsgGCCStrike15_v2_MatchmakingGC2Ser"
      "verRankUpdate\022$\n\010rankings\030\001 \003(\0132\022.Player"
      "RankingInfo\022\020\n\010match_id\030\002 \001(\004\"L\n3CMsgGCC"
      "Strike15_v2_MatchmakingOperator2GCBlogUp"
      "date\022\025\n\rmain_post_url\030\001 \001(\t\"j\n3CMsgGCCSt"
      "rike15_v2_ServerNotificationForUserPenal"
      "ty\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\017"
      "\n\007seconds\030\003 \001(\r\"\323\001\n%CMsgGCCStrike15_v2_C"
      "lientReportPlayer\022\022\n\naccount_id\030\001 \001(\r\022\022\n"
      "\nrpt_aimbot\030\002 \001(\r\022\024\n\014rpt_wallhack\030\003 \001(\r\022"
      "\025\n\rrpt_speedhack\030\004 \001(\r\022\024\n\014rpt_teamharm\030\005"
      " \001(\r\022\025\n\rrpt_textabuse\030\006 \001(\r\022\026\n\016rpt_voice"
      "abuse\030\007 \001(\r\022\020\n\010match_id\030\010 \001(\004\"\215\001\n&CMsgGC"
      "CStrike15_v2_ClientCommendPlayer\022\022\n\nacco"
      "unt_id\030\001 \001(\r\022\020\n\010match_id\030\010 \001(\004\022-\n\014commen"
      "dation\030\t \001(\0132\027.PlayerCommendationInfo\022\016\n"
      "\006tokens\030\n \001(\r\"\265\001\n%CMsgGCCStrike15_v2_Cli"
      "entReportServer\022\024\n\014rpt_poorperf\030\001 \001(\r\022\031\n"
      "\021rpt_abusivemodels\030\002 \001(\r\022\023\n\013rpt_badmotd\030"
      "\003 \001(\r\022\030\n\020rpt_listingabuse\030\004 \001(\r\022\032\n\022rpt_i"
      "nventoryabuse\030\005 \001(\r\022\020\n\010match_id\030\010 \001(\004\"\251\001"
      "\n\'CMsgGCCStrike15_v2_ClientReportRespons"
      "e\022\027\n\017confirmation_id\030\001 \001(\004\022\022\n\naccount_id"
      "\030\002 \001(\r\022\021\n\tserver_ip\030\003 \001(\r\022\025\n\rresponse_ty"
      "pe\030\004 \001(\r\022\027\n\017response_result\030\005 \001(\r\022\016\n\006tok"
      "ens\030\006 \001(\r\"~\n0CMsgGCCStrike15_v2_ClientRe"
      "questWatchInfoFriends\022\022\n\nrequest_id\030\001 \001("
      "\r\022\023\n\013account_ids\030\002 \003(\r\022\020\n\010serverid\030\003 \001(\004"
      "\022\017\n\007matchid\030\004 \001(\004\"\260\002\n\022WatchableMatchInfo"
      "\022\021\n\tserver_ip\030\001 \001(\r\022\017\n\007tv_port\030\002 \001(\r\022\025\n\r"
      "tv_spectators\030\003 \001(\r\022\017\n\007tv_time\030\004 \001(\r\022\031\n\021"
      "tv_watch_password\030\005 \001(\014\022\032\n\022cl_decryptdat"
      "a_key\030\006 \001(\004\022\036\n\026cl_decryptdata_key_pub\030\007 "
      "\001(\004\022\021\n\tgame_type\030\010 \001(\r\022\025\n\rgame_mapgroup\030"
      "\t \001(\t\022\020\n\010game_map\030\n \001(\t\022\021\n\tserver_id\030\013 \001"
      "(\004\022\020\n\010match_id\030\014 \001(\004\022\026\n\016reservation_id\030\r"
      " \001(\004\"\313\001\n.CMsgGCCStrike15_v2_ClientReques"
      "tJoinFriendData\022\017\n\007version\030\001 \001(\r\022\022\n\nacco"
      "unt_id\030\002 \001(\r\022\022\n\njoin_token\030\003 \001(\r\022\020\n\010join"
      "_ipp\030\004 \001(\r\022<\n\003res\030\005 \001(\0132/.CMsgGCCStrike1"
      "5_v2_MatchmakingGC2ClientReserve\022\020\n\010erro"
      "rmsg\030\006 \001(\t\"\337\001\n.CMsgGCCStrike15_v2_Client"
      "RequestJoinServerData\022\017\n\007version\030\001 \001(\r\022\022"
      "\n\naccount_id\030\002 \001(\r\022\020\n\010serverid\030\003 \001(\004\022\021\n\t"
      "server_ip\030\004 \001(\r\022\023\n\013server_port\030\005 \001(\r\022<\n\003"
      "res\030\006 \001(\0132/.CMsgGCCStrike15_v2_Matchmaki"
      "ngGC2ClientReserve\022\020\n\010errormsg\030\007 \001(\t\"U\n*"
      "CMsgGCCstrike15_v2_ClientRequestNewMissi"
      "on\022\022\n\nmission_id\030\002 \001(\r\022\023\n\013campaign_id\030\003 "
      "\001(\r\"\261\001\n,CMsgGCCstrike15_v2_GC2ServerNoti"
      "fyXPRewarded\022)\n\020xp_progress_data\030\001 \003(\0132\017"
      ".XpProgressData\022\022\n\naccount_id\030\002 \001(\r\022\022\n\nc"
      "urrent_xp\030\003 \001(\r\022\025\n\rcurrent_level\030\004 \001(\r\022\027"
      "\n\017upgraded_defidx\030\005 \001(\r\"\232\001\n!CMsgGCCStrik"
      "e15_v2_WatchInfoUsers\022\022\n\nrequest_id\030\001 \001("
      "\r\022\023\n\013account_ids\030\002 \003(\r\0222\n\025watchable_matc"
      "h_infos\030\003 \003(\0132\023.WatchableMatchInfo\022\030\n\020ex"
      "tended_timeout\030\005 \001(\r\"\234\001\n.CMsgGCCStrike15"
      "_v2_ClientRequestPlayersProfile\022\036\n\026reque"
      "st_id__deprecated\030\001 \001(\r\022\037\n\027account_ids__"
      "deprecated\030\002 \003(\r\022\022\n\naccount_id\030\003 \001(\r\022\025\n\r"
      "request_level\030\004 \001(\r\"\200\001\n!CMsgGCCStrike15_"
      "v2_PlayersProfile\022\022\n\nrequest_id\030\001 \001(\r\022G\n"
      "\020account_profiles\030\002 \003(\0132-.CMsgGCCStrike1"
      "5_v2_MatchmakingGC2ClientHello\"\314\001\n,CMsgG"
      "CCStrike15_v2_PlayerOverwatchCaseUpdate\022"
      "\016\n\006caseid\030\001 \001(\004\022\021\n\tsuspectid\030\003 \001(\r\022\022\n\nfr"
      "actionid\030\004 \001(\r\022\022\n\nrpt_aimbot\030\005 \001(\r\022\024\n\014rp"
      "t_wallhack\030\006 \001(\r\022\025\n\rrpt_speedhack\030\007 \001(\r\022"
      "\024\n\014rpt_teamharm\030\010 \001(\r\022\016\n\006reason\030\t \001(\r\"\215\002"
      "\n0CMsgGCCStrike15_v2_PlayerOverwatchCase"
      "Assignment\022\016\n\006caseid\030\001 \001(\004\022\017\n\007caseurl\030\002 "
      "\001(\t\022\017\n\007verdict\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\022"
      "\027\n\017throttleseconds\030\005 \001(\r\022\021\n\tsuspectid\030\006 "
      "\001(\r\022\022\n\nfractionid\030\007 \001(\r\022\021\n\tnumrounds\030\010 \001"
      "(\r\022\026\n\016fractionrounds\030\t \001(\r\022\031\n\021streakconv"
      "ictions\030\n \001(\005\022\016\n\006reason\030\013 \001(\r\"P\n,CMsgGCC"
      "Strike15_v2_PlayerOverwatchCaseStatus\022\016\n"
      "\006caseid\030\001 \001(\004\022\020\n\010statusid\030\002 \001(\r\"C\n\036CClie"
      "ntHeaderOverwatchEvidence\022\021\n\taccountid\030\001"
      " \001(\r\022\016\n\006caseid\030\002 \001(\004\"P\n#CMsgGCCStrike15_"
      "v2_GC2ClientTextMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030"
      "\002 \001(\r\022\017\n\007payload\030\003 \001(\014\"\?\n#CMsgGCCStrike1"
      "5_v2_Client2GCTextMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004arg"
      "s\030\002 \003(\014\"\266\001\n)CMsgGCCStrike15_v2_MatchEndR"
      "unRewardDrops\022L\n\nserverinfo\030\003 \001(\01328.CMsg"
      "GCCStrike15_v2_MatchmakingServerReservat"
      "ionResponse\022;\n\024match_end_quest_data\030\004 \001("
      "\0132\035.CMsgGC_ServerQuestUpdateData\"\362\003\n\031CEc"
      "onItemPreviewDataBlock\022\021\n\taccountid\030\001 \001("
      "\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010defindex\030\003 \001(\r\022\022\n\np"
      "aintindex\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\017\n\007quali"
      "ty\030\006 \001(\r\022\021\n\tpaintwear\030\007 \001(\r\022\021\n\tpaintseed"
      "\030\010 \001(\r\022\032\n\022killeaterscoretype\030\t \001(\r\022\026\n\016ki"
      "lleatervalue\030\n \001(\r\022\022\n\ncustomname\030\013 \001(\t\0224"
      "\n\010stickers\030\014 \003(\0132\".CEconItemPreviewDataB"
      "lock.Sticker\022\021\n\tinventory\030\r \001(\r\022\016\n\006origi"
      "n\030\016 \001(\r\022\017\n\007questid\030\017 \001(\r\022\022\n\ndropreason\030\020"
      " \001(\r\022\022\n\nmusicindex\030\021 \001(\r\032k\n\007Sticker\022\014\n\004s"
      "lot\030\001 \001(\r\022\022\n\nsticker_id\030\002 \001(\r\022\014\n\004wear\030\003 "
      "\001(\002\022\r\n\005scale\030\004 \001(\002\022\020\n\010rotation\030\005 \001(\002\022\017\n\007"
      "tint_id\030\006 \001(\r\"b\n2CMsgGCCStrike15_v2_Matc"
      "hEndRewardDropsNotification\022,\n\010iteminfo\030"
      "\006 \001(\0132\032.CEconItemPreviewDataBlock\"D\n\024CMs"
      "gItemAcknowledged\022,\n\010iteminfo\030\001 \001(\0132\032.CE"
      "conItemPreviewDataBlock\"}\n7CMsgGCCStrike"
      "15_v2_Client2GCEconPreviewDataBlockReque"
      "st\022\017\n\007param_s\030\001 \001(\004\022\017\n\007param_a\030\002 \001(\004\022\017\n\007"
      "param_d\030\003 \001(\004\022\017\n\007param_m\030\004 \001(\004\"h\n8CMsgGC"
      "CStrike15_v2_Client2GCEconPreviewDataBlo"
      "ckResponse\022,\n\010iteminfo\030\001 \001(\0132\032.CEconItem"
      "PreviewDataBlock\"s\n9CMsgGCCStrike15_v2_T"
      "ournamentMatchRewardDropsNotification\022\020\n"
      "\010match_id\030\001 \001(\004\022\020\n\010defindex\030\002 \001(\r\022\022\n\nacc"
      "ountids\030\003 \003(\r\"5\n3CMsgGCCStrike15_v2_Matc"
      "hListRequestCurrentLiveGames\"G\n2CMsgGCCS"
      "trike15_v2_MatchListRequestLiveGameForUs"
      "er\022\021\n\taccountid\030\001 \001(\r\"G\n2CMsgGCCStrike15"
      "_v2_MatchListRequestRecentUserGames\022\021\n\ta"
      "ccountid\030\001 \001(\r\"E\n2CMsgGCCStrike15_v2_Mat"
      "chListRequestTournamentGames\022\017\n\007eventid\030"
      "\001 \001(\005\"d\n/CMsgGCCStrike15_v2_MatchListReq"
      "uestFullGameInfo\022\017\n\007matchid\030\001 \001(\004\022\021\n\tout"
      "comeid\030\002 \001(\004\022\r\n\005token\030\003 \001(\r\"\210\002\n\035CDataGCC"
      "Strike15_v2_MatchInfo\022\017\n\007matchid\030\001 \001(\004\022\021"
      "\n\tmatchtime\030\002 \001(\r\022/\n\022watchablematchinfo\030"
      "\003 \001(\0132\023.WatchableMatchInfo\022J\n\021roundstats"
      "_legacy\030\004 \001(\0132/.CMsgGCCStrike15_v2_Match"
      "makingServerRoundStats\022F\n\rroundstatsall\030"
      "\005 \003(\0132/.CMsgGCCStrike15_v2_MatchmakingSe"
      "rverRoundStats\"^\n\'CDataGCCStrike15_v2_To"
      "urnamentGroupTeam\022\017\n\007team_id\030\001 \001(\005\022\r\n\005sc"
      "ore\030\002 \001(\005\022\023\n\013correctpick\030\003 \001(\010\"\331\002\n#CData"
      "GCCStrike15_v2_TournamentGroup\022\017\n\007groupi"
      "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\031\n\021p"
      "icks__deprecated\030\004 \001(\r\0227\n\005teams\030\005 \003(\0132(."
      "CDataGCCStrike15_v2_TournamentGroupTeam\022"
      "\021\n\tstage_ids\030\006 \003(\005\022\031\n\021picklockuntiltime\030"
      "\007 \001(\r\022\025\n\rpickableteams\030\010 \001(\r\022\027\n\017points_p"
      "er_pick\030\t \001(\r\0229\n\005picks\030\n \003(\0132*.CDataGCCS"
      "trike15_v2_TournamentGroup.Picks\032\030\n\005Pick"
      "s\022\017\n\007pickids\030\001 \003(\005\"\214\001\n%CDataGCCStrike15_"
      "v2_TournamentSection\022\021\n\tsectionid\030\001 \001(\r\022"
      "\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\0224\n\006groups\030\004 "
      "\003(\0132$.CDataGCCStrike15_v2_TournamentGrou"
      "p\"\265\001\n\"CDataGCCStrike15_v2_TournamentInfo"
      "\0228\n\010sections\030\001 \003(\0132&.CDataGCCStrike15_v2"
      "_TournamentSection\022*\n\020tournament_event\030\002"
      " \001(\0132\020.TournamentEvent\022)\n\020tournament_tea"
      "ms\030\003 \003(\0132\017.TournamentTeam\"\353\001\n\034CMsgGCCStr"
      "ike15_v2_MatchList\022\024\n\014msgrequestid\030\001 \001(\r"
      "\022\021\n\taccountid\030\002 \001(\r\022\022\n\nservertime\030\003 \001(\r\022"
      "/\n\007matches\030\004 \003(\0132\036.CDataGCCStrike15_v2_M"
      "atchInfo\022 \n\007streams\030\005 \003(\0132\017.TournamentTe"
      "am\022;\n\016tournamentinfo\030\006 \001(\0132#.CDataGCCStr"
      "ike15_v2_TournamentInfo\"\357\001\n\036CMsgGCCStrik"
      "e15_v2_Predictions\022\020\n\010event_id\030\001 \001(\r\022R\n\026"
      "group_match_team_picks\030\002 \003(\01322.CMsgGCCSt"
      "rike15_v2_Predictions.GroupMatchTeamPick"
      "\032g\n\022GroupMatchTeamPick\022\021\n\tsectionid\030\001 \001("
      "\005\022\017\n\007groupid\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\022\016\n\006tea"
      "mid\030\004 \001(\005\022\016\n\006itemid\030\005 \001(\004\"\373\001\n\032CMsgGCCStr"
      "ike15_v2_Fantasy\022\020\n\010event_id\030\001 \001(\r\0226\n\005te"
      "ams\030\002 \003(\0132\'.CMsgGCCStrike15_v2_Fantasy.F"
      "antasyTeam\0329\n\013FantasySlot\022\014\n\004type\030\001 \001(\005\022"
      "\014\n\004pick\030\002 \001(\005\022\016\n\006itemid\030\003 \001(\004\032X\n\013Fantasy"
      "Team\022\021\n\tsectionid\030\001 \001(\005\0226\n\005slots\030\002 \003(\0132\'"
      ".CMsgGCCStrike15_v2_Fantasy.FantasySlot\""
      "\"\n\021CAttribute_String\022\r\n\005value\030\001 \001(\t\"\032\n\030C"
      "MsgGCToGCReloadVersions\"\304\001\n\024CMsgCStrike1"
      "5Welcome\022\027\n\017store_item_hash\030\005 \001(\r\022\037\n\027tim"
      "eplayedconsecutively\030\006 \001(\r\022\031\n\021time_first"
      "_played\030\n \001(\r\022\030\n\020last_time_played\030\014 \001(\r\022"
      "\027\n\017last_ip_address\030\r \001(\r\022\022\n\ngscookieid\030\022"
      " \001(\004\022\020\n\010uniqueid\030\023 \001(\004\"\233\001\n1CMsgGCCStrike"
      "15_v2_ClientVarValueNotificationInfo\022\022\n\n"
      "value_name\030\001 \001(\t\022\021\n\tvalue_int\030\002 \001(\005\022\023\n\013s"
      "erver_addr\030\003 \001(\r\022\023\n\013server_port\030\004 \001(\r\022\025\n"
      "\rchoked_blocks\030\005 \003(\t\"h\n1CMsgGCCStrike15_"
      "v2_ServerVarValueNotificationInfo\022\021\n\tacc"
      "ountid\030\001 \001(\r\022\022\n\nviewangles\030\002 \003(\r\022\014\n\004type"
      "\030\003 \001(\r\",\n*CMsgGCCStrike15_v2_GiftsLeader"
      "boardRequest\"\235\002\n+CMsgGCCStrike15_v2_Gift"
      "sLeaderboardResponse\022\022\n\nservertime\030\001 \001(\r"
      "\022\033\n\023time_period_seconds\030\002 \001(\r\022\031\n\021total_g"
      "ifts_given\030\003 \001(\r\022\024\n\014total_givers\030\004 \001(\r\022R"
      "\n\007entries\030\005 \003(\0132A.CMsgGCCStrike15_v2_Gif"
      "tsLeaderboardResponse.GiftLeaderboardEnt"
      "ry\0328\n\024GiftLeaderboardEntry\022\021\n\taccountid\030"
      "\001 \001(\r\022\r\n\005gifts\030\002 \001(\r\"L\n)CMsgGCCStrike15_"
      "v2_ClientSubmitSurveyVote\022\021\n\tsurvey_id\030\001"
      " \001(\r\022\014\n\004vote\030\002 \001(\r\"\?\n*CMsgGCCStrike15_v2"
      "_Server2GCClientValidate\022\021\n\taccountid\030\001 "
      "\001(\r\"\273\001\n7CMsgGCCStrike15_v2_Server2GCPure"
      "ServerValidationFailure\022\021\n\taccountid\030\001 \001"
      "(\r\022\014\n\004path\030\002 \001(\t\022\014\n\004file\030\003 \001(\t\022\013\n\003crc\030\004 "
      "\001(\r\022\014\n\004hash\030\005 \001(\005\022\013\n\003len\030\006 \001(\005\022\023\n\013pack_n"
      "umber\030\007 \001(\005\022\024\n\014pack_file_id\030\010 \001(\005\"r\n*CMs"
      "gGCCStrike15_v2_GC2ClientTournamentInfo\022"
      "\017\n\007eventid\030\001 \001(\r\022\017\n\007stageid\030\002 \001(\r\022\021\n\tgam"
      "e_type\030\003 \001(\r\022\017\n\007teamids\030\004 \003(\r\"O\n\rCSOEcon"
      "Coupon\022\025\n\007entryid\030\001 \001(\rB\004\200\246\035\001\022\016\n\006defidx\030"
      "\002 \001(\r\022\027\n\017expiration_date\030\003 \001(\007\"Y\n\020CSOQue"
      "stProgress\022\025\n\007questid\030\001 \001(\rB\004\200\246\035\001\022\030\n\020poi"
      "nts_remaining\030\002 \001(\r\022\024\n\014bonus_points\030\003 \001("
      "\r\"s\n\024CSOPersonaDataPublic\022\024\n\014player_leve"
      "l\030\001 \001(\005\022-\n\014commendation\030\002 \001(\0132\027.PlayerCo"
      "mmendationInfo\022\026\n\016elevated_state\030\003 \001(\010\"-"
      "\n\033CMsgGC_GlobalGame_Subscribe\022\016\n\006ticket\030"
      "\001 \001(\004\"1\n\035CMsgGC_GlobalGame_Unsubscribe\022\020"
      "\n\010timeleft\030\001 \001(\005\"P\n\026CMsgGC_GlobalGame_Pl"
      "ay\022\016\n\006ticket\030\001 \001(\004\022\022\n\ngametimems\030\002 \001(\r\022\022"
      "\n\nmsperpoint\030\003 \001(\r\"=\n%CMsgGCCStrike15_v2"
      "_AcknowledgePenalty\022\024\n\014acknowledged\030\001 \001("
      "\005\"1\n/CMsgGCCStrike15_v2_Client2GCRequest"
      "PrestigeCoin\"F\n(CMsgGCCStrike15_v2_Clien"
      "t2GCStreamUnlock\022\016\n\006ticket\030\001 \001(\004\022\n\n\002os\030\002"
      " \001(\005\"<\n+CMsgGCCStrike15_v2_ClientToGCReq"
      "uestElevate\022\r\n\005stage\030\001 \001(\r\"C\n!CMsgGCCStr"
      "ike15_v2_ClientToGCChat\022\020\n\010match_id\030\001 \001("
      "\004\022\014\n\004text\030\002 \001(\t\"E\n!CMsgGCCStrike15_v2_GC"
      "ToClientChat\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004text"
      "\030\002 \001(\t\"E\n$CMsgGCCStrike15_v2_ClientAuthK"
      "eyCode\022\017\n\007eventid\030\001 \001(\r\022\014\n\004code\030\002 \001(\t\"F\n"
      "\036CMsgGCCStrike15_GotvSyncPacket\022$\n\004data\030"
      "\001 \001(\0132\026.CEngineGotvSyncPacket\"\224\002\n\033Player"
      "DecalDigitalSignature\022\021\n\tsignature\030\001 \001(\014"
      "\022\021\n\taccountid\030\002 \001(\r\022\r\n\005rtime\030\003 \001(\r\022\016\n\006en"
      "dpos\030\004 \003(\002\022\020\n\010startpos\030\005 \003(\002\022\r\n\005right\030\006 "
      "\003(\002\022\021\n\ttx_defidx\030\007 \001(\r\022\020\n\010entindex\030\010 \001(\005"
      "\022\016\n\006hitbox\030\t \001(\r\022\024\n\014creationtime\030\n \001(\002\022\021"
      "\n\tequipslot\030\013 \001(\r\022\020\n\010trace_id\030\014 \001(\r\022\016\n\006n"
      "ormal\030\r \003(\002\022\017\n\007tint_id\030\016 \001(\r\"f\n(CMsgGCCS"
      "trike15_v2_ClientPlayerDecalSign\022*\n\004data"
      "\030\001 \001(\0132\034.PlayerDecalDigitalSignature\022\016\n\006"
      "itemid\030\002 \001(\004\"N\n(CMsgGCCStrike15_v2_Clien"
      "tLogonFatalError\022\021\n\terrorcode\030\001 \001(\r\022\017\n\007m"
      "essage\030\002 \001(\t\"S\n\"CMsgGCCStrike15_v2_Clien"
      "tPollState\022\016\n\006pollid\030\001 \001(\r\022\r\n\005names\030\002 \003("
      "\t\022\016\n\006values\030\003 \003(\005\"\221\001\n!CMsgGCCStrike15_v2"
      "_Party_Register\022\n\n\002id\030\001 \001(\r\022\013\n\003ver\030\002 \001(\r"
      "\022\013\n\003apr\030\003 \001(\r\022\013\n\003ark\030\004 \001(\r\022\013\n\003nby\030\005 \001(\r\022"
      "\013\n\003grp\030\006 \001(\r\022\r\n\005slots\030\007 \001(\r\022\020\n\010launcher\030"
      "\010 \001(\r\"h\n\037CMsgGCCStrike15_v2_Party_Search"
      "\022\013\n\003ver\030\001 \001(\r\022\013\n\003apr\030\002 \001(\r\022\013\n\003ark\030\003 \001(\r\022"
      "\014\n\004grps\030\004 \003(\r\022\020\n\010launcher\030\005 \001(\r\"\212\001\n&CMsg"
      "GCCStrike15_v2_Party_SearchResults\022>\n\007en"
      "tries\030\001 \003(\0132-.CMsgGCCStrike15_v2_Party_S"
      "earchResults.Entry\032 \n\005Entry\022\n\n\002id\030\001 \001(\r\022"
      "\013\n\003grp\030\002 \001(\r\"E\n\037CMsgGCCStrike15_v2_Party"
      "_Invite\022\021\n\taccountid\030\001 \001(\r\022\017\n\007lobbyid\030\002 "
      "\001(\r\"\302\001\n)CMsgGCCStrike15_v2_Account_Reque"
      "stCoPlays\022B\n\007players\030\001 \003(\01321.CMsgGCCStri"
      "ke15_v2_Account_RequestCoPlays.Player\022\022\n"
      "\nservertime\030\002 \001(\r\032=\n\006Player\022\021\n\taccountid"
      "\030\001 \001(\r\022\020\n\010rtcoplay\030\002 \001(\r\022\016\n\006online\030\003 \001(\010"
      "\"\237\001\n*CMsgGCCStrike15_v2_ClientToGCReques"
      "tTicket\022\033\n\023authorized_steam_id\030\001 \001(\006\022\034\n\024"
      "authorized_public_ip\030\002 \001(\007\022\033\n\023gameserver"
      "_steam_id\030\003 \001(\006\022\031\n\021gameserver_net_id\030\004 \001"
      "(\006*\365#\n\nECsgoGCMsg\022\036\n\031k_EMsgGCCStrike15_v"
      "2_Base\020\214G\022*\n%k_EMsgGCCStrike15_v2_Matchm"
      "akingStart\020\215G\022)\n$k_EMsgGCCStrike15_v2_Ma"
      "tchmakingStop\020\216G\0226\n1k_EMsgGCCStrike15_v2"
      "_MatchmakingClient2ServerPing\020\217G\0224\n/k_EM"
      "sgGCCStrike15_v2_MatchmakingGC2ClientUpd"
      "ate\020\220G\0225\n0k_EMsgGCCStrike15_v2_Matchmaki"
      "ngGC2ServerReserve\020\221G\022>\n9k_EMsgGCCStrike"
      "15_v2_MatchmakingServerReservationRespon"
      "se\020\222G\0225\n0k_EMsgGCCStrike15_v2_Matchmakin"
      "gGC2ClientReserve\020\223G\0225\n0k_EMsgGCCStrike1"
      "5_v2_MatchmakingServerRoundStats\020\224G\0223\n.k"
      "_EMsgGCCStrike15_v2_MatchmakingClient2GC"
      "Hello\020\225G\0223\n.k_EMsgGCCStrike15_v2_Matchma"
      "kingGC2ClientHello\020\226G\0223\n.k_EMsgGCCStrike"
      "15_v2_MatchmakingServerMatchEnd\020\227G\0225\n0k_"
      "EMsgGCCStrike15_v2_MatchmakingGC2ClientA"
      "bandon\020\230G\0222\n-k_EMsgGCCStrike15_v2_Matchm"
      "akingServer2GCKick\020\231G\0225\n0k_EMsgGCCStrike"
      "15_v2_MatchmakingGC2ServerConfirm\020\232G\0227\n2"
      "k_EMsgGCCStrike15_v2_MatchmakingGCOperat"
      "ionalStats\020\233G\0228\n3k_EMsgGCCStrike15_v2_Ma"
      "tchmakingGC2ServerRankUpdate\020\234G\022:\n5k_EMs"
      "gGCCStrike15_v2_MatchmakingOperator2GCBl"
      "ogUpdate\020\235G\022:\n5k_EMsgGCCStrike15_v2_Serv"
      "erNotificationForUserPenalty\020\236G\022,\n\'k_EMs"
      "gGCCStrike15_v2_ClientReportPlayer\020\237G\022,\n"
      "\'k_EMsgGCCStrike15_v2_ClientReportServer"
      "\020\240G\022-\n(k_EMsgGCCStrike15_v2_ClientCommen"
      "dPlayer\020\241G\022.\n)k_EMsgGCCStrike15_v2_Clien"
      "tReportResponse\020\242G\0222\n-k_EMsgGCCStrike15_"
      "v2_ClientCommendPlayerQuery\020\243G\022:\n5k_EMsg"
      "GCCStrike15_v2_ClientCommendPlayerQueryR"
      "esponse\020\244G\022(\n#k_EMsgGCCStrike15_v2_Watch"
      "InfoUsers\020\246G\0225\n0k_EMsgGCCStrike15_v2_Cli"
      "entRequestPlayersProfile\020\247G\022(\n#k_EMsgGCC"
      "Strike15_v2_PlayersProfile\020\250G\022)\n$k_EMsgG"
      "CCStrike15_v2_SetMyMedalsInfo\020\251G\0223\n.k_EM"
      "sgGCCStrike15_v2_PlayerOverwatchCaseUpda"
      "te\020\253G\0227\n2k_EMsgGCCStrike15_v2_PlayerOver"
      "watchCaseAssignment\020\254G\0223\n.k_EMsgGCCStrik"
      "e15_v2_PlayerOverwatchCaseStatus\020\255G\022*\n%k"
      "_EMsgGCCStrike15_v2_GC2ClientTextMsg\020\256G\022"
      "*\n%k_EMsgGCCStrike15_v2_Client2GCTextMsg"
      "\020\257G\0220\n+k_EMsgGCCStrike15_v2_MatchEndRunR"
      "ewardDrops\020\260G\0229\n4k_EMsgGCCStrike15_v2_Ma"
      "tchEndRewardDropsNotification\020\261G\0228\n3k_EM"
      "sgGCCStrike15_v2_ClientRequestWatchInfoF"
      "riends2\020\262G\022#\n\036k_EMsgGCCStrike15_v2_Match"
      "List\020\263G\022:\n5k_EMsgGCCStrike15_v2_MatchLis"
      "tRequestCurrentLiveGames\020\264G\0229\n4k_EMsgGCC"
      "Strike15_v2_MatchListRequestRecentUserGa"
      "mes\020\265G\0224\n/k_EMsgGCCStrike15_v2_GC2Server"
      "ReservationUpdate\020\266G\0228\n3k_EMsgGCCStrike1"
      "5_v2_ClientVarValueNotificationInfo\020\270G\022@"
      "\n;k_EMsgGCCStrike15_v2_TournamentMatchRe"
      "wardDropsNotification\020\271G\0229\n4k_EMsgGCCStr"
      "ike15_v2_MatchListRequestTournamentGames"
      "\020\272G\0226\n1k_EMsgGCCStrike15_v2_MatchListReq"
      "uestFullGameInfo\020\273G\0221\n,k_EMsgGCCStrike15"
      "_v2_GiftsLeaderboardRequest\020\274G\0222\n-k_EMsg"
      "GCCStrike15_v2_GiftsLeaderboardResponse\020"
      "\275G\0228\n3k_EMsgGCCStrike15_v2_ServerVarValu"
      "eNotificationInfo\020\276G\022\037\n\032k_EMsgGCToGCRelo"
      "adVersions\020\277G\0220\n+k_EMsgGCCStrike15_v2_Cl"
      "ientSubmitSurveyVote\020\300G\0221\n,k_EMsgGCCStri"
      "ke15_v2_Server2GCClientValidate\020\301G\0229\n4k_"
      "EMsgGCCStrike15_v2_MatchListRequestLiveG"
      "ameForUser\020\302G\022>\n9k_EMsgGCCStrike15_v2_Se"
      "rver2GCPureServerValidationFailure\020\303G\022>\n"
      "9k_EMsgGCCStrike15_v2_Client2GCEconPrevi"
      "ewDataBlockRequest\020\304G\022\?\n:k_EMsgGCCStrike"
      "15_v2_Client2GCEconPreviewDataBlockRespo"
      "nse\020\305G\0220\n+k_EMsgGCCStrike15_v2_AccountPr"
      "ivacySettings\020\306G\022+\n&k_EMsgGCCStrike15_v2"
      "_SetMyActivityInfo\020\307G\022\?\n:k_EMsgGCCStrike"
      "15_v2_MatchListRequestTournamentPredicti"
      "ons\020\310G\022>\n9k_EMsgGCCStrike15_v2_MatchList"
      "UploadTournamentPredictions\020\311G\022&\n!k_EMsg"
      "GCCStrike15_v2_DraftSummary\020\312G\0225\n0k_EMsg"
      "GCCStrike15_v2_ClientRequestJoinFriendDa"
      "ta\020\313G\0225\n0k_EMsgGCCStrike15_v2_ClientRequ"
      "estJoinServerData\020\314G\0221\n,k_EMsgGCCStrike1"
      "5_v2_ClientRequestNewMission\020\315G\0223\n.k_EMs"
      "gGCCStrike15_v2_GC2ServerNotifyXPRewarde"
      "d\020\316G\0221\n,k_EMsgGCCStrike15_v2_GC2ClientTo"
      "urnamentInfo\020\317G\022\"\n\035k_EMsgGC_GlobalGame_S"
      "ubscribe\020\320G\022$\n\037k_EMsgGC_GlobalGame_Unsub"
      "scribe\020\321G\022\035\n\030k_EMsgGC_GlobalGame_Play\020\322G"
      "\022,\n\'k_EMsgGCCStrike15_v2_AcknowledgePena"
      "lty\020\323G\0226\n1k_EMsgGCCStrike15_v2_Client2GC"
      "RequestPrestigeCoin\020\324G\022.\n)k_EMsgGCCStrik"
      "e15_v2_GC2ClientGlobalStats\020\325G\022/\n*k_EMsg"
      "GCCStrike15_v2_Client2GCStreamUnlock\020\326G\022"
      "2\n-k_EMsgGCCStrike15_v2_FantasyRequestCl"
      "ientData\020\327G\0221\n,k_EMsgGCCStrike15_v2_Fant"
      "asyUpdateClientData\020\330G\0227\n2k_EMsgGCCStrik"
      "e15_v2_GCToClientSteamdatagramTicket\020\331G\022"
      "1\n,k_EMsgGCCStrike15_v2_ClientToGCReques"
      "tTicket\020\332G\0222\n-k_EMsgGCCStrike15_v2_Clien"
      "tToGCRequestElevate\020\333G\022$\n\037k_EMsgGCCStrik"
      "e15_v2_GlobalChat\020\334G\022.\n)k_EMsgGCCStrike1"
      "5_v2_GlobalChat_Subscribe\020\335G\0220\n+k_EMsgGC"
      "CStrike15_v2_GlobalChat_Unsubscribe\020\336G\022+"
      "\n&k_EMsgGCCStrike15_v2_ClientAuthKeyCode"
      "\020\337G\022(\n#k_EMsgGCCStrike15_v2_GotvSyncPack"
      "et\020\340G\022/\n*k_EMsgGCCStrike15_v2_ClientPlay"
      "erDecalSign\020\341G\022/\n*k_EMsgGCCStrike15_v2_C"
      "lientLogonFatalError\020\343G\022)\n$k_EMsgGCCStri"
      "ke15_v2_ClientPollState\020\344G\022(\n#k_EMsgGCCS"
      "trike15_v2_Party_Register\020\345G\022*\n%k_EMsgGC"
      "CStrike15_v2_Party_Unregister\020\346G\022&\n!k_EM"
      "sgGCCStrike15_v2_Party_Search\020\347G\022&\n!k_EM"
      "sgGCCStrike15_v2_Party_Invite\020\350G\0220\n+k_EM"
      "sgGCCStrike15_v2_Account_RequestCoPlays\020"
      "\351GB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 24249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cstrike15_gcmessages.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_2eproto::AddDescriptors();
  ::protobuf_engine_5fgcmessages_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cstrike15_5fgcmessages_2eproto
const ::google::protobuf::EnumDescriptor* ECsgoGCMsg_descriptor() {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cstrike15_5fgcmessages_2eproto::file_level_enum_descriptors[0];
}
bool ECsgoGCMsg_IsValid(int value) {
  switch (value) {
    case 9100:
    case 9101:
    case 9102:
    case 9103:
    case 9104:
    case 9105:
    case 9106:
    case 9107:
    case 9108:
    case 9109:
    case 9110:
    case 9111:
    case 9112:
    case 9113:
    case 9114:
    case 9115:
    case 9116:
    case 9117:
    case 9118:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9123:
    case 9124:
    case 9126:
    case 9127:
    case 9128:
    case 9129:
    case 9131:
    case 9132:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9137:
    case 9138:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9144:
    case 9145:
    case 9146:
    case 9147:
    case 9148:
    case 9149:
    case 9150:
    case 9151:
    case 9152:
    case 9153:
    case 9154:
    case 9155:
    case 9156:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9161:
    case 9162:
    case 9163:
    case 9164:
    case 9165:
    case 9166:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9171:
    case 9172:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9181:
    case 9182:
    case 9183:
    case 9184:
    case 9185:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9193:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameServerPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerPing::kPingFieldNumber;
const int GameServerPing::kIpFieldNumber;
const int GameServerPing::kInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerPing::GameServerPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GameServerPing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerPing)
}
GameServerPing::GameServerPing(const GameServerPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&instances_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
  // @@protoc_insertion_point(copy_constructor:GameServerPing)
}

void GameServerPing::SharedCtor() {
  ::memset(&ping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instances_) -
      reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
}

GameServerPing::~GameServerPing() {
  // @@protoc_insertion_point(destructor:GameServerPing)
  SharedDtor();
}

void GameServerPing::SharedDtor() {
}

void GameServerPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServerPing::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerPing& GameServerPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GameServerPing.base);
  return *internal_default_instance();
}


void GameServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instances_) -
        reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameServerPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 instances = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_instances();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameServerPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameServerPing)
  return false;
#undef DO_
}

void GameServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ping(), output);
  }

  // optional uint32 ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip(), output);
  }

  // optional uint32 instances = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->instances(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameServerPing)
}

::google::protobuf::uint8* GameServerPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ping(), target);
  }

  // optional uint32 ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip(), target);
  }

  // optional uint32 instances = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->instances(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerPing)
  return target;
}

size_t GameServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ping());
    }

    // optional uint32 ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 instances = 5;
    if (has_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instances());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerPing)
    MergeFrom(*source);
  }
}

void GameServerPing::MergeFrom(const GameServerPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      instances_ = from.instances_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPing::CopyFrom(const GameServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPing::IsInitialized() const {
  return true;
}

void GameServerPing::Swap(GameServerPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServerPing::InternalSwap(GameServerPing* other) {
  using std::swap;
  swap(ping_, other->ping_);
  swap(ip_, other->ip_);
  swap(instances_, other->instances_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServerPing::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataCenterPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataCenterPing::kDataCenterIdFieldNumber;
const int DataCenterPing::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataCenterPing::DataCenterPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DataCenterPing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCenterPing)
}
DataCenterPing::DataCenterPing(const DataCenterPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
  // @@protoc_insertion_point(copy_constructor:DataCenterPing)
}

void DataCenterPing::SharedCtor() {
  ::memset(&data_center_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
}

DataCenterPing::~DataCenterPing() {
  // @@protoc_insertion_point(destructor:DataCenterPing)
  SharedDtor();
}

void DataCenterPing::SharedDtor() {
}

void DataCenterPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataCenterPing::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataCenterPing& DataCenterPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DataCenterPing.base);
  return *internal_default_instance();
}


void DataCenterPing::Clear() {
// @@protoc_insertion_point(message_clear_start:DataCenterPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataCenterPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCenterPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_data_center_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCenterPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCenterPing)
  return false;
#undef DO_
}

void DataCenterPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCenterPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional sint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->ping(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCenterPing)
}

::google::protobuf::uint8* DataCenterPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DataCenterPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional sint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->ping(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCenterPing)
  return target;
}

size_t DataCenterPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataCenterPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional sint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ping());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCenterPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataCenterPing)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCenterPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataCenterPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataCenterPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataCenterPing)
    MergeFrom(*source);
  }
}

void DataCenterPing::MergeFrom(const DataCenterPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataCenterPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataCenterPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataCenterPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCenterPing::CopyFrom(const DataCenterPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataCenterPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCenterPing::IsInitialized() const {
  return true;
}

void DataCenterPing::Swap(DataCenterPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataCenterPing::InternalSwap(DataCenterPing* other) {
  using std::swap;
  swap(data_center_id_, other->data_center_id_);
  swap(ping_, other->ping_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataCenterPing::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetailedSearchStatistic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetailedSearchStatistic::kGameTypeFieldNumber;
const int DetailedSearchStatistic::kSearchTimeAvgFieldNumber;
const int DetailedSearchStatistic::kPlayersSearchingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetailedSearchStatistic::DetailedSearchStatistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DetailedSearchStatistic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetailedSearchStatistic)
}
DetailedSearchStatistic::DetailedSearchStatistic(const DetailedSearchStatistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_searching_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
  // @@protoc_insertion_point(copy_constructor:DetailedSearchStatistic)
}

void DetailedSearchStatistic::SharedCtor() {
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_searching_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
}

DetailedSearchStatistic::~DetailedSearchStatistic() {
  // @@protoc_insertion_point(destructor:DetailedSearchStatistic)
  SharedDtor();
}

void DetailedSearchStatistic::SharedDtor() {
}

void DetailedSearchStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetailedSearchStatistic::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetailedSearchStatistic& DetailedSearchStatistic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_DetailedSearchStatistic.base);
  return *internal_default_instance();
}


void DetailedSearchStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:DetailedSearchStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_searching_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetailedSearchStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetailedSearchStatistic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_time_avg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_search_time_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_time_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_searching = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_players_searching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetailedSearchStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetailedSearchStatistic)
  return false;
#undef DO_
}

void DetailedSearchStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetailedSearchStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  // optional uint32 search_time_avg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->search_time_avg(), output);
  }

  // optional uint32 players_searching = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->players_searching(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetailedSearchStatistic)
}

::google::protobuf::uint8* DetailedSearchStatistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DetailedSearchStatistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  // optional uint32 search_time_avg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->search_time_avg(), target);
  }

  // optional uint32 players_searching = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->players_searching(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetailedSearchStatistic)
  return target;
}

size_t DetailedSearchStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetailedSearchStatistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 search_time_avg = 2;
    if (has_search_time_avg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_time_avg());
    }

    // optional uint32 players_searching = 4;
    if (has_players_searching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_searching());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedSearchStatistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetailedSearchStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedSearchStatistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetailedSearchStatistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetailedSearchStatistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetailedSearchStatistic)
    MergeFrom(*source);
  }
}

void DetailedSearchStatistic::MergeFrom(const DetailedSearchStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetailedSearchStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      search_time_avg_ = from.search_time_avg_;
    }
    if (cached_has_bits & 0x00000004u) {
      players_searching_ = from.players_searching_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetailedSearchStatistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetailedSearchStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedSearchStatistic::CopyFrom(const DetailedSearchStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetailedSearchStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedSearchStatistic::IsInitialized() const {
  return true;
}

void DetailedSearchStatistic::Swap(DetailedSearchStatistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetailedSearchStatistic::InternalSwap(DetailedSearchStatistic* other) {
  using std::swap;
  swap(game_type_, other->game_type_);
  swap(search_time_avg_, other->search_time_avg_);
  swap(players_searching_, other->players_searching_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetailedSearchStatistic::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentPlayer::kAccountIdFieldNumber;
const int TournamentPlayer::kPlayerNickFieldNumber;
const int TournamentPlayer::kPlayerNameFieldNumber;
const int TournamentPlayer::kPlayerDobFieldNumber;
const int TournamentPlayer::kPlayerFlagFieldNumber;
const int TournamentPlayer::kPlayerLocationFieldNumber;
const int TournamentPlayer::kPlayerDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentPlayer::TournamentPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentPlayer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TournamentPlayer)
}
TournamentPlayer::TournamentPlayer(const TournamentPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_nick()) {
    player_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_nick_);
  }
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  player_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_flag()) {
    player_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_flag_);
  }
  player_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_location()) {
    player_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_location_);
  }
  player_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_desc()) {
    player_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_desc_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_dob_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
  // @@protoc_insertion_point(copy_constructor:TournamentPlayer)
}

void TournamentPlayer::SharedCtor() {
  player_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_dob_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
}

TournamentPlayer::~TournamentPlayer() {
  // @@protoc_insertion_point(destructor:TournamentPlayer)
  SharedDtor();
}

void TournamentPlayer::SharedDtor() {
  player_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TournamentPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentPlayer::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentPlayer& TournamentPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentPlayer.base);
  return *internal_default_instance();
}


void TournamentPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_nick_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      player_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      player_flag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      player_location_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      player_desc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_dob_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TournamentPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TournamentPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_nick().data(), static_cast<int>(this->player_nick().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentPlayer.player_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentPlayer.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_dob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_player_dob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_dob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_flag().data(), static_cast<int>(this->player_flag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentPlayer.player_flag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_location().data(), static_cast<int>(this->player_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentPlayer.player_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_desc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_desc().data(), static_cast<int>(this->player_desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentPlayer.player_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TournamentPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TournamentPlayer)
  return false;
#undef DO_
}

void TournamentPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TournamentPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nick().data(), static_cast<int>(this->player_nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_nick(), output);
  }

  // optional string player_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->player_name(), output);
  }

  // optional uint32 player_dob = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_dob(), output);
  }

  // optional string player_flag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_flag().data(), static_cast<int>(this->player_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_flag(), output);
  }

  // optional string player_location = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_location().data(), static_cast<int>(this->player_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->player_location(), output);
  }

  // optional string player_desc = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_desc().data(), static_cast<int>(this->player_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->player_desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TournamentPlayer)
}

::google::protobuf::uint8* TournamentPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TournamentPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nick().data(), static_cast<int>(this->player_nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nick(), target);
  }

  // optional string player_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // optional uint32 player_dob = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_dob(), target);
  }

  // optional string player_flag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_flag().data(), static_cast<int>(this->player_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_flag(), target);
  }

  // optional string player_location = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_location().data(), static_cast<int>(this->player_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->player_location(), target);
  }

  // optional string player_desc = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_desc().data(), static_cast<int>(this->player_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->player_desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentPlayer)
  return target;
}

size_t TournamentPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string player_nick = 2;
    if (has_player_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nick());
    }

    // optional string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string player_flag = 5;
    if (has_player_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_flag());
    }

    // optional string player_location = 6;
    if (has_player_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_location());
    }

    // optional string player_desc = 7;
    if (has_player_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_desc());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_dob = 4;
    if (has_player_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_dob());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentPlayer)
    MergeFrom(*source);
  }
}

void TournamentPlayer::MergeFrom(const TournamentPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_nick();
      player_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_player_flag();
      player_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_flag_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_player_location();
      player_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_location_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_player_desc();
      player_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_desc_);
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_dob_ = from.player_dob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentPlayer::CopyFrom(const TournamentPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPlayer::IsInitialized() const {
  return true;
}

void TournamentPlayer::Swap(TournamentPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentPlayer::InternalSwap(TournamentPlayer* other) {
  using std::swap;
  player_nick_.Swap(&other->player_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_flag_.Swap(&other->player_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_location_.Swap(&other->player_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_desc_.Swap(&other->player_desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(player_dob_, other->player_dob_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentPlayer::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentTeam::kTeamIdFieldNumber;
const int TournamentTeam::kTeamTagFieldNumber;
const int TournamentTeam::kTeamFlagFieldNumber;
const int TournamentTeam::kTeamNameFieldNumber;
const int TournamentTeam::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentTeam::TournamentTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TournamentTeam)
}
TournamentTeam::TournamentTeam(const TournamentTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  team_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_flag()) {
    team_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_flag_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:TournamentTeam)
}

void TournamentTeam::SharedCtor() {
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0;
}

TournamentTeam::~TournamentTeam() {
  // @@protoc_insertion_point(destructor:TournamentTeam)
  SharedDtor();
}

void TournamentTeam::SharedDtor() {
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TournamentTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentTeam::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentTeam& TournamentTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentTeam.base);
  return *internal_default_instance();
}


void TournamentTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_flag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  team_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TournamentTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TournamentTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentTeam.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_flag().data(), static_cast<int>(this->team_flag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentTeam.team_flag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentTeam.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentPlayer players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TournamentTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TournamentTeam)
  return false;
#undef DO_
}

void TournamentTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TournamentTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional string team_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_tag(), output);
  }

  // optional string team_flag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_flag().data(), static_cast<int>(this->team_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_flag(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // repeated .TournamentPlayer players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TournamentTeam)
}

::google::protobuf::uint8* TournamentTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TournamentTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_tag(), target);
  }

  // optional string team_flag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_flag().data(), static_cast<int>(this->team_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_flag(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // repeated .TournamentPlayer players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->players(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentTeam)
  return target;
}

size_t TournamentTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TournamentPlayer players = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string team_tag = 2;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_flag = 3;
    if (has_team_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_flag());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentTeam)
    MergeFrom(*source);
  }
}

void TournamentTeam::MergeFrom(const TournamentTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_flag();
      team_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_flag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentTeam::CopyFrom(const TournamentTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentTeam::IsInitialized() const {
  return true;
}

void TournamentTeam::Swap(TournamentTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentTeam::InternalSwap(TournamentTeam* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_flag_.Swap(&other->team_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentTeam::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentEvent::kEventIdFieldNumber;
const int TournamentEvent::kEventTagFieldNumber;
const int TournamentEvent::kEventNameFieldNumber;
const int TournamentEvent::kEventTimeStartFieldNumber;
const int TournamentEvent::kEventTimeEndFieldNumber;
const int TournamentEvent::kEventPublicFieldNumber;
const int TournamentEvent::kEventStageIdFieldNumber;
const int TournamentEvent::kEventStageNameFieldNumber;
const int TournamentEvent::kActiveSectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentEvent::TournamentEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TournamentEvent)
}
TournamentEvent::TournamentEvent(const TournamentEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_tag()) {
    event_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_tag_);
  }
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  event_stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stage_name()) {
    event_stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_stage_name_);
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_section_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(active_section_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentEvent)
}

void TournamentEvent::SharedCtor() {
  event_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_section_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(active_section_id_));
}

TournamentEvent::~TournamentEvent() {
  // @@protoc_insertion_point(destructor:TournamentEvent)
  SharedDtor();
}

void TournamentEvent::SharedDtor() {
  event_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_stage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TournamentEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentEvent::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentEvent& TournamentEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentEvent.base);
  return *internal_default_instance();
}


void TournamentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      event_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      event_stage_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_stage_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  }
  active_section_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TournamentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TournamentEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_tag().data(), static_cast<int>(this->event_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentEvent.event_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_time_start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_time_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_time_end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_event_time_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_public = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_event_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_stage_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_event_stage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_stage_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stage_name().data(), static_cast<int>(this->event_stage_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TournamentEvent.event_stage_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_section_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_active_section_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TournamentEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TournamentEvent)
  return false;
#undef DO_
}

void TournamentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TournamentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional string event_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_tag().data(), static_cast<int>(this->event_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_tag(), output);
  }

  // optional string event_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->event_name(), output);
  }

  // optional uint32 event_time_start = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_time_start(), output);
  }

  // optional uint32 event_time_end = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_time_end(), output);
  }

  // optional int32 event_public = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_public(), output);
  }

  // optional int32 event_stage_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->event_stage_id(), output);
  }

  // optional string event_stage_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stage_name().data(), static_cast<int>(this->event_stage_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->event_stage_name(), output);
  }

  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_section_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TournamentEvent)
}

::google::protobuf::uint8* TournamentEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TournamentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional string event_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_tag().data(), static_cast<int>(this->event_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_tag(), target);
  }

  // optional string event_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_name(), target);
  }

  // optional uint32 event_time_start = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_time_start(), target);
  }

  // optional uint32 event_time_end = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_time_end(), target);
  }

  // optional int32 event_public = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->event_public(), target);
  }

  // optional int32 event_stage_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->event_stage_id(), target);
  }

  // optional string event_stage_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stage_name().data(), static_cast<int>(this->event_stage_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->event_stage_name(), target);
  }

  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_section_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentEvent)
  return target;
}

size_t TournamentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string event_tag = 2;
    if (has_event_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_tag());
    }

    // optional string event_name = 3;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional string event_stage_name = 8;
    if (has_event_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_stage_name());
    }

    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional uint32 event_time_start = 4;
    if (has_event_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_start());
    }

    // optional uint32 event_time_end = 5;
    if (has_event_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_end());
    }

    // optional int32 event_public = 6;
    if (has_event_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_public());
    }

    // optional int32 event_stage_id = 7;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

  }
  // optional uint32 active_section_id = 9;
  if (has_active_section_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->active_section_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentEvent)
    MergeFrom(*source);
  }
}

void TournamentEvent::MergeFrom(const TournamentEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_tag();
      event_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_event_stage_name();
      event_stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_stage_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_time_start_ = from.event_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_time_end_ = from.event_time_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      event_public_ = from.event_public_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_stage_id_ = from.event_stage_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_active_section_id(from.active_section_id());
  }
}

void TournamentEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentEvent::CopyFrom(const TournamentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentEvent::IsInitialized() const {
  return true;
}

void TournamentEvent::Swap(TournamentEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentEvent::InternalSwap(TournamentEvent* other) {
  using std::swap;
  event_tag_.Swap(&other->event_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_name_.Swap(&other->event_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_stage_name_.Swap(&other->event_stage_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_id_, other->event_id_);
  swap(event_time_start_, other->event_time_start_);
  swap(event_time_end_, other->event_time_end_);
  swap(event_public_, other->event_public_);
  swap(event_stage_id_, other->event_stage_id_);
  swap(active_section_id_, other->active_section_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentEvent::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlobalStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalStatistics::kPlayersOnlineFieldNumber;
const int GlobalStatistics::kServersOnlineFieldNumber;
const int GlobalStatistics::kPlayersSearchingFieldNumber;
const int GlobalStatistics::kServersAvailableFieldNumber;
const int GlobalStatistics::kOngoingMatchesFieldNumber;
const int GlobalStatistics::kSearchTimeAvgFieldNumber;
const int GlobalStatistics::kSearchStatisticsFieldNumber;
const int GlobalStatistics::kMainPostUrlFieldNumber;
const int GlobalStatistics::kRequiredAppidVersionFieldNumber;
const int GlobalStatistics::kPricesheetVersionFieldNumber;
const int GlobalStatistics::kTwitchStreamsVersionFieldNumber;
const int GlobalStatistics::kActiveTournamentEventidFieldNumber;
const int GlobalStatistics::kActiveSurveyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalStatistics::GlobalStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GlobalStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GlobalStatistics)
}
GlobalStatistics::GlobalStatistics(const GlobalStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      search_statistics_(from.search_statistics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_post_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_main_post_url()) {
    main_post_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_post_url_);
  }
  ::memcpy(&players_online_, &from.players_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_survey_id_) -
    reinterpret_cast<char*>(&players_online_)) + sizeof(active_survey_id_));
  // @@protoc_insertion_point(copy_constructor:GlobalStatistics)
}

void GlobalStatistics::SharedCtor() {
  main_post_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&players_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_survey_id_) -
      reinterpret_cast<char*>(&players_online_)) + sizeof(active_survey_id_));
}

GlobalStatistics::~GlobalStatistics() {
  // @@protoc_insertion_point(destructor:GlobalStatistics)
  SharedDtor();
}

void GlobalStatistics::SharedDtor() {
  main_post_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GlobalStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GlobalStatistics::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalStatistics& GlobalStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_GlobalStatistics.base);
  return *internal_default_instance();
}


void GlobalStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:GlobalStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_statistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    main_post_url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&players_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_appid_version_) -
        reinterpret_cast<char*>(&players_online_)) + sizeof(required_appid_version_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&pricesheet_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_survey_id_) -
        reinterpret_cast<char*>(&pricesheet_version_)) + sizeof(active_survey_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlobalStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GlobalStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 players_online = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_players_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 servers_online = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_servers_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_searching = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_players_searching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 servers_available = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_servers_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ongoing_matches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ongoing_matches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ongoing_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_time_avg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_search_time_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_time_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DetailedSearchStatistic search_statistics = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_search_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string main_post_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_post_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GlobalStatistics.main_post_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_appid_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_required_appid_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_appid_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pricesheet_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pricesheet_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pricesheet_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 twitch_streams_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_twitch_streams_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twitch_streams_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_tournament_eventid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_active_tournament_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_tournament_eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_survey_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_active_survey_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_survey_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GlobalStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GlobalStatistics)
  return false;
#undef DO_
}

void GlobalStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GlobalStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 players_online = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->players_online(), output);
  }

  // optional uint32 servers_online = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servers_online(), output);
  }

  // optional uint32 players_searching = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->players_searching(), output);
  }

  // optional uint32 servers_available = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servers_available(), output);
  }

  // optional uint32 ongoing_matches = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ongoing_matches(), output);
  }

  // optional uint32 search_time_avg = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->search_time_avg(), output);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_statistics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->search_statistics(static_cast<int>(i)),
      output);
  }

  // optional string main_post_url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GlobalStatistics.main_post_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->main_post_url(), output);
  }

  // optional uint32 required_appid_version = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->required_appid_version(), output);
  }

  // optional uint32 pricesheet_version = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pricesheet_version(), output);
  }

  // optional uint32 twitch_streams_version = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->twitch_streams_version(), output);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->active_tournament_eventid(), output);
  }

  // optional uint32 active_survey_id = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->active_survey_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GlobalStatistics)
}

::google::protobuf::uint8* GlobalStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GlobalStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 players_online = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->players_online(), target);
  }

  // optional uint32 servers_online = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servers_online(), target);
  }

  // optional uint32 players_searching = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->players_searching(), target);
  }

  // optional uint32 servers_available = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servers_available(), target);
  }

  // optional uint32 ongoing_matches = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ongoing_matches(), target);
  }

  // optional uint32 search_time_avg = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->search_time_avg(), target);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_statistics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->search_statistics(static_cast<int>(i)), deterministic, target);
  }

  // optional string main_post_url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GlobalStatistics.main_post_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->main_post_url(), target);
  }

  // optional uint32 required_appid_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->required_appid_version(), target);
  }

  // optional uint32 pricesheet_version = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pricesheet_version(), target);
  }

  // optional uint32 twitch_streams_version = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->twitch_streams_version(), target);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->active_tournament_eventid(), target);
  }

  // optional uint32 active_survey_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->active_survey_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlobalStatistics)
  return target;
}

size_t GlobalStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlobalStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .DetailedSearchStatistic search_statistics = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->search_statistics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->search_statistics(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string main_post_url = 8;
    if (has_main_post_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_post_url());
    }

    // optional uint32 players_online = 1;
    if (has_players_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_online());
    }

    // optional uint32 servers_online = 2;
    if (has_servers_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_online());
    }

    // optional uint32 players_searching = 3;
    if (has_players_searching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_searching());
    }

    // optional uint32 servers_available = 4;
    if (has_servers_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_available());
    }

    // optional uint32 ongoing_matches = 5;
    if (has_ongoing_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ongoing_matches());
    }

    // optional uint32 search_time_avg = 6;
    if (has_search_time_avg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_time_avg());
    }

    // optional uint32 required_appid_version = 9;
    if (has_required_appid_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_appid_version());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 pricesheet_version = 10;
    if (has_pricesheet_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pricesheet_version());
    }

    // optional uint32 twitch_streams_version = 11;
    if (has_twitch_streams_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->twitch_streams_version());
    }

    // optional uint32 active_tournament_eventid = 12;
    if (has_active_tournament_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_tournament_eventid());
    }

    // optional uint32 active_survey_id = 13;
    if (has_active_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_survey_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GlobalStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GlobalStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GlobalStatistics)
    MergeFrom(*source);
  }
}

void GlobalStatistics::MergeFrom(const GlobalStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlobalStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_statistics_.MergeFrom(from.search_statistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_main_post_url();
      main_post_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_post_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      players_online_ = from.players_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      servers_online_ = from.servers_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      players_searching_ = from.players_searching_;
    }
    if (cached_has_bits & 0x00000010u) {
      servers_available_ = from.servers_available_;
    }
    if (cached_has_bits & 0x00000020u) {
      ongoing_matches_ = from.ongoing_matches_;
    }
    if (cached_has_bits & 0x00000040u) {
      search_time_avg_ = from.search_time_avg_;
    }
    if (cached_has_bits & 0x00000080u) {
      required_appid_version_ = from.required_appid_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      pricesheet_version_ = from.pricesheet_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      twitch_streams_version_ = from.twitch_streams_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_tournament_eventid_ = from.active_tournament_eventid_;
    }
    if (cached_has_bits & 0x00000800u) {
      active_survey_id_ = from.active_survey_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GlobalStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStatistics::CopyFrom(const GlobalStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlobalStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStatistics::IsInitialized() const {
  return true;
}

void GlobalStatistics::Swap(GlobalStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalStatistics::InternalSwap(GlobalStatistics* other) {
  using std::swap;
  CastToBase(&search_statistics_)->InternalSwap(CastToBase(&other->search_statistics_));
  main_post_url_.Swap(&other->main_post_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(players_online_, other->players_online_);
  swap(servers_online_, other->servers_online_);
  swap(players_searching_, other->players_searching_);
  swap(servers_available_, other->servers_available_);
  swap(ongoing_matches_, other->ongoing_matches_);
  swap(search_time_avg_, other->search_time_avg_);
  swap(required_appid_version_, other->required_appid_version_);
  swap(pricesheet_version_, other->pricesheet_version_);
  swap(twitch_streams_version_, other->twitch_streams_version_);
  swap(active_tournament_eventid_, other->active_tournament_eventid_);
  swap(active_survey_id_, other->active_survey_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GlobalStatistics::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperationalStatisticDescription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationalStatisticDescription::kNameFieldNumber;
const int OperationalStatisticDescription::kIdkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationalStatisticDescription::OperationalStatisticDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticDescription.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperationalStatisticDescription)
}
OperationalStatisticDescription::OperationalStatisticDescription(const OperationalStatisticDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  idkey_ = from.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticDescription)
}

void OperationalStatisticDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idkey_ = 0u;
}

OperationalStatisticDescription::~OperationalStatisticDescription() {
  // @@protoc_insertion_point(destructor:OperationalStatisticDescription)
  SharedDtor();
}

void OperationalStatisticDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperationalStatisticDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperationalStatisticDescription::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationalStatisticDescription& OperationalStatisticDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticDescription.base);
  return *internal_default_instance();
}


void OperationalStatisticDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  idkey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationalStatisticDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperationalStatisticDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OperationalStatisticDescription.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_idkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperationalStatisticDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperationalStatisticDescription)
  return false;
#undef DO_
}

void OperationalStatisticDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperationalStatisticDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OperationalStatisticDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 idkey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperationalStatisticDescription)
}

::google::protobuf::uint8* OperationalStatisticDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OperationalStatisticDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 idkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticDescription)
  return target;
}

size_t OperationalStatisticDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 idkey = 2;
    if (has_idkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationalStatisticDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticDescription)
    MergeFrom(*source);
  }
}

void OperationalStatisticDescription::MergeFrom(const OperationalStatisticDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      idkey_ = from.idkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationalStatisticDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticDescription::CopyFrom(const OperationalStatisticDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticDescription::IsInitialized() const {
  return true;
}

void OperationalStatisticDescription::Swap(OperationalStatisticDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationalStatisticDescription::InternalSwap(OperationalStatisticDescription* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idkey_, other->idkey_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperationalStatisticDescription::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperationalStatisticElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationalStatisticElement::kIdkeyFieldNumber;
const int OperationalStatisticElement::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationalStatisticElement::OperationalStatisticElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperationalStatisticElement)
}
OperationalStatisticElement::OperationalStatisticElement(const OperationalStatisticElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idkey_ = from.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticElement)
}

void OperationalStatisticElement::SharedCtor() {
  idkey_ = 0u;
}

OperationalStatisticElement::~OperationalStatisticElement() {
  // @@protoc_insertion_point(destructor:OperationalStatisticElement)
  SharedDtor();
}

void OperationalStatisticElement::SharedDtor() {
}

void OperationalStatisticElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperationalStatisticElement::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationalStatisticElement& OperationalStatisticElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticElement.base);
  return *internal_default_instance();
}


void OperationalStatisticElement::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  idkey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationalStatisticElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperationalStatisticElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idkey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_idkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperationalStatisticElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperationalStatisticElement)
  return false;
#undef DO_
}

void OperationalStatisticElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperationalStatisticElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idkey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idkey(), output);
  }

  // repeated int32 values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperationalStatisticElement)
}

::google::protobuf::uint8* OperationalStatisticElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idkey(), target);
  }

  // repeated int32 values = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->values_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticElement)
  return target;
}

size_t OperationalStatisticElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 values = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  // optional uint32 idkey = 1;
  if (has_idkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticElement)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationalStatisticElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticElement)
    MergeFrom(*source);
  }
}

void OperationalStatisticElement::MergeFrom(const OperationalStatisticElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_idkey()) {
    set_idkey(from.idkey());
  }
}

void OperationalStatisticElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticElement::CopyFrom(const OperationalStatisticElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticElement::IsInitialized() const {
  return true;
}

void OperationalStatisticElement::Swap(OperationalStatisticElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationalStatisticElement::InternalSwap(OperationalStatisticElement* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(idkey_, other->idkey_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperationalStatisticElement::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperationalStatisticsPacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationalStatisticsPacket::kPacketidFieldNumber;
const int OperationalStatisticsPacket::kMstimestampFieldNumber;
const int OperationalStatisticsPacket::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationalStatisticsPacket::OperationalStatisticsPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticsPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperationalStatisticsPacket)
}
OperationalStatisticsPacket::OperationalStatisticsPacket(const OperationalStatisticsPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetid_, &from.packetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstimestamp_) -
    reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticsPacket)
}

void OperationalStatisticsPacket::SharedCtor() {
  ::memset(&packetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstimestamp_) -
      reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
}

OperationalStatisticsPacket::~OperationalStatisticsPacket() {
  // @@protoc_insertion_point(destructor:OperationalStatisticsPacket)
  SharedDtor();
}

void OperationalStatisticsPacket::SharedDtor() {
}

void OperationalStatisticsPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperationalStatisticsPacket::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationalStatisticsPacket& OperationalStatisticsPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_OperationalStatisticsPacket.base);
  return *internal_default_instance();
}


void OperationalStatisticsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticsPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&packetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstimestamp_) -
        reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationalStatisticsPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperationalStatisticsPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_packetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mstimestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mstimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OperationalStatisticElement values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperationalStatisticsPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperationalStatisticsPacket)
  return false;
#undef DO_
}

void OperationalStatisticsPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperationalStatisticsPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  // optional int32 mstimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mstimestamp(), output);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperationalStatisticsPacket)
}

::google::protobuf::uint8* OperationalStatisticsPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticsPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  // optional int32 mstimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mstimestamp(), target);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticsPacket)
  return target;
}

size_t OperationalStatisticsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticsPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OperationalStatisticElement values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 packetid = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetid());
    }

    // optional int32 mstimestamp = 2;
    if (has_mstimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstimestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticsPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticsPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticsPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationalStatisticsPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticsPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticsPacket)
    MergeFrom(*source);
  }
}

void OperationalStatisticsPacket::MergeFrom(const OperationalStatisticsPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticsPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      packetid_ = from.packetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstimestamp_ = from.mstimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationalStatisticsPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticsPacket::CopyFrom(const OperationalStatisticsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticsPacket::IsInitialized() const {
  return true;
}

void OperationalStatisticsPacket::Swap(OperationalStatisticsPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationalStatisticsPacket::InternalSwap(OperationalStatisticsPacket* other) {
  using std::swap;
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
  swap(packetid_, other->packetid_);
  swap(mstimestamp_, other->mstimestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperationalStatisticsPacket::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRankingInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRankingInfo::kAccountIdFieldNumber;
const int PlayerRankingInfo::kRankIdFieldNumber;
const int PlayerRankingInfo::kWinsFieldNumber;
const int PlayerRankingInfo::kRankChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRankingInfo::PlayerRankingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerRankingInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerRankingInfo)
}
PlayerRankingInfo::PlayerRankingInfo(const PlayerRankingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
  // @@protoc_insertion_point(copy_constructor:PlayerRankingInfo)
}

void PlayerRankingInfo::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_change_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
}

PlayerRankingInfo::~PlayerRankingInfo() {
  // @@protoc_insertion_point(destructor:PlayerRankingInfo)
  SharedDtor();
}

void PlayerRankingInfo::SharedDtor() {
}

void PlayerRankingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerRankingInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRankingInfo& PlayerRankingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerRankingInfo.base);
  return *internal_default_instance();
}


void PlayerRankingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerRankingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_change_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerRankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerRankingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rank_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank_change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_rank_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerRankingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerRankingInfo)
  return false;
#undef DO_
}

void PlayerRankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerRankingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 rank_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_id(), output);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional float rank_change = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rank_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerRankingInfo)
}

::google::protobuf::uint8* PlayerRankingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRankingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional float rank_change = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rank_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRankingInfo)
  return target;
}

size_t PlayerRankingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerRankingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional float rank_change = 4;
    if (has_rank_change()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerRankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRankingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRankingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerRankingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerRankingInfo)
    MergeFrom(*source);
  }
}

void PlayerRankingInfo::MergeFrom(const PlayerRankingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerRankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_id_ = from.rank_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_change_ = from.rank_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerRankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerRankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankingInfo::CopyFrom(const PlayerRankingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerRankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo::IsInitialized() const {
  return true;
}

void PlayerRankingInfo::Swap(PlayerRankingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRankingInfo::InternalSwap(PlayerRankingInfo* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(rank_id_, other->rank_id_);
  swap(wins_, other->wins_);
  swap(rank_change_, other->rank_change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerRankingInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerCommendationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommendationInfo::kCmdFriendlyFieldNumber;
const int PlayerCommendationInfo::kCmdTeachingFieldNumber;
const int PlayerCommendationInfo::kCmdLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommendationInfo::PlayerCommendationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerCommendationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerCommendationInfo)
}
PlayerCommendationInfo::PlayerCommendationInfo(const PlayerCommendationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_friendly_, &from.cmd_friendly_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_leader_) -
    reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
  // @@protoc_insertion_point(copy_constructor:PlayerCommendationInfo)
}

void PlayerCommendationInfo::SharedCtor() {
  ::memset(&cmd_friendly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_leader_) -
      reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
}

PlayerCommendationInfo::~PlayerCommendationInfo() {
  // @@protoc_insertion_point(destructor:PlayerCommendationInfo)
  SharedDtor();
}

void PlayerCommendationInfo::SharedDtor() {
}

void PlayerCommendationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerCommendationInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerCommendationInfo& PlayerCommendationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerCommendationInfo.base);
  return *internal_default_instance();
}


void PlayerCommendationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCommendationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&cmd_friendly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_leader_) -
        reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerCommendationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerCommendationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_friendly = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cmd_friendly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_friendly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd_teaching = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cmd_teaching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_teaching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd_leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cmd_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerCommendationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerCommendationInfo)
  return false;
#undef DO_
}

void PlayerCommendationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerCommendationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cmd_friendly = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_friendly(), output);
  }

  // optional uint32 cmd_teaching = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_teaching(), output);
  }

  // optional uint32 cmd_leader = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd_leader(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerCommendationInfo)
}

::google::protobuf::uint8* PlayerCommendationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCommendationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cmd_friendly = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_friendly(), target);
  }

  // optional uint32 cmd_teaching = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_teaching(), target);
  }

  // optional uint32 cmd_leader = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd_leader(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCommendationInfo)
  return target;
}

size_t PlayerCommendationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCommendationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 cmd_friendly = 1;
    if (has_cmd_friendly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_friendly());
    }

    // optional uint32 cmd_teaching = 2;
    if (has_cmd_teaching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_teaching());
    }

    // optional uint32 cmd_leader = 4;
    if (has_cmd_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_leader());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommendationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerCommendationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommendationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerCommendationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerCommendationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerCommendationInfo)
    MergeFrom(*source);
  }
}

void PlayerCommendationInfo::MergeFrom(const PlayerCommendationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerCommendationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_friendly_ = from.cmd_friendly_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_teaching_ = from.cmd_teaching_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_leader_ = from.cmd_leader_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCommendationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerCommendationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommendationInfo::CopyFrom(const PlayerCommendationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCommendationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommendationInfo::IsInitialized() const {
  return true;
}

void PlayerCommendationInfo::Swap(PlayerCommendationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommendationInfo::InternalSwap(PlayerCommendationInfo* other) {
  using std::swap;
  swap(cmd_friendly_, other->cmd_friendly_);
  swap(cmd_teaching_, other->cmd_teaching_);
  swap(cmd_leader_, other->cmd_leader_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerCommendationInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerMedalsInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerMedalsInfo::kMedalTeamFieldNumber;
const int PlayerMedalsInfo::kMedalCombatFieldNumber;
const int PlayerMedalsInfo::kMedalWeaponFieldNumber;
const int PlayerMedalsInfo::kMedalGlobalFieldNumber;
const int PlayerMedalsInfo::kMedalArmsFieldNumber;
const int PlayerMedalsInfo::kDisplayItemsDefidxFieldNumber;
const int PlayerMedalsInfo::kFeaturedDisplayItemDefidxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMedalsInfo::PlayerMedalsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerMedalsInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerMedalsInfo)
}
PlayerMedalsInfo::PlayerMedalsInfo(const PlayerMedalsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      display_items_defidx_(from.display_items_defidx_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&medal_team_, &from.medal_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&featured_display_item_defidx_) -
    reinterpret_cast<char*>(&medal_team_)) + sizeof(featured_display_item_defidx_));
  // @@protoc_insertion_point(copy_constructor:PlayerMedalsInfo)
}

void PlayerMedalsInfo::SharedCtor() {
  ::memset(&medal_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&featured_display_item_defidx_) -
      reinterpret_cast<char*>(&medal_team_)) + sizeof(featured_display_item_defidx_));
}

PlayerMedalsInfo::~PlayerMedalsInfo() {
  // @@protoc_insertion_point(destructor:PlayerMedalsInfo)
  SharedDtor();
}

void PlayerMedalsInfo::SharedDtor() {
}

void PlayerMedalsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerMedalsInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerMedalsInfo& PlayerMedalsInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerMedalsInfo.base);
  return *internal_default_instance();
}


void PlayerMedalsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerMedalsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_items_defidx_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&medal_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&featured_display_item_defidx_) -
        reinterpret_cast<char*>(&medal_team_)) + sizeof(featured_display_item_defidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerMedalsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerMedalsInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 medal_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_medal_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 medal_combat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_medal_combat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_combat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 medal_weapon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_medal_weapon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_weapon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 medal_global = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_medal_global();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_global_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 medal_arms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_medal_arms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_arms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 display_items_defidx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_display_items_defidx())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_display_items_defidx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 featured_display_item_defidx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_featured_display_item_defidx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &featured_display_item_defidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerMedalsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerMedalsInfo)
  return false;
#undef DO_
}

void PlayerMedalsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerMedalsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 medal_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->medal_team(), output);
  }

  // optional uint32 medal_combat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->medal_combat(), output);
  }

  // optional uint32 medal_weapon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->medal_weapon(), output);
  }

  // optional uint32 medal_global = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->medal_global(), output);
  }

  // optional uint32 medal_arms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->medal_arms(), output);
  }

  // repeated uint32 display_items_defidx = 7;
  for (int i = 0, n = this->display_items_defidx_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->display_items_defidx(i), output);
  }

  // optional uint32 featured_display_item_defidx = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->featured_display_item_defidx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerMedalsInfo)
}

::google::protobuf::uint8* PlayerMedalsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerMedalsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 medal_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->medal_team(), target);
  }

  // optional uint32 medal_combat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->medal_combat(), target);
  }

  // optional uint32 medal_weapon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->medal_weapon(), target);
  }

  // optional uint32 medal_global = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->medal_global(), target);
  }

  // optional uint32 medal_arms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->medal_arms(), target);
  }

  // repeated uint32 display_items_defidx = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->display_items_defidx_, target);

  // optional uint32 featured_display_item_defidx = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->featured_display_item_defidx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerMedalsInfo)
  return target;
}

size_t PlayerMedalsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerMedalsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 display_items_defidx = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->display_items_defidx_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->display_items_defidx_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 medal_team = 1;
    if (has_medal_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_team());
    }

    // optional uint32 medal_combat = 2;
    if (has_medal_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_combat());
    }

    // optional uint32 medal_weapon = 3;
    if (has_medal_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_weapon());
    }

    // optional uint32 medal_global = 4;
    if (has_medal_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_global());
    }

    // optional uint32 medal_arms = 5;
    if (has_medal_arms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_arms());
    }

    // optional uint32 featured_display_item_defidx = 8;
    if (has_featured_display_item_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->featured_display_item_defidx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerMedalsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerMedalsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMedalsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMedalsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerMedalsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerMedalsInfo)
    MergeFrom(*source);
  }
}

void PlayerMedalsInfo::MergeFrom(const PlayerMedalsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerMedalsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_items_defidx_.MergeFrom(from.display_items_defidx_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      medal_team_ = from.medal_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      medal_combat_ = from.medal_combat_;
    }
    if (cached_has_bits & 0x00000004u) {
      medal_weapon_ = from.medal_weapon_;
    }
    if (cached_has_bits & 0x00000008u) {
      medal_global_ = from.medal_global_;
    }
    if (cached_has_bits & 0x00000010u) {
      medal_arms_ = from.medal_arms_;
    }
    if (cached_has_bits & 0x00000020u) {
      featured_display_item_defidx_ = from.featured_display_item_defidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerMedalsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerMedalsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMedalsInfo::CopyFrom(const PlayerMedalsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerMedalsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMedalsInfo::IsInitialized() const {
  return true;
}

void PlayerMedalsInfo::Swap(PlayerMedalsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMedalsInfo::InternalSwap(PlayerMedalsInfo* other) {
  using std::swap;
  display_items_defidx_.InternalSwap(&other->display_items_defidx_);
  swap(medal_team_, other->medal_team_);
  swap(medal_combat_, other->medal_combat_);
  swap(medal_weapon_, other->medal_weapon_);
  swap(medal_global_, other->medal_global_);
  swap(medal_arms_, other->medal_arms_);
  swap(featured_display_item_defidx_, other->featured_display_item_defidx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerMedalsInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountActivity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountActivity::kActivityFieldNumber;
const int AccountActivity::kModeFieldNumber;
const int AccountActivity::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountActivity::AccountActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_AccountActivity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AccountActivity)
}
AccountActivity::AccountActivity(const AccountActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_, &from.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&activity_)) + sizeof(map_));
  // @@protoc_insertion_point(copy_constructor:AccountActivity)
}

void AccountActivity::SharedCtor() {
  ::memset(&activity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&activity_)) + sizeof(map_));
}

AccountActivity::~AccountActivity() {
  // @@protoc_insertion_point(destructor:AccountActivity)
  SharedDtor();
}

void AccountActivity::SharedDtor() {
}

void AccountActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountActivity::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountActivity& AccountActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_AccountActivity.base);
  return *internal_default_instance();
}


void AccountActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_) -
        reinterpret_cast<char*>(&activity_)) + sizeof(map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AccountActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AccountActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AccountActivity)
  return false;
#undef DO_
}

void AccountActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AccountActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity(), output);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // optional uint32 map = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AccountActivity)
}

::google::protobuf::uint8* AccountActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AccountActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity(), target);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // optional uint32 map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountActivity)
  return target;
}

size_t AccountActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 activity = 1;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity());
    }

    // optional uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountActivity)
    MergeFrom(*source);
  }
}

void AccountActivity::MergeFrom(const AccountActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      map_ = from.map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountActivity::CopyFrom(const AccountActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountActivity::IsInitialized() const {
  return true;
}

void AccountActivity::Swap(AccountActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountActivity::InternalSwap(AccountActivity* other) {
  using std::swap;
  swap(activity_, other->activity_);
  swap(mode_, other->mode_);
  swap(map_, other->map_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountActivity::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentMatchSetup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentMatchSetup::kEventIdFieldNumber;
const int TournamentMatchSetup::kTeamIdCtFieldNumber;
const int TournamentMatchSetup::kTeamIdTFieldNumber;
const int TournamentMatchSetup::kEventStageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentMatchSetup::TournamentMatchSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentMatchSetup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TournamentMatchSetup)
}
TournamentMatchSetup::TournamentMatchSetup(const TournamentMatchSetup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_stage_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentMatchSetup)
}

void TournamentMatchSetup::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_stage_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
}

TournamentMatchSetup::~TournamentMatchSetup() {
  // @@protoc_insertion_point(destructor:TournamentMatchSetup)
  SharedDtor();
}

void TournamentMatchSetup::SharedDtor() {
}

void TournamentMatchSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentMatchSetup::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentMatchSetup& TournamentMatchSetup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_TournamentMatchSetup.base);
  return *internal_default_instance();
}


void TournamentMatchSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentMatchSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_stage_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TournamentMatchSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TournamentMatchSetup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_ct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_team_id_ct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_team_id_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_stage_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_stage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TournamentMatchSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TournamentMatchSetup)
  return false;
#undef DO_
}

void TournamentMatchSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TournamentMatchSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id_ct(), output);
  }

  // optional int32 team_id_t = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id_t(), output);
  }

  // optional int32 event_stage_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_stage_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TournamentMatchSetup)
}

::google::protobuf::uint8* TournamentMatchSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TournamentMatchSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id_ct(), target);
  }

  // optional int32 team_id_t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id_t(), target);
  }

  // optional int32 event_stage_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_stage_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentMatchSetup)
  return target;
}

size_t TournamentMatchSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentMatchSetup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 team_id_ct = 2;
    if (has_team_id_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_ct());
    }

    // optional int32 team_id_t = 3;
    if (has_team_id_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_t());
    }

    // optional int32 event_stage_id = 4;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentMatchSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentMatchSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentMatchSetup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentMatchSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentMatchSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentMatchSetup)
    MergeFrom(*source);
  }
}

void TournamentMatchSetup::MergeFrom(const TournamentMatchSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentMatchSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ct_ = from.team_id_ct_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_t_ = from.team_id_t_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_stage_id_ = from.event_stage_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentMatchSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentMatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentMatchSetup::CopyFrom(const TournamentMatchSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentMatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentMatchSetup::IsInitialized() const {
  return true;
}

void TournamentMatchSetup::Swap(TournamentMatchSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentMatchSetup::InternalSwap(TournamentMatchSetup* other) {
  using std::swap;
  swap(event_id_, other->event_id_);
  swap(team_id_ct_, other->team_id_ct_);
  swap(team_id_t_, other->team_id_t_);
  swap(event_stage_id_, other->event_stage_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentMatchSetup::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerHltvInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerHltvInfo::kTvUdpPortFieldNumber;
const int ServerHltvInfo::kTvWatchKeyFieldNumber;
const int ServerHltvInfo::kTvSlotsFieldNumber;
const int ServerHltvInfo::kTvClientsFieldNumber;
const int ServerHltvInfo::kTvProxiesFieldNumber;
const int ServerHltvInfo::kTvTimeFieldNumber;
const int ServerHltvInfo::kGameTypeFieldNumber;
const int ServerHltvInfo::kGameMapgroupFieldNumber;
const int ServerHltvInfo::kGameMapFieldNumber;
const int ServerHltvInfo::kTvMasterSteamidFieldNumber;
const int ServerHltvInfo::kTvLocalSlotsFieldNumber;
const int ServerHltvInfo::kTvLocalClientsFieldNumber;
const int ServerHltvInfo::kTvLocalProxiesFieldNumber;
const int ServerHltvInfo::kTvRelaySlotsFieldNumber;
const int ServerHltvInfo::kTvRelayClientsFieldNumber;
const int ServerHltvInfo::kTvRelayProxiesFieldNumber;
const int ServerHltvInfo::kTvRelayAddressFieldNumber;
const int ServerHltvInfo::kTvRelayPortFieldNumber;
const int ServerHltvInfo::kTvRelaySteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerHltvInfo::ServerHltvInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ServerHltvInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerHltvInfo)
}
ServerHltvInfo::ServerHltvInfo(const ServerHltvInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_mapgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mapgroup()) {
    game_mapgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mapgroup_);
  }
  game_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_map()) {
    game_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_map_);
  }
  ::memcpy(&tv_watch_key_, &from.tv_watch_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&tv_relay_steamid_) -
    reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(tv_relay_steamid_));
  // @@protoc_insertion_point(copy_constructor:ServerHltvInfo)
}

void ServerHltvInfo::SharedCtor() {
  game_mapgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tv_watch_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tv_relay_steamid_) -
      reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(tv_relay_steamid_));
}

ServerHltvInfo::~ServerHltvInfo() {
  // @@protoc_insertion_point(destructor:ServerHltvInfo)
  SharedDtor();
}

void ServerHltvInfo::SharedDtor() {
  game_mapgroup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerHltvInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerHltvInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerHltvInfo& ServerHltvInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ServerHltvInfo.base);
  return *internal_default_instance();
}


void ServerHltvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerHltvInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      game_mapgroup_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_map_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&tv_watch_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_time_) -
        reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(tv_time_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_relay_proxies_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(tv_relay_proxies_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&tv_relay_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_relay_steamid_) -
        reinterpret_cast<char*>(&tv_relay_address_)) + sizeof(tv_relay_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerHltvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerHltvInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tv_udp_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tv_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tv_watch_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tv_watch_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_watch_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tv_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_clients = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tv_clients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_proxies = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tv_proxies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_proxies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tv_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mapgroup = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mapgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerHltvInfo.game_mapgroup");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_map().data(), static_cast<int>(this->game_map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerHltvInfo.game_map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tv_master_steamid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_tv_master_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_master_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_local_slots = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_tv_local_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_local_clients = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_tv_local_clients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_local_proxies = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_tv_local_proxies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_proxies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_relay_slots = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_tv_relay_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_relay_clients = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_tv_relay_clients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_relay_proxies = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_tv_relay_proxies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_proxies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_relay_address = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_tv_relay_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_relay_port = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_tv_relay_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tv_relay_steamid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_tv_relay_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_relay_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerHltvInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerHltvInfo)
  return false;
#undef DO_
}

void ServerHltvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerHltvInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tv_udp_port = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tv_udp_port(), output);
  }

  // optional uint64 tv_watch_key = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tv_watch_key(), output);
  }

  // optional uint32 tv_slots = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tv_slots(), output);
  }

  // optional uint32 tv_clients = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tv_clients(), output);
  }

  // optional uint32 tv_proxies = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tv_proxies(), output);
  }

  // optional uint32 tv_time = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tv_time(), output);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_type(), output);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_mapgroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->game_mapgroup(), output);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_map().data(), static_cast<int>(this->game_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->game_map(), output);
  }

  // optional uint64 tv_master_steamid = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tv_master_steamid(), output);
  }

  // optional uint32 tv_local_slots = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tv_local_slots(), output);
  }

  // optional uint32 tv_local_clients = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tv_local_clients(), output);
  }

  // optional uint32 tv_local_proxies = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tv_local_proxies(), output);
  }

  // optional uint32 tv_relay_slots = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tv_relay_slots(), output);
  }

  // optional uint32 tv_relay_clients = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tv_relay_clients(), output);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tv_relay_proxies(), output);
  }

  // optional uint32 tv_relay_address = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tv_relay_address(), output);
  }

  // optional uint32 tv_relay_port = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tv_relay_port(), output);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->tv_relay_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerHltvInfo)
}

::google::protobuf::uint8* ServerHltvInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerHltvInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tv_udp_port = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tv_udp_port(), target);
  }

  // optional uint64 tv_watch_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tv_watch_key(), target);
  }

  // optional uint32 tv_slots = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tv_slots(), target);
  }

  // optional uint32 tv_clients = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tv_clients(), target);
  }

  // optional uint32 tv_proxies = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tv_proxies(), target);
  }

  // optional uint32 tv_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tv_time(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_mapgroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_map().data(), static_cast<int>(this->game_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->game_map(), target);
  }

  // optional uint64 tv_master_steamid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tv_master_steamid(), target);
  }

  // optional uint32 tv_local_slots = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tv_local_slots(), target);
  }

  // optional uint32 tv_local_clients = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tv_local_clients(), target);
  }

  // optional uint32 tv_local_proxies = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tv_local_proxies(), target);
  }

  // optional uint32 tv_relay_slots = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tv_relay_slots(), target);
  }

  // optional uint32 tv_relay_clients = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tv_relay_clients(), target);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tv_relay_proxies(), target);
  }

  // optional uint32 tv_relay_address = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tv_relay_address(), target);
  }

  // optional uint32 tv_relay_port = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tv_relay_port(), target);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->tv_relay_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerHltvInfo)
  return target;
}

size_t ServerHltvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerHltvInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_mapgroup = 9;
    if (has_game_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mapgroup());
    }

    // optional string game_map = 10;
    if (has_game_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_map());
    }

    // optional uint64 tv_watch_key = 2;
    if (has_tv_watch_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_watch_key());
    }

    // optional uint32 tv_udp_port = 1;
    if (has_tv_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_udp_port());
    }

    // optional uint32 tv_slots = 3;
    if (has_tv_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_slots());
    }

    // optional uint32 tv_clients = 4;
    if (has_tv_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_clients());
    }

    // optional uint32 tv_proxies = 5;
    if (has_tv_proxies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_proxies());
    }

    // optional uint32 tv_time = 6;
    if (has_tv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_time());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 game_type = 8;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint64 tv_master_steamid = 11;
    if (has_tv_master_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_master_steamid());
    }

    // optional uint32 tv_local_slots = 12;
    if (has_tv_local_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_slots());
    }

    // optional uint32 tv_local_clients = 13;
    if (has_tv_local_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_clients());
    }

    // optional uint32 tv_local_proxies = 14;
    if (has_tv_local_proxies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_proxies());
    }

    // optional uint32 tv_relay_slots = 15;
    if (has_tv_relay_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_slots());
    }

    // optional uint32 tv_relay_clients = 16;
    if (has_tv_relay_clients()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_clients());
    }

    // optional uint32 tv_relay_proxies = 17;
    if (has_tv_relay_proxies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_proxies());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 tv_relay_address = 18;
    if (has_tv_relay_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_address());
    }

    // optional uint32 tv_relay_port = 19;
    if (has_tv_relay_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_port());
    }

    // optional uint64 tv_relay_steamid = 20;
    if (has_tv_relay_steamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_relay_steamid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHltvInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerHltvInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHltvInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerHltvInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerHltvInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerHltvInfo)
    MergeFrom(*source);
  }
}

void ServerHltvInfo::MergeFrom(const ServerHltvInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerHltvInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_mapgroup();
      game_mapgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mapgroup_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_map();
      game_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_map_);
    }
    if (cached_has_bits & 0x00000004u) {
      tv_watch_key_ = from.tv_watch_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      tv_udp_port_ = from.tv_udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_slots_ = from.tv_slots_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_clients_ = from.tv_clients_;
    }
    if (cached_has_bits & 0x00000040u) {
      tv_proxies_ = from.tv_proxies_;
    }
    if (cached_has_bits & 0x00000080u) {
      tv_time_ = from.tv_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      tv_master_steamid_ = from.tv_master_steamid_;
    }
    if (cached_has_bits & 0x00000400u) {
      tv_local_slots_ = from.tv_local_slots_;
    }
    if (cached_has_bits & 0x00000800u) {
      tv_local_clients_ = from.tv_local_clients_;
    }
    if (cached_has_bits & 0x00001000u) {
      tv_local_proxies_ = from.tv_local_proxies_;
    }
    if (cached_has_bits & 0x00002000u) {
      tv_relay_slots_ = from.tv_relay_slots_;
    }
    if (cached_has_bits & 0x00004000u) {
      tv_relay_clients_ = from.tv_relay_clients_;
    }
    if (cached_has_bits & 0x00008000u) {
      tv_relay_proxies_ = from.tv_relay_proxies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      tv_relay_address_ = from.tv_relay_address_;
    }
    if (cached_has_bits & 0x00020000u) {
      tv_relay_port_ = from.tv_relay_port_;
    }
    if (cached_has_bits & 0x00040000u) {
      tv_relay_steamid_ = from.tv_relay_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerHltvInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerHltvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHltvInfo::CopyFrom(const ServerHltvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerHltvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHltvInfo::IsInitialized() const {
  return true;
}

void ServerHltvInfo::Swap(ServerHltvInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerHltvInfo::InternalSwap(ServerHltvInfo* other) {
  using std::swap;
  game_mapgroup_.Swap(&other->game_mapgroup_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_map_.Swap(&other->game_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tv_watch_key_, other->tv_watch_key_);
  swap(tv_udp_port_, other->tv_udp_port_);
  swap(tv_slots_, other->tv_slots_);
  swap(tv_clients_, other->tv_clients_);
  swap(tv_proxies_, other->tv_proxies_);
  swap(tv_time_, other->tv_time_);
  swap(game_type_, other->game_type_);
  swap(tv_master_steamid_, other->tv_master_steamid_);
  swap(tv_local_slots_, other->tv_local_slots_);
  swap(tv_local_clients_, other->tv_local_clients_);
  swap(tv_local_proxies_, other->tv_local_proxies_);
  swap(tv_relay_slots_, other->tv_relay_slots_);
  swap(tv_relay_clients_, other->tv_relay_clients_);
  swap(tv_relay_proxies_, other->tv_relay_proxies_);
  swap(tv_relay_address_, other->tv_relay_address_);
  swap(tv_relay_port_, other->tv_relay_port_);
  swap(tv_relay_steamid_, other->tv_relay_steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerHltvInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpAddressMask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpAddressMask::kAFieldNumber;
const int IpAddressMask::kBFieldNumber;
const int IpAddressMask::kCFieldNumber;
const int IpAddressMask::kDFieldNumber;
const int IpAddressMask::kBitsFieldNumber;
const int IpAddressMask::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpAddressMask::IpAddressMask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_IpAddressMask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:IpAddressMask)
}
IpAddressMask::IpAddressMask(const IpAddressMask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&a_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:IpAddressMask)
}

void IpAddressMask::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&a_)) + sizeof(token_));
}

IpAddressMask::~IpAddressMask() {
  // @@protoc_insertion_point(destructor:IpAddressMask)
  SharedDtor();
}

void IpAddressMask::SharedDtor() {
}

void IpAddressMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IpAddressMask::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpAddressMask& IpAddressMask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_IpAddressMask.base);
  return *internal_default_instance();
}


void IpAddressMask::Clear() {
// @@protoc_insertion_point(message_clear_start:IpAddressMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_) -
        reinterpret_cast<char*>(&a_)) + sizeof(token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpAddressMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IpAddressMask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IpAddressMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IpAddressMask)
  return false;
#undef DO_
}

void IpAddressMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IpAddressMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // optional uint32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // optional uint32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // optional uint32 d = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->d(), output);
  }

  // optional uint32 bits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bits(), output);
  }

  // optional uint32 token = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IpAddressMask)
}

::google::protobuf::uint8* IpAddressMask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IpAddressMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // optional uint32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // optional uint32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // optional uint32 d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->d(), target);
  }

  // optional uint32 bits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bits(), target);
  }

  // optional uint32 token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IpAddressMask)
  return target;
}

size_t IpAddressMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IpAddressMask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a());
    }

    // optional uint32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

    // optional uint32 c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

    // optional uint32 d = 4;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d());
    }

    // optional uint32 bits = 5;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

    // optional uint32 token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddressMask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IpAddressMask)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddressMask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpAddressMask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IpAddressMask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IpAddressMask)
    MergeFrom(*source);
  }
}

void IpAddressMask::MergeFrom(const IpAddressMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IpAddressMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000008u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000010u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000020u) {
      token_ = from.token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpAddressMask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IpAddressMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddressMask::CopyFrom(const IpAddressMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IpAddressMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMask::IsInitialized() const {
  return true;
}

void IpAddressMask::Swap(IpAddressMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpAddressMask::InternalSwap(IpAddressMask* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  swap(bits_, other->bits_);
  swap(token_, other->token_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IpAddressMask::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XpProgressData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XpProgressData::kXpPointsFieldNumber;
const int XpProgressData::kXpCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XpProgressData::XpProgressData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_XpProgressData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:XpProgressData)
}
XpProgressData::XpProgressData(const XpProgressData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xp_points_, &from.xp_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&xp_category_) -
    reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
  // @@protoc_insertion_point(copy_constructor:XpProgressData)
}

void XpProgressData::SharedCtor() {
  ::memset(&xp_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xp_category_) -
      reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
}

XpProgressData::~XpProgressData() {
  // @@protoc_insertion_point(destructor:XpProgressData)
  SharedDtor();
}

void XpProgressData::SharedDtor() {
}

void XpProgressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* XpProgressData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XpProgressData& XpProgressData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_XpProgressData.base);
  return *internal_default_instance();
}


void XpProgressData::Clear() {
// @@protoc_insertion_point(message_clear_start:XpProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&xp_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xp_category_) -
        reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool XpProgressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XpProgressData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 xp_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_xp_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xp_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_xp_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XpProgressData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XpProgressData)
  return false;
#undef DO_
}

void XpProgressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XpProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 xp_points = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xp_points(), output);
  }

  // optional int32 xp_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xp_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XpProgressData)
}

::google::protobuf::uint8* XpProgressData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XpProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 xp_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xp_points(), target);
  }

  // optional int32 xp_category = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xp_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XpProgressData)
  return target;
}

size_t XpProgressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XpProgressData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 xp_points = 1;
    if (has_xp_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_points());
    }

    // optional int32 xp_category = 2;
    if (has_xp_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp_category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XpProgressData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XpProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  const XpProgressData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XpProgressData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XpProgressData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XpProgressData)
    MergeFrom(*source);
  }
}

void XpProgressData::MergeFrom(const XpProgressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XpProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      xp_points_ = from.xp_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_category_ = from.xp_category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XpProgressData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XpProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XpProgressData::CopyFrom(const XpProgressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XpProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpProgressData::IsInitialized() const {
  return true;
}

void XpProgressData::Swap(XpProgressData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XpProgressData::InternalSwap(XpProgressData* other) {
  using std::swap;
  swap(xp_points_, other->xp_points_);
  swap(xp_category_, other->xp_category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata XpProgressData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchEndItemUpdates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchEndItemUpdates::kItemIdFieldNumber;
const int MatchEndItemUpdates::kItemAttrDefidxFieldNumber;
const int MatchEndItemUpdates::kItemAttrDeltaValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchEndItemUpdates::MatchEndItemUpdates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_MatchEndItemUpdates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchEndItemUpdates)
}
MatchEndItemUpdates::MatchEndItemUpdates(const MatchEndItemUpdates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_attr_delta_value_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
  // @@protoc_insertion_point(copy_constructor:MatchEndItemUpdates)
}

void MatchEndItemUpdates::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_attr_delta_value_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
}

MatchEndItemUpdates::~MatchEndItemUpdates() {
  // @@protoc_insertion_point(destructor:MatchEndItemUpdates)
  SharedDtor();
}

void MatchEndItemUpdates::SharedDtor() {
}

void MatchEndItemUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchEndItemUpdates::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchEndItemUpdates& MatchEndItemUpdates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_MatchEndItemUpdates.base);
  return *internal_default_instance();
}


void MatchEndItemUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchEndItemUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_attr_delta_value_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MatchEndItemUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchEndItemUpdates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_attr_defidx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_attr_defidx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_attr_defidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_attr_delta_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_item_attr_delta_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_attr_delta_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchEndItemUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchEndItemUpdates)
  return false;
#undef DO_
}

void MatchEndItemUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchEndItemUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 item_attr_defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_attr_defidx(), output);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_attr_delta_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchEndItemUpdates)
}

::google::protobuf::uint8* MatchEndItemUpdates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MatchEndItemUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_attr_defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_attr_defidx(), target);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_attr_delta_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchEndItemUpdates)
  return target;
}

size_t MatchEndItemUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchEndItemUpdates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 item_attr_defidx = 2;
    if (has_item_attr_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_attr_defidx());
    }

    // optional uint32 item_attr_delta_value = 3;
    if (has_item_attr_delta_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_attr_delta_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchEndItemUpdates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchEndItemUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchEndItemUpdates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchEndItemUpdates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchEndItemUpdates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchEndItemUpdates)
    MergeFrom(*source);
  }
}

void MatchEndItemUpdates::MergeFrom(const MatchEndItemUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchEndItemUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_attr_defidx_ = from.item_attr_defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_attr_delta_value_ = from.item_attr_delta_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatchEndItemUpdates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchEndItemUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchEndItemUpdates::CopyFrom(const MatchEndItemUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchEndItemUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchEndItemUpdates::IsInitialized() const {
  return true;
}

void MatchEndItemUpdates::Swap(MatchEndItemUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchEndItemUpdates::InternalSwap(MatchEndItemUpdates* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(item_attr_defidx_, other->item_attr_defidx_);
  swap(item_attr_delta_value_, other->item_attr_delta_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchEndItemUpdates::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScoreLeaderboardData_Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreLeaderboardData_Entry::kTagFieldNumber;
const int ScoreLeaderboardData_Entry::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScoreLeaderboardData.Entry)
}
ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.Entry)
}

void ScoreLeaderboardData_Entry::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(val_));
}

ScoreLeaderboardData_Entry::~ScoreLeaderboardData_Entry() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.Entry)
  SharedDtor();
}

void ScoreLeaderboardData_Entry::SharedDtor() {
}

void ScoreLeaderboardData_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_Entry::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScoreLeaderboardData_Entry& ScoreLeaderboardData_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_Entry.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScoreLeaderboardData_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScoreLeaderboardData.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScoreLeaderboardData.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScoreLeaderboardData.Entry)
  return false;
#undef DO_
}

void ScoreLeaderboardData_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScoreLeaderboardData.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScoreLeaderboardData.Entry)
}

::google::protobuf::uint8* ScoreLeaderboardData_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.Entry)
  return target;
}

size_t ScoreLeaderboardData_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreLeaderboardData_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData.Entry)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_Entry::MergeFrom(const ScoreLeaderboardData_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoreLeaderboardData_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::CopyFrom(const ScoreLeaderboardData_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_Entry::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_Entry::Swap(ScoreLeaderboardData_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreLeaderboardData_Entry::InternalSwap(ScoreLeaderboardData_Entry* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(val_, other->val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScoreLeaderboardData_Entry::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreLeaderboardData_AccountEntries::kAccountidFieldNumber;
const int ScoreLeaderboardData_AccountEntries::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_AccountEntries.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScoreLeaderboardData.AccountEntries)
}
ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.AccountEntries)
}

void ScoreLeaderboardData_AccountEntries::SharedCtor() {
  accountid_ = 0u;
}

ScoreLeaderboardData_AccountEntries::~ScoreLeaderboardData_AccountEntries() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.AccountEntries)
  SharedDtor();
}

void ScoreLeaderboardData_AccountEntries::SharedDtor() {
}

void ScoreLeaderboardData_AccountEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_AccountEntries::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData_AccountEntries::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData_AccountEntries.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData_AccountEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.AccountEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScoreLeaderboardData_AccountEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScoreLeaderboardData.AccountEntries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ScoreLeaderboardData.Entry entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScoreLeaderboardData.AccountEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScoreLeaderboardData.AccountEntries)
  return false;
#undef DO_
}

void ScoreLeaderboardData_AccountEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScoreLeaderboardData.AccountEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScoreLeaderboardData.AccountEntries)
}

::google::protobuf::uint8* ScoreLeaderboardData_AccountEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.AccountEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.AccountEntries)
  return target;
}

size_t ScoreLeaderboardData_AccountEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.AccountEntries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ScoreLeaderboardData.Entry entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // optional uint32 accountid = 1;
  if (has_accountid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData.AccountEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData_AccountEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreLeaderboardData_AccountEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData.AccountEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData.AccountEntries)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ScoreLeaderboardData_AccountEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.AccountEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_accountid()) {
    set_accountid(from.accountid());
  }
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData.AccountEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ScoreLeaderboardData_AccountEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.AccountEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_AccountEntries::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_AccountEntries::Swap(ScoreLeaderboardData_AccountEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreLeaderboardData_AccountEntries::InternalSwap(ScoreLeaderboardData_AccountEntries* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScoreLeaderboardData_AccountEntries::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScoreLeaderboardData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreLeaderboardData::kQuestIdFieldNumber;
const int ScoreLeaderboardData::kScoreFieldNumber;
const int ScoreLeaderboardData::kAccountentriesFieldNumber;
const int ScoreLeaderboardData::kMatchentriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreLeaderboardData::ScoreLeaderboardData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScoreLeaderboardData)
}
ScoreLeaderboardData::ScoreLeaderboardData(const ScoreLeaderboardData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      accountentries_(from.accountentries_),
      matchentries_(from.matchentries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData)
}

void ScoreLeaderboardData::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
}

ScoreLeaderboardData::~ScoreLeaderboardData() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData)
  SharedDtor();
}

void ScoreLeaderboardData::SharedDtor() {
}

void ScoreLeaderboardData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScoreLeaderboardData& ScoreLeaderboardData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_ScoreLeaderboardData.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountentries_.Clear();
  matchentries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScoreLeaderboardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScoreLeaderboardData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_quest_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accountentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ScoreLeaderboardData.Entry matchentries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matchentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScoreLeaderboardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScoreLeaderboardData)
  return false;
#undef DO_
}

void ScoreLeaderboardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScoreLeaderboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accountentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->accountentries(static_cast<int>(i)),
      output);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->matchentries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScoreLeaderboardData)
}

::google::protobuf::uint8* ScoreLeaderboardData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accountentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->accountentries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->matchentries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData)
  return target;
}

size_t ScoreLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->accountentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accountentries(static_cast<int>(i)));
    }
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->matchentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matchentries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreLeaderboardData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData::MergeFrom(const ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accountentries_.MergeFrom(from.accountentries_);
  matchentries_.MergeFrom(from.matchentries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoreLeaderboardData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData::CopyFrom(const ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData::Swap(ScoreLeaderboardData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreLeaderboardData::InternalSwap(ScoreLeaderboardData* other) {
  using std::swap;
  CastToBase(&accountentries_)->InternalSwap(CastToBase(&other->accountentries_));
  CastToBase(&matchentries_)->InternalSwap(CastToBase(&other->matchentries_));
  swap(quest_id_, other->quest_id_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScoreLeaderboardData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerQuestData_QuestItemData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuestData_QuestItemData::kQuestIdFieldNumber;
const int PlayerQuestData_QuestItemData::kQuestNormalPointsEarnedFieldNumber;
const int PlayerQuestData_QuestItemData::kQuestBonusPointsEarnedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData_QuestItemData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerQuestData.QuestItemData)
}
PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quest_bonus_points_earned_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData.QuestItemData)
}

void PlayerQuestData_QuestItemData::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_bonus_points_earned_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
}

PlayerQuestData_QuestItemData::~PlayerQuestData_QuestItemData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData.QuestItemData)
  SharedDtor();
}

void PlayerQuestData_QuestItemData::SharedDtor() {
}

void PlayerQuestData_QuestItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerQuestData_QuestItemData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuestData_QuestItemData& PlayerQuestData_QuestItemData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData_QuestItemData.base);
  return *internal_default_instance();
}


void PlayerQuestData_QuestItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData.QuestItemData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quest_bonus_points_earned_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerQuestData_QuestItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerQuestData.QuestItemData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_quest_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quest_normal_points_earned = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quest_normal_points_earned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_normal_points_earned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quest_bonus_points_earned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_quest_bonus_points_earned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_bonus_points_earned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerQuestData.QuestItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerQuestData.QuestItemData)
  return false;
#undef DO_
}

void PlayerQuestData_QuestItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerQuestData.QuestItemData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_normal_points_earned(), output);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quest_bonus_points_earned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerQuestData.QuestItemData)
}

::google::protobuf::uint8* PlayerQuestData_QuestItemData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData.QuestItemData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_normal_points_earned(), target);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quest_bonus_points_earned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData.QuestItemData)
  return target;
}

size_t PlayerQuestData_QuestItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData.QuestItemData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }

    // optional int32 quest_normal_points_earned = 2;
    if (has_quest_normal_points_earned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_normal_points_earned());
    }

    // optional int32 quest_bonus_points_earned = 3;
    if (has_quest_bonus_points_earned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_bonus_points_earned());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuestData_QuestItemData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerQuestData.QuestItemData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuestData_QuestItemData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuestData_QuestItemData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerQuestData.QuestItemData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerQuestData.QuestItemData)
    MergeFrom(*source);
  }
}

void PlayerQuestData_QuestItemData::MergeFrom(const PlayerQuestData_QuestItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData.QuestItemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quest_normal_points_earned_ = from.quest_normal_points_earned_;
    }
    if (cached_has_bits & 0x00000004u) {
      quest_bonus_points_earned_ = from.quest_bonus_points_earned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerQuestData_QuestItemData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerQuestData.QuestItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData_QuestItemData::CopyFrom(const PlayerQuestData_QuestItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData.QuestItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData_QuestItemData::IsInitialized() const {
  return true;
}

void PlayerQuestData_QuestItemData::Swap(PlayerQuestData_QuestItemData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuestData_QuestItemData::InternalSwap(PlayerQuestData_QuestItemData* other) {
  using std::swap;
  swap(quest_id_, other->quest_id_);
  swap(quest_normal_points_earned_, other->quest_normal_points_earned_);
  swap(quest_bonus_points_earned_, other->quest_bonus_points_earned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerQuestData_QuestItemData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerQuestData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuestData::kQuesterAccountIdFieldNumber;
const int PlayerQuestData::kQuestItemDataFieldNumber;
const int PlayerQuestData::kXpProgressDataFieldNumber;
const int PlayerQuestData::kTimePlayedFieldNumber;
const int PlayerQuestData::kMmGameModeFieldNumber;
const int PlayerQuestData::kItemUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuestData::PlayerQuestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerQuestData)
}
PlayerQuestData::PlayerQuestData(const PlayerQuestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      quest_item_data_(from.quest_item_data_),
      xp_progress_data_(from.xp_progress_data_),
      item_updates_(from.item_updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quester_account_id_, &from.quester_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mm_game_mode_) -
    reinterpret_cast<char*>(&quester_account_id_)) + sizeof(mm_game_mode_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData)
}

void PlayerQuestData::SharedCtor() {
  ::memset(&quester_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mm_game_mode_) -
      reinterpret_cast<char*>(&quester_account_id_)) + sizeof(mm_game_mode_));
}

PlayerQuestData::~PlayerQuestData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData)
  SharedDtor();
}

void PlayerQuestData::SharedDtor() {
}

void PlayerQuestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerQuestData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuestData& PlayerQuestData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerQuestData.base);
  return *internal_default_instance();
}


void PlayerQuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quest_item_data_.Clear();
  xp_progress_data_.Clear();
  item_updates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&quester_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mm_game_mode_) -
        reinterpret_cast<char*>(&quester_account_id_)) + sizeof(mm_game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerQuestData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quester_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_quester_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quester_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quest_item_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XpProgressData xp_progress_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xp_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_played = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mm_game_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mm_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mm_game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchEndItemUpdates item_updates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerQuestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerQuestData)
  return false;
#undef DO_
}

void PlayerQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerQuestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quester_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quester_account_id(), output);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quest_item_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->quest_item_data(static_cast<int>(i)),
      output);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_progress_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->xp_progress_data(static_cast<int>(i)),
      output);
  }

  // optional uint32 time_played = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_played(), output);
  }

  // optional uint32 mm_game_mode = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mm_game_mode(), output);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->item_updates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerQuestData)
}

::google::protobuf::uint8* PlayerQuestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quester_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quester_account_id(), target);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quest_item_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->quest_item_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_progress_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->xp_progress_data(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 time_played = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_played(), target);
  }

  // optional uint32 mm_game_mode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mm_game_mode(), target);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->item_updates(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData)
  return target;
}

size_t PlayerQuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->quest_item_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quest_item_data(static_cast<int>(i)));
    }
  }

  // repeated .XpProgressData xp_progress_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_progress_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_progress_data(static_cast<int>(i)));
    }
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->item_updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_updates(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 quester_account_id = 1;
    if (has_quester_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quester_account_id());
    }

    // optional uint32 time_played = 4;
    if (has_time_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_played());
    }

    // optional uint32 mm_game_mode = 5;
    if (has_mm_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mm_game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerQuestData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerQuestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerQuestData)
    MergeFrom(*source);
  }
}

void PlayerQuestData::MergeFrom(const PlayerQuestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quest_item_data_.MergeFrom(from.quest_item_data_);
  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  item_updates_.MergeFrom(from.item_updates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      quester_account_id_ = from.quester_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_played_ = from.time_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      mm_game_mode_ = from.mm_game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerQuestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData::CopyFrom(const PlayerQuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData::IsInitialized() const {
  return true;
}

void PlayerQuestData::Swap(PlayerQuestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuestData::InternalSwap(PlayerQuestData* other) {
  using std::swap;
  CastToBase(&quest_item_data_)->InternalSwap(CastToBase(&other->quest_item_data_));
  CastToBase(&xp_progress_data_)->InternalSwap(CastToBase(&other->xp_progress_data_));
  CastToBase(&item_updates_)->InternalSwap(CastToBase(&other->item_updates_));
  swap(quester_account_id_, other->quester_account_id_);
  swap(time_played_, other->time_played_);
  swap(mm_game_mode_, other->mm_game_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerQuestData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_ServerQuestUpdateData::InitAsDefaultInstance() {
  ::_CMsgGC_ServerQuestUpdateData_default_instance_._instance.get_mutable()->missionlbsdata_ = const_cast< ::ScoreLeaderboardData*>(
      ::ScoreLeaderboardData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_ServerQuestUpdateData::kPlayerQuestDataFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kBinaryDataFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kMmGameModeFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kMissionlbsdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_ServerQuestUpdateData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_ServerQuestUpdateData)
}
CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_quest_data_(from.player_quest_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_binary_data()) {
    binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
  }
  if (from.has_missionlbsdata()) {
    missionlbsdata_ = new ::ScoreLeaderboardData(*from.missionlbsdata_);
  } else {
    missionlbsdata_ = NULL;
  }
  mm_game_mode_ = from.mm_game_mode_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_ServerQuestUpdateData)
}

void CMsgGC_ServerQuestUpdateData::SharedCtor() {
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&missionlbsdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mm_game_mode_) -
      reinterpret_cast<char*>(&missionlbsdata_)) + sizeof(mm_game_mode_));
}

CMsgGC_ServerQuestUpdateData::~CMsgGC_ServerQuestUpdateData() {
  // @@protoc_insertion_point(destructor:CMsgGC_ServerQuestUpdateData)
  SharedDtor();
}

void CMsgGC_ServerQuestUpdateData::SharedDtor() {
  binary_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete missionlbsdata_;
}

void CMsgGC_ServerQuestUpdateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGC_ServerQuestUpdateData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_ServerQuestUpdateData& CMsgGC_ServerQuestUpdateData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_ServerQuestUpdateData.base);
  return *internal_default_instance();
}


void CMsgGC_ServerQuestUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_ServerQuestUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_quest_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      binary_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(missionlbsdata_ != NULL);
      missionlbsdata_->Clear();
    }
  }
  mm_game_mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_ServerQuestUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_ServerQuestUpdateData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerQuestData player_quest_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_quest_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes binary_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mm_game_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mm_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mm_game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ScoreLeaderboardData missionlbsdata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_missionlbsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_ServerQuestUpdateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_ServerQuestUpdateData)
  return false;
#undef DO_
}

void CMsgGC_ServerQuestUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_ServerQuestUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_quest_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->player_quest_data(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes binary_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->binary_data(), output);
  }

  // optional uint32 mm_game_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mm_game_mode(), output);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_missionlbsdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_ServerQuestUpdateData)
}

::google::protobuf::uint8* CMsgGC_ServerQuestUpdateData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_ServerQuestUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_quest_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_quest_data(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes binary_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary_data(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mm_game_mode(), target);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_missionlbsdata(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_ServerQuestUpdateData)
  return target;
}

size_t CMsgGC_ServerQuestUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_ServerQuestUpdateData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .PlayerQuestData player_quest_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_quest_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_quest_data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes binary_data = 2;
    if (has_binary_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary_data());
    }

    // optional .ScoreLeaderboardData missionlbsdata = 4;
    if (has_missionlbsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *missionlbsdata_);
    }

    // optional uint32 mm_game_mode = 3;
    if (has_mm_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mm_game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_ServerQuestUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_ServerQuestUpdateData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_ServerQuestUpdateData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_ServerQuestUpdateData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_ServerQuestUpdateData)
    MergeFrom(*source);
  }
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const CMsgGC_ServerQuestUpdateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_ServerQuestUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_quest_data_.MergeFrom(from.player_quest_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_binary_data();
      binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_missionlbsdata()->::ScoreLeaderboardData::MergeFrom(from.missionlbsdata());
    }
    if (cached_has_bits & 0x00000004u) {
      mm_game_mode_ = from.mm_game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_ServerQuestUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const CMsgGC_ServerQuestUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_ServerQuestUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ServerQuestUpdateData::IsInitialized() const {
  return true;
}

void CMsgGC_ServerQuestUpdateData::Swap(CMsgGC_ServerQuestUpdateData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_ServerQuestUpdateData::InternalSwap(CMsgGC_ServerQuestUpdateData* other) {
  using std::swap;
  CastToBase(&player_quest_data_)->InternalSwap(CastToBase(&other->player_quest_data_));
  binary_data_.Swap(&other->binary_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(missionlbsdata_, other->missionlbsdata_);
  swap(mm_game_mode_, other->mm_game_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGC_ServerQuestUpdateData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kPacketidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kNamekeysFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kPacketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
}
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      namekeys_(from.namekeys_),
      packets_(from.packets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packetid_ = from.packetid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedCtor() {
  packetid_ = 0;
}

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::~CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namekeys_.Clear();
  packets_.Clear();
  packetid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_packetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OperationalStatisticDescription namekeys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_namekeys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OperationalStatisticsPacket packets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  // repeated .OperationalStatisticDescription namekeys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namekeys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->namekeys(static_cast<int>(i)),
      output);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->packets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  // repeated .OperationalStatisticDescription namekeys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namekeys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->namekeys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->packets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OperationalStatisticDescription namekeys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->namekeys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->namekeys(static_cast<int>(i)));
    }
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packets(static_cast<int>(i)));
    }
  }

  // optional int32 packetid = 1;
  if (has_packetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namekeys_.MergeFrom(from.namekeys_);
  packets_.MergeFrom(from.packets_);
  if (from.has_packetid()) {
    set_packetid(from.packetid());
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::Swap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
  using std::swap;
  CastToBase(&namekeys_)->InternalSwap(CastToBase(&other->namekeys_));
  CastToBase(&packets_)->InternalSwap(CastToBase(&other->packets_));
  swap(packetid_, other->packetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kTokenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kStampFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedCtor() {
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exchange_) -
        reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_exchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // optional uint32 stamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp(), output);
  }

  // optional uint64 exchange = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // optional uint32 stamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp(), target);
  }

  // optional uint64 exchange = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

    // optional uint32 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }

    // optional uint64 exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exchange());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      exchange_ = from.exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
  using std::swap;
  swap(token_, other->token_);
  swap(stamp_, other->stamp_);
  swap(exchange_, other->exchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GC2ServerReservationUpdate::kViewersExternalTotalFieldNumber;
const int CMsgGCCStrike15_v2_GC2ServerReservationUpdate::kViewersExternalSteamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}
CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&viewers_external_total_, &from.viewers_external_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewers_external_steam_) -
    reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedCtor() {
  ::memset(&viewers_external_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewers_external_steam_) -
      reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::~CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedDtor() {
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&viewers_external_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewers_external_steam_) -
        reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 viewers_external_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_viewers_external_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_external_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewers_external_steam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_viewers_external_steam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_external_steam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewers_external_total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viewers_external_total(), output);
  }

  // optional uint32 viewers_external_steam = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viewers_external_steam(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewers_external_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viewers_external_total(), target);
  }

  // optional uint32 viewers_external_steam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viewers_external_steam(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ServerReservationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 viewers_external_total = 1;
    if (has_viewers_external_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_external_total());
    }

    // optional uint32 viewers_external_steam = 2;
    if (has_viewers_external_steam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_external_steam());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ServerReservationUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GC2ServerReservationUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      viewers_external_total_ = from.viewers_external_total_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewers_external_steam_ = from.viewers_external_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Swap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InternalSwap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
  using std::swap;
  swap(viewers_external_total_, other->viewers_external_total_);
  swap(viewers_external_steam_, other->viewers_external_steam_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ServerReservationUpdate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingStart::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_._instance.get_mutable()->tournament_match_ = const_cast< ::TournamentMatchSetup*>(
      ::TournamentMatchSetup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingStart::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kTicketDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kClientVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kTournamentMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kPrimeOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingStart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}
CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket_data()) {
    ticket_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_data_);
  }
  if (from.has_tournament_match()) {
    tournament_match_ = new ::TournamentMatchSetup(*from.tournament_match_);
  } else {
    tournament_match_ = NULL;
  }
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&prime_only_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(prime_only_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedCtor() {
  ticket_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tournament_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prime_only_) -
      reinterpret_cast<char*>(&tournament_match_)) + sizeof(prime_only_));
}

CMsgGCCStrike15_v2_MatchmakingStart::~CMsgGCCStrike15_v2_MatchmakingStart() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStart)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedDtor() {
  ticket_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tournament_match_;
}

void CMsgGCCStrike15_v2_MatchmakingStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStart::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingStart& CMsgGCCStrike15_v2_MatchmakingStart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingStart.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tournament_match_ != NULL);
      tournament_match_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prime_only_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(prime_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingStart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket_data().data(), static_cast<int>(this->ticket_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TournamentMatchSetup tournament_match = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tournament_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prime_only = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_prime_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prime_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingStart)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional string ticket_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_data().data(), static_cast<int>(this->ticket_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ticket_data(), output);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_version(), output);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_tournament_match(), output);
  }

  // optional bool prime_only = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prime_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingStart)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional string ticket_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_data().data(), static_cast<int>(this->ticket_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticket_data(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_version(), target);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_tournament_match(), deterministic, target);
  }

  // optional bool prime_only = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prime_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStart)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ticket_data = 3;
    if (has_ticket_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket_data());
    }

    // optional .TournamentMatchSetup tournament_match = 5;
    if (has_tournament_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tournament_match_);
    }

    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 client_version = 4;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional bool prime_only = 6;
    if (has_prime_only()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingStart)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket_data();
      ticket_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tournament_match()->::TournamentMatchSetup::MergeFrom(from.tournament_match());
    }
    if (cached_has_bits & 0x00000004u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      prime_only_ = from.prime_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStart::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStart::Swap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingStart::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  ticket_data_.Swap(&other->ticket_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tournament_match_, other->tournament_match_);
  swap(game_type_, other->game_type_);
  swap(client_version_, other->client_version_);
  swap(prime_only_, other->prime_only_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingStart::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingStop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingStop::kAbandonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingStop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}
CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  abandon_ = from.abandon_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedCtor() {
  abandon_ = 0;
}

CMsgGCCStrike15_v2_MatchmakingStop::~CMsgGCCStrike15_v2_MatchmakingStop() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStop)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStop::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingStop& CMsgGCCStrike15_v2_MatchmakingStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingStop.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abandon_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 abandon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_abandon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abandon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingStop)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 abandon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->abandon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingStop)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 abandon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->abandon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStop)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 abandon = 1;
  if (has_abandon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->abandon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingStop)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_abandon()) {
    set_abandon(from.abandon());
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStop::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStop::Swap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingStop::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
  using std::swap;
  swap(abandon_, other->abandon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingStop::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kGameserverpingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kOffsetIndexFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kFinalBatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kDataCenterPingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kMaxPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      gameserverpings_(from.gameserverpings_),
      data_center_pings_(from.data_center_pings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_index_, &from.offset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_ping_) -
    reinterpret_cast<char*>(&offset_index_)) + sizeof(max_ping_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedCtor() {
  ::memset(&offset_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ping_) -
      reinterpret_cast<char*>(&offset_index_)) + sizeof(max_ping_));
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserverpings_.Clear();
  data_center_pings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&offset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ping_) -
        reinterpret_cast<char*>(&offset_index_)) + sizeof(max_ping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameServerPing gameserverpings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gameserverpings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offset_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_offset_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 final_batch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_final_batch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &final_batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DataCenterPing data_center_pings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_center_pings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ping = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameserverpings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gameserverpings(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 offset_index = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset_index(), output);
  }

  // optional int32 final_batch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->final_batch(), output);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_center_pings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->data_center_pings(static_cast<int>(i)),
      output);
  }

  // optional uint32 max_ping = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_ping(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameserverpings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gameserverpings(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 offset_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset_index(), target);
  }

  // optional int32 final_batch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->final_batch(), target);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_center_pings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->data_center_pings(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 max_ping = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_ping(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .GameServerPing gameserverpings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gameserverpings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gameserverpings(static_cast<int>(i)));
    }
  }

  // repeated .DataCenterPing data_center_pings = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->data_center_pings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_center_pings(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 offset_index = 2;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset_index());
    }

    // optional int32 final_batch = 3;
    if (has_final_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->final_batch());
    }

    // optional uint32 max_ping = 5;
    if (has_max_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ping());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserverpings_.MergeFrom(from.gameserverpings_);
  data_center_pings_.MergeFrom(from.data_center_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      offset_index_ = from.offset_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      final_batch_ = from.final_batch_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ping_ = from.max_ping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Swap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
  using std::swap;
  CastToBase(&gameserverpings_)->InternalSwap(CastToBase(&other->gameserverpings_));
  CastToBase(&data_center_pings_)->InternalSwap(CastToBase(&other->data_center_pings_));
  swap(offset_index_, other->offset_index_);
  swap(final_batch_, other->final_batch_);
  swap(max_ping_, other->max_ping_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kRegionIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kRegionRFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&type_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&type_)) + sizeof(distance_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&type_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float region_r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_region_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &region_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // optional float region_r = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->region_r(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // optional float region_r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->region_r(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional float region_r = 3;
    if (has_region_r()) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_r_ = from.region_r_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(region_id_, other->region_id_);
  swap(region_r_, other->region_r_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_._instance.get_mutable()->global_stats_ = const_cast< ::GlobalStatistics*>(
      ::GlobalStatistics::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_._instance.get_mutable()->server_ipaddress_mask_ = const_cast< ::IpAddressMask*>(
      ::IpAddressMask::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kMatchmakingFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kWaitingAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kErrorFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kOngoingmatchAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kGlobalStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kFailpingAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kPenaltyAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kFailreadyAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kVacbannedAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kServerIpaddressMaskFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kNotesFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kPenaltyAccountIdSessionsGreenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kInsufficientlevelSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kVsncheckAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kLauncherMismatchSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      waiting_account_id_sessions_(from.waiting_account_id_sessions_),
      ongoingmatch_account_id_sessions_(from.ongoingmatch_account_id_sessions_),
      failping_account_id_sessions_(from.failping_account_id_sessions_),
      penalty_account_id_sessions_(from.penalty_account_id_sessions_),
      failready_account_id_sessions_(from.failready_account_id_sessions_),
      vacbanned_account_id_sessions_(from.vacbanned_account_id_sessions_),
      notes_(from.notes_),
      penalty_account_id_sessions_green_(from.penalty_account_id_sessions_green_),
      insufficientlevel_sessions_(from.insufficientlevel_sessions_),
      vsncheck_account_id_sessions_(from.vsncheck_account_id_sessions_),
      launcher_mismatch_sessions_(from.launcher_mismatch_sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_global_stats()) {
    global_stats_ = new ::GlobalStatistics(*from.global_stats_);
  } else {
    global_stats_ = NULL;
  }
  if (from.has_server_ipaddress_mask()) {
    server_ipaddress_mask_ = new ::IpAddressMask(*from.server_ipaddress_mask_);
  } else {
    server_ipaddress_mask_ = NULL;
  }
  matchmaking_ = from.matchmaking_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&global_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchmaking_) -
      reinterpret_cast<char*>(&global_stats_)) + sizeof(matchmaking_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete global_stats_;
  if (this != internal_default_instance()) delete server_ipaddress_mask_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waiting_account_id_sessions_.Clear();
  ongoingmatch_account_id_sessions_.Clear();
  failping_account_id_sessions_.Clear();
  penalty_account_id_sessions_.Clear();
  failready_account_id_sessions_.Clear();
  vacbanned_account_id_sessions_.Clear();
  notes_.Clear();
  penalty_account_id_sessions_green_.Clear();
  insufficientlevel_sessions_.Clear();
  vsncheck_account_id_sessions_.Clear();
  launcher_mismatch_sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(global_stats_ != NULL);
      global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ipaddress_mask_ != NULL);
      server_ipaddress_mask_->Clear();
    }
  }
  matchmaking_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 matchmaking = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_matchmaking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchmaking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 waiting_account_id_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_waiting_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_waiting_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ongoingmatch_account_id_sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_ongoingmatch_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ongoingmatch_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GlobalStatistics global_stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 failping_account_id_sessions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_failping_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_failping_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 penalty_account_id_sessions = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_penalty_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_penalty_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 failready_account_id_sessions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_failready_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_failready_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 vacbanned_account_id_sessions = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88u, input, this->mutable_vacbanned_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vacbanned_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .IpAddressMask server_ipaddress_mask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_ipaddress_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 penalty_account_id_sessions_green = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112u, input, this->mutable_penalty_account_id_sessions_green())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_penalty_account_id_sessions_green())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 insufficientlevel_sessions = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_insufficientlevel_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_insufficientlevel_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 vsncheck_account_id_sessions = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128u, input, this->mutable_vsncheck_account_id_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vsncheck_account_id_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 launcher_mismatch_sessions = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_launcher_mismatch_sessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_launcher_mismatch_sessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 matchmaking = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchmaking(), output);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  for (int i = 0, n = this->waiting_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->waiting_account_id_sessions(i), output);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  for (int i = 0, n = this->ongoingmatch_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->ongoingmatch_account_id_sessions(i), output);
  }

  // optional .GlobalStatistics global_stats = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_global_stats(), output);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  for (int i = 0, n = this->failping_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->failping_account_id_sessions(i), output);
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  for (int i = 0, n = this->penalty_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->penalty_account_id_sessions(i), output);
  }

  // repeated uint32 failready_account_id_sessions = 10;
  for (int i = 0, n = this->failready_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->failready_account_id_sessions(i), output);
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  for (int i = 0, n = this->vacbanned_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->vacbanned_account_id_sessions(i), output);
  }

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_server_ipaddress_mask(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->notes(static_cast<int>(i)),
      output);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  for (int i = 0, n = this->penalty_account_id_sessions_green_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->penalty_account_id_sessions_green(i), output);
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  for (int i = 0, n = this->insufficientlevel_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->insufficientlevel_sessions(i), output);
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  for (int i = 0, n = this->vsncheck_account_id_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->vsncheck_account_id_sessions(i), output);
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  for (int i = 0, n = this->launcher_mismatch_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->launcher_mismatch_sessions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 matchmaking = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchmaking(), target);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->waiting_account_id_sessions_, target);

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->ongoingmatch_account_id_sessions_, target);

  // optional .GlobalStatistics global_stats = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_global_stats(), deterministic, target);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->failping_account_id_sessions_, target);

  // repeated uint32 penalty_account_id_sessions = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->penalty_account_id_sessions_, target);

  // repeated uint32 failready_account_id_sessions = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->failready_account_id_sessions_, target);

  // repeated uint32 vacbanned_account_id_sessions = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(11, this->vacbanned_account_id_sessions_, target);

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_server_ipaddress_mask(), deterministic, target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->notes(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(14, this->penalty_account_id_sessions_green_, target);

  // repeated uint32 insufficientlevel_sessions = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->insufficientlevel_sessions_, target);

  // repeated uint32 vsncheck_account_id_sessions = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(16, this->vsncheck_account_id_sessions_, target);

  // repeated uint32 launcher_mismatch_sessions = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->launcher_mismatch_sessions_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 waiting_account_id_sessions = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->waiting_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->waiting_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ongoingmatch_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ongoingmatch_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failping_account_id_sessions = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->failping_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failping_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->penalty_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->penalty_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failready_account_id_sessions = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->failready_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failready_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->vacbanned_account_id_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vacbanned_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->penalty_account_id_sessions_green_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->penalty_account_id_sessions_green_size());
    total_size += data_size;
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->insufficientlevel_sessions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->insufficientlevel_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->vsncheck_account_id_sessions_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->vsncheck_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->launcher_mismatch_sessions_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->launcher_mismatch_sessions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .GlobalStatistics global_stats = 7;
    if (has_global_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *global_stats_);
    }

    // optional .IpAddressMask server_ipaddress_mask = 12;
    if (has_server_ipaddress_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_ipaddress_mask_);
    }

    // optional int32 matchmaking = 1;
    if (has_matchmaking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchmaking());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waiting_account_id_sessions_.MergeFrom(from.waiting_account_id_sessions_);
  ongoingmatch_account_id_sessions_.MergeFrom(from.ongoingmatch_account_id_sessions_);
  failping_account_id_sessions_.MergeFrom(from.failping_account_id_sessions_);
  penalty_account_id_sessions_.MergeFrom(from.penalty_account_id_sessions_);
  failready_account_id_sessions_.MergeFrom(from.failready_account_id_sessions_);
  vacbanned_account_id_sessions_.MergeFrom(from.vacbanned_account_id_sessions_);
  notes_.MergeFrom(from.notes_);
  penalty_account_id_sessions_green_.MergeFrom(from.penalty_account_id_sessions_green_);
  insufficientlevel_sessions_.MergeFrom(from.insufficientlevel_sessions_);
  vsncheck_account_id_sessions_.MergeFrom(from.vsncheck_account_id_sessions_);
  launcher_mismatch_sessions_.MergeFrom(from.launcher_mismatch_sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_global_stats()->::GlobalStatistics::MergeFrom(from.global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server_ipaddress_mask()->::IpAddressMask::MergeFrom(from.server_ipaddress_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      matchmaking_ = from.matchmaking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
  using std::swap;
  waiting_account_id_sessions_.InternalSwap(&other->waiting_account_id_sessions_);
  ongoingmatch_account_id_sessions_.InternalSwap(&other->ongoingmatch_account_id_sessions_);
  failping_account_id_sessions_.InternalSwap(&other->failping_account_id_sessions_);
  penalty_account_id_sessions_.InternalSwap(&other->penalty_account_id_sessions_);
  failready_account_id_sessions_.InternalSwap(&other->failready_account_id_sessions_);
  vacbanned_account_id_sessions_.InternalSwap(&other->vacbanned_account_id_sessions_);
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  penalty_account_id_sessions_green_.InternalSwap(&other->penalty_account_id_sessions_green_);
  insufficientlevel_sessions_.InternalSwap(&other->insufficientlevel_sessions_);
  vsncheck_account_id_sessions_.InternalSwap(&other->vsncheck_account_id_sessions_);
  launcher_mismatch_sessions_.InternalSwap(&other->launcher_mismatch_sessions_);
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(global_stats_, other->global_stats_);
  swap(server_ipaddress_mask_, other->server_ipaddress_mask_);
  swap(matchmaking_, other->matchmaking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kMapidFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kTeamIdCtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}
CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_ct_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_ct_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedDtor() {
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&mapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_ct_) -
        reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mapid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_ct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_team_id_ct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mapid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id_ct(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mapid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id_ct(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 team_id_ct = 2;
    if (has_team_id_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_ct());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentMatchDraft_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mapid_ = from.mapid_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ct_ = from.team_id_ct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  using std::swap;
  swap(mapid_, other->mapid_);
  swap(team_id_ct_, other->team_id_ct_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventStageIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId0FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCountFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCurrentFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdStartFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdVeto1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdPicknFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kDraftsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}
CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      drafts_(from.drafts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_pickn_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_pickn_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_pickn_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_pickn_));
}

CDataGCCStrike15_v2_TournamentMatchDraft::~CDataGCCStrike15_v2_TournamentMatchDraft() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedDtor() {
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentMatchDraft& CDataGCCStrike15_v2_TournamentMatchDraft::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentMatchDraft::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drafts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_veto1_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_veto1_));
  }
  team_id_pickn_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_stage_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_event_stage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_team_id_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_team_id_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maps_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_maps_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maps_current = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_maps_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_start = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_team_id_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_veto1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_team_id_veto1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_veto1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 team_id_pickn = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_team_id_pickn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_pickn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_drafts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentMatchDraft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentMatchDraft)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 event_stage_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_stage_id(), output);
  }

  // optional int32 team_id_0 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id_0(), output);
  }

  // optional int32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_id_1(), output);
  }

  // optional int32 maps_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maps_count(), output);
  }

  // optional int32 maps_current = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maps_current(), output);
  }

  // optional int32 team_id_start = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->team_id_start(), output);
  }

  // optional int32 team_id_veto1 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->team_id_veto1(), output);
  }

  // optional int32 team_id_pickn = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->team_id_pickn(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drafts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->drafts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentMatchDraft)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 event_stage_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_stage_id(), target);
  }

  // optional int32 team_id_0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id_0(), target);
  }

  // optional int32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_id_1(), target);
  }

  // optional int32 maps_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maps_count(), target);
  }

  // optional int32 maps_current = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maps_current(), target);
  }

  // optional int32 team_id_start = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->team_id_start(), target);
  }

  // optional int32 team_id_veto1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->team_id_veto1(), target);
  }

  // optional int32 team_id_pickn = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->team_id_pickn(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drafts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->drafts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->drafts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->drafts(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 event_stage_id = 2;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

    // optional int32 team_id_0 = 3;
    if (has_team_id_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_0());
    }

    // optional int32 team_id_1 = 4;
    if (has_team_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_1());
    }

    // optional int32 maps_count = 5;
    if (has_maps_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_count());
    }

    // optional int32 maps_current = 6;
    if (has_maps_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_current());
    }

    // optional int32 team_id_start = 7;
    if (has_team_id_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_start());
    }

    // optional int32 team_id_veto1 = 8;
    if (has_team_id_veto1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_veto1());
    }

  }
  // optional int32 team_id_pickn = 9;
  if (has_team_id_pickn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id_pickn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentMatchDraft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentMatchDraft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentMatchDraft)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drafts_.MergeFrom(from.drafts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_stage_id_ = from.event_stage_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_0_ = from.team_id_0_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      maps_count_ = from.maps_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      maps_current_ = from.maps_current_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_start_ = from.team_id_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_veto1_ = from.team_id_veto1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_team_id_pickn(from.team_id_pickn());
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Swap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentMatchDraft::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  using std::swap;
  CastToBase(&drafts_)->InternalSwap(CastToBase(&other->drafts_));
  swap(event_id_, other->event_id_);
  swap(event_stage_id_, other->event_stage_id_);
  swap(team_id_0_, other->team_id_0_);
  swap(team_id_1_, other->team_id_1_);
  swap(maps_count_, other->maps_count_);
  swap(maps_current_, other->maps_current_);
  swap(team_id_start_, other->team_id_start_);
  swap(team_id_veto1_, other->team_id_veto1_);
  swap(team_id_pickn_, other->team_id_pickn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CPreMatchInfoData_TeamStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPreMatchInfoData_TeamStats::kMatchInfoIdxtxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData_TeamStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPreMatchInfoData.TeamStats)
}
CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      match_info_teams_(from.match_info_teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_info_txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_info_txt()) {
    match_info_txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_info_txt_);
  }
  match_info_idxtxt_ = from.match_info_idxtxt_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData.TeamStats)
}

void CPreMatchInfoData_TeamStats::SharedCtor() {
  match_info_txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_info_idxtxt_ = 0;
}

CPreMatchInfoData_TeamStats::~CPreMatchInfoData_TeamStats() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData.TeamStats)
  SharedDtor();
}

void CPreMatchInfoData_TeamStats::SharedDtor() {
  match_info_txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPreMatchInfoData_TeamStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CPreMatchInfoData_TeamStats::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPreMatchInfoData_TeamStats& CPreMatchInfoData_TeamStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData_TeamStats.base);
  return *internal_default_instance();
}


void CPreMatchInfoData_TeamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData.TeamStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_info_teams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    match_info_txt_.ClearNonDefaultToEmptyNoArena();
  }
  match_info_idxtxt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPreMatchInfoData_TeamStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPreMatchInfoData.TeamStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 match_info_idxtxt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_info_idxtxt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_info_idxtxt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_info_txt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_info_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_info_txt().data(), static_cast<int>(this->match_info_txt().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CPreMatchInfoData.TeamStats.match_info_txt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string match_info_teams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_match_info_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_info_teams(this->match_info_teams_size() - 1).data(),
            static_cast<int>(this->match_info_teams(this->match_info_teams_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CPreMatchInfoData.TeamStats.match_info_teams");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPreMatchInfoData.TeamStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPreMatchInfoData.TeamStats)
  return false;
#undef DO_
}

void CPreMatchInfoData_TeamStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPreMatchInfoData.TeamStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_info_idxtxt = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_info_idxtxt(), output);
  }

  // optional string match_info_txt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_info_txt().data(), static_cast<int>(this->match_info_txt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_txt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->match_info_txt(), output);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0, n = this->match_info_teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_info_teams(i).data(), static_cast<int>(this->match_info_teams(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_teams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->match_info_teams(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPreMatchInfoData.TeamStats)
}

::google::protobuf::uint8* CPreMatchInfoData_TeamStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData.TeamStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_info_idxtxt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_info_idxtxt(), target);
  }

  // optional string match_info_txt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_info_txt().data(), static_cast<int>(this->match_info_txt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_txt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_info_txt(), target);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0, n = this->match_info_teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_info_teams(i).data(), static_cast<int>(this->match_info_teams(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_teams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->match_info_teams(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData.TeamStats)
  return target;
}

size_t CPreMatchInfoData_TeamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData.TeamStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string match_info_teams = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->match_info_teams_size());
  for (int i = 0, n = this->match_info_teams_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->match_info_teams(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string match_info_txt = 2;
    if (has_match_info_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_info_txt());
    }

    // optional int32 match_info_idxtxt = 1;
    if (has_match_info_idxtxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_info_idxtxt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPreMatchInfoData_TeamStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPreMatchInfoData.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CPreMatchInfoData_TeamStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPreMatchInfoData_TeamStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPreMatchInfoData.TeamStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPreMatchInfoData.TeamStats)
    MergeFrom(*source);
  }
}

void CPreMatchInfoData_TeamStats::MergeFrom(const CPreMatchInfoData_TeamStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_info_teams_.MergeFrom(from.match_info_teams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_match_info_txt();
      match_info_txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_info_txt_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_info_idxtxt_ = from.match_info_idxtxt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPreMatchInfoData_TeamStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPreMatchInfoData.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::CopyFrom(const CPreMatchInfoData_TeamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData_TeamStats::IsInitialized() const {
  return true;
}

void CPreMatchInfoData_TeamStats::Swap(CPreMatchInfoData_TeamStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPreMatchInfoData_TeamStats::InternalSwap(CPreMatchInfoData_TeamStats* other) {
  using std::swap;
  match_info_teams_.InternalSwap(CastToBase(&other->match_info_teams_));
  match_info_txt_.Swap(&other->match_info_txt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_info_idxtxt_, other->match_info_idxtxt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CPreMatchInfoData_TeamStats::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CPreMatchInfoData::InitAsDefaultInstance() {
  ::_CPreMatchInfoData_default_instance_._instance.get_mutable()->draft_ = const_cast< ::CDataGCCStrike15_v2_TournamentMatchDraft*>(
      ::CDataGCCStrike15_v2_TournamentMatchDraft::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPreMatchInfoData::kPredictionsPctFieldNumber;
const int CPreMatchInfoData::kDraftFieldNumber;
const int CPreMatchInfoData::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPreMatchInfoData::CPreMatchInfoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPreMatchInfoData)
}
CPreMatchInfoData::CPreMatchInfoData(const CPreMatchInfoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_draft()) {
    draft_ = new ::CDataGCCStrike15_v2_TournamentMatchDraft(*from.draft_);
  } else {
    draft_ = NULL;
  }
  predictions_pct_ = from.predictions_pct_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData)
}

void CPreMatchInfoData::SharedCtor() {
  ::memset(&draft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictions_pct_) -
      reinterpret_cast<char*>(&draft_)) + sizeof(predictions_pct_));
}

CPreMatchInfoData::~CPreMatchInfoData() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData)
  SharedDtor();
}

void CPreMatchInfoData::SharedDtor() {
  if (this != internal_default_instance()) delete draft_;
}

void CPreMatchInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CPreMatchInfoData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPreMatchInfoData& CPreMatchInfoData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CPreMatchInfoData.base);
  return *internal_default_instance();
}


void CPreMatchInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(draft_ != NULL);
    draft_->Clear();
  }
  predictions_pct_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPreMatchInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPreMatchInfoData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 predictions_pct = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_predictions_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predictions_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_draft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CPreMatchInfoData.TeamStats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPreMatchInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPreMatchInfoData)
  return false;
#undef DO_
}

void CPreMatchInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPreMatchInfoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 predictions_pct = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->predictions_pct(), output);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_draft(), output);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPreMatchInfoData)
}

::google::protobuf::uint8* CPreMatchInfoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 predictions_pct = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->predictions_pct(), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_draft(), deterministic, target);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData)
  return target;
}

size_t CPreMatchInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
    if (has_draft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *draft_);
    }

    // optional int32 predictions_pct = 1;
    if (has_predictions_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predictions_pct());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPreMatchInfoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPreMatchInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  const CPreMatchInfoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPreMatchInfoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPreMatchInfoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPreMatchInfoData)
    MergeFrom(*source);
  }
}

void CPreMatchInfoData::MergeFrom(const CPreMatchInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_draft()->::CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(from.draft());
    }
    if (cached_has_bits & 0x00000002u) {
      predictions_pct_ = from.predictions_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPreMatchInfoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPreMatchInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData::CopyFrom(const CPreMatchInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData::IsInitialized() const {
  return true;
}

void CPreMatchInfoData::Swap(CPreMatchInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPreMatchInfoData::InternalSwap(CPreMatchInfoData* other) {
  using std::swap;
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(draft_, other->draft_);
  swap(predictions_pct_, other->predictions_pct_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CPreMatchInfoData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_._instance.get_mutable()->tournament_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_._instance.get_mutable()->pre_match_data_ = const_cast< ::CPreMatchInfoData*>(
      ::CPreMatchInfoData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kServerVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kRankingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyPubFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPartyIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kWhitelistFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvMasterSteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentEventFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentTeamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentCastersAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvRelaySteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPreMatchDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      rankings_(from.rankings_),
      party_ids_(from.party_ids_),
      whitelist_(from.whitelist_),
      tournament_teams_(from.tournament_teams_),
      tournament_casters_account_ids_(from.tournament_casters_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tournament_event()) {
    tournament_event_ = new ::TournamentEvent(*from.tournament_event_);
  } else {
    tournament_event_ = NULL;
  }
  if (from.has_pre_match_data()) {
    pre_match_data_ = new ::CPreMatchInfoData(*from.pre_match_data_);
  } else {
    pre_match_data_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tv_relay_steamid_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tv_relay_steamid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedCtor() {
  ::memset(&tournament_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tv_relay_steamid_) -
      reinterpret_cast<char*>(&tournament_event_)) + sizeof(tv_relay_steamid_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedDtor() {
  if (this != internal_default_instance()) delete tournament_event_;
  if (this != internal_default_instance()) delete pre_match_data_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  rankings_.Clear();
  party_ids_.Clear();
  whitelist_.Clear();
  tournament_teams_.Clear();
  tournament_casters_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tournament_event_ != NULL);
      tournament_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pre_match_data_ != NULL);
      pre_match_data_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_master_steamid_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(tv_master_steamid_));
  }
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerRankingInfo rankings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rankings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 encryption_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_encryption_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 encryption_key_pub = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_encryption_key_pub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_pub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 party_ids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_party_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_party_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IpAddressMask whitelist = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tv_master_steamid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tv_master_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_master_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TournamentEvent tournament_event = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tournament_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentTeam tournament_teams = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tournament_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tournament_casters_account_ids = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_tournament_casters_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tournament_casters_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tv_relay_steamid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_tv_relay_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_relay_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CPreMatchInfoData pre_match_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pre_match_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional uint32 server_version = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_version(), output);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->rankings(static_cast<int>(i)),
      output);
  }

  // optional uint64 encryption_key = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->encryption_key(), output);
  }

  // optional uint64 encryption_key_pub = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->encryption_key_pub(), output);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0, n = this->party_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->party_ids(i), output);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->whitelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->whitelist(static_cast<int>(i)),
      output);
  }

  // optional uint64 tv_master_steamid = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->tv_master_steamid(), output);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_tournament_event(), output);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournament_teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->tournament_teams(static_cast<int>(i)),
      output);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0, n = this->tournament_casters_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->tournament_casters_account_ids(i), output);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tv_relay_steamid(), output);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_pre_match_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional uint32 server_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_version(), target);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->rankings(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 encryption_key = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->encryption_key(), target);
  }

  // optional uint64 encryption_key_pub = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->encryption_key_pub(), target);
  }

  // repeated uint32 party_ids = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->party_ids_, target);

  // repeated .IpAddressMask whitelist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->whitelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->whitelist(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 tv_master_steamid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->tv_master_steamid(), target);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_tournament_event(), deterministic, target);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournament_teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->tournament_teams(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->tournament_casters_account_ids_, target);

  // optional uint64 tv_relay_steamid = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tv_relay_steamid(), target);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_pre_match_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // repeated .PlayerRankingInfo rankings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rankings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rankings(static_cast<int>(i)));
    }
  }

  // repeated uint32 party_ids = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->party_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->party_ids_size());
    total_size += data_size;
  }

  // repeated .IpAddressMask whitelist = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->whitelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->whitelist(static_cast<int>(i)));
    }
  }

  // repeated .TournamentTeam tournament_teams = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->tournament_teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tournament_teams(static_cast<int>(i)));
    }
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tournament_casters_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tournament_casters_account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .TournamentEvent tournament_event = 11;
    if (has_tournament_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tournament_event_);
    }

    // optional .CPreMatchInfoData pre_match_data = 15;
    if (has_pre_match_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pre_match_data_);
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 server_version = 4;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint64 encryption_key = 6;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key());
    }

    // optional uint64 encryption_key_pub = 7;
    if (has_encryption_key_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key_pub());
    }

    // optional uint64 tv_master_steamid = 10;
    if (has_tv_master_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_master_steamid());
    }

  }
  // optional uint64 tv_relay_steamid = 14;
  if (has_tv_relay_steamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tv_relay_steamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  rankings_.MergeFrom(from.rankings_);
  party_ids_.MergeFrom(from.party_ids_);
  whitelist_.MergeFrom(from.whitelist_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  tournament_casters_account_ids_.MergeFrom(from.tournament_casters_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tournament_event()->::TournamentEvent::MergeFrom(from.tournament_event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pre_match_data()->::CPreMatchInfoData::MergeFrom(from.pre_match_data());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      encryption_key_ = from.encryption_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      encryption_key_pub_ = from.encryption_key_pub_;
    }
    if (cached_has_bits & 0x00000080u) {
      tv_master_steamid_ = from.tv_master_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_tv_relay_steamid(from.tv_relay_steamid());
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  CastToBase(&rankings_)->InternalSwap(CastToBase(&other->rankings_));
  party_ids_.InternalSwap(&other->party_ids_);
  CastToBase(&whitelist_)->InternalSwap(CastToBase(&other->whitelist_));
  CastToBase(&tournament_teams_)->InternalSwap(CastToBase(&other->tournament_teams_));
  tournament_casters_account_ids_.InternalSwap(&other->tournament_casters_account_ids_);
  swap(tournament_event_, other->tournament_event_);
  swap(pre_match_data_, other->pre_match_data_);
  swap(match_id_, other->match_id_);
  swap(game_type_, other->game_type_);
  swap(server_version_, other->server_version_);
  swap(encryption_key_, other->encryption_key_);
  swap(encryption_key_pub_, other->encryption_key_pub_);
  swap(tv_master_steamid_, other->tv_master_steamid_);
  swap(tv_relay_steamid_, other->tv_relay_steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_._instance.get_mutable()->tv_info_ = const_cast< ::ServerHltvInfo*>(
      ::ServerHltvInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kGcReservationSentFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kServerVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kTvInfoFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardPlayerAccountsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kIdlePlayerAccountsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrDefIdxFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrValueFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrRewardIdxFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardDropListFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kTournamentTagFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kSteamdatagramPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reward_player_accounts_(from.reward_player_accounts_),
      idle_player_accounts_(from.idle_player_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  tournament_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tournament_tag()) {
    tournament_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_tag_);
  }
  if (from.has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = NULL;
  }
  if (from.has_tv_info()) {
    tv_info_ = new ::ServerHltvInfo(*from.tv_info_);
  } else {
    tv_info_ = NULL;
  }
  ::memcpy(&reservationid_, &from.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamdatagram_port_) -
    reinterpret_cast<char*>(&reservationid_)) + sizeof(steamdatagram_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedCtor() {
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tournament_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamdatagram_port_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(steamdatagram_port_));
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedDtor() {
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tournament_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
  if (this != internal_default_instance()) delete tv_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_player_accounts_.Clear();
  idle_player_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reservation_ != NULL);
      reservation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tv_info_ != NULL);
      tv_info_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_item_attr_def_idx_) -
        reinterpret_cast<char*>(&reservationid_)) + sizeof(reward_item_attr_def_idx_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&reward_item_attr_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamdatagram_port_) -
        reinterpret_cast<char*>(&reward_item_attr_value_)) + sizeof(steamdatagram_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reservationid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reservationid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gc_reservation_sent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gc_reservation_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gc_reservation_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerHltvInfo tv_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tv_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 reward_player_accounts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_reward_player_accounts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_player_accounts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 idle_player_accounts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_idle_player_accounts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idle_player_accounts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_item_attr_def_idx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_reward_item_attr_def_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_def_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_item_attr_value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_reward_item_attr_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_item_attr_reward_idx = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_reward_item_attr_reward_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_reward_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_drop_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_reward_drop_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_drop_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tournament_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tournament_tag().data(), static_cast<int>(this->tournament_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamdatagram_port = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_steamdatagram_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamdatagram_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reservation(), output);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map(), output);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gc_reservation_sent(), output);
  }

  // optional uint32 server_version = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_version(), output);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_tv_info(), output);
  }

  // repeated uint32 reward_player_accounts = 7;
  for (int i = 0, n = this->reward_player_accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->reward_player_accounts(i), output);
  }

  // repeated uint32 idle_player_accounts = 8;
  for (int i = 0, n = this->idle_player_accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->idle_player_accounts(i), output);
  }

  // optional uint32 reward_item_attr_def_idx = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reward_item_attr_def_idx(), output);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reward_item_attr_value(), output);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reward_item_attr_reward_idx(), output);
  }

  // optional uint32 reward_drop_list = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reward_drop_list(), output);
  }

  // optional string tournament_tag = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tournament_tag().data(), static_cast<int>(this->tournament_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tournament_tag(), output);
  }

  // optional uint32 steamdatagram_port = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->steamdatagram_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reservation(), deterministic, target);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gc_reservation_sent(), target);
  }

  // optional uint32 server_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_version(), target);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_tv_info(), deterministic, target);
  }

  // repeated uint32 reward_player_accounts = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->reward_player_accounts_, target);

  // repeated uint32 idle_player_accounts = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->idle_player_accounts_, target);

  // optional uint32 reward_item_attr_def_idx = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reward_item_attr_def_idx(), target);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reward_item_attr_value(), target);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reward_item_attr_reward_idx(), target);
  }

  // optional uint32 reward_drop_list = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reward_drop_list(), target);
  }

  // optional string tournament_tag = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tournament_tag().data(), static_cast<int>(this->tournament_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tournament_tag(), target);
  }

  // optional uint32 steamdatagram_port = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->steamdatagram_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 reward_player_accounts = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->reward_player_accounts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reward_player_accounts_size());
    total_size += data_size;
  }

  // repeated uint32 idle_player_accounts = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->idle_player_accounts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->idle_player_accounts_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string tournament_tag = 13;
    if (has_tournament_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournament_tag());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional .ServerHltvInfo tv_info = 6;
    if (has_tv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tv_info_);
    }

    // optional uint64 reservationid = 1;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

    // optional uint64 gc_reservation_sent = 4;
    if (has_gc_reservation_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gc_reservation_sent());
    }

    // optional uint32 server_version = 5;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 reward_item_attr_def_idx = 9;
    if (has_reward_item_attr_def_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_def_idx());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 reward_item_attr_value = 10;
    if (has_reward_item_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_value());
    }

    // optional uint32 reward_item_attr_reward_idx = 11;
    if (has_reward_item_attr_reward_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_reward_idx());
    }

    // optional uint32 reward_drop_list = 12;
    if (has_reward_drop_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_drop_list());
    }

    // optional uint32 steamdatagram_port = 14;
    if (has_steamdatagram_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamdatagram_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_player_accounts_.MergeFrom(from.reward_player_accounts_);
  idle_player_accounts_.MergeFrom(from.idle_player_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tournament_tag();
      tournament_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tv_info()->::ServerHltvInfo::MergeFrom(from.tv_info());
    }
    if (cached_has_bits & 0x00000010u) {
      reservationid_ = from.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      gc_reservation_sent_ = from.gc_reservation_sent_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      reward_item_attr_def_idx_ = from.reward_item_attr_def_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      reward_item_attr_value_ = from.reward_item_attr_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      reward_item_attr_reward_idx_ = from.reward_item_attr_reward_idx_;
    }
    if (cached_has_bits & 0x00000400u) {
      reward_drop_list_ = from.reward_drop_list_;
    }
    if (cached_has_bits & 0x00000800u) {
      steamdatagram_port_ = from.steamdatagram_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Swap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
  using std::swap;
  reward_player_accounts_.InternalSwap(&other->reward_player_accounts_);
  idle_player_accounts_.InternalSwap(&other->idle_player_accounts_);
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tournament_tag_.Swap(&other->tournament_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_, other->reservation_);
  swap(tv_info_, other->tv_info_);
  swap(reservationid_, other->reservationid_);
  swap(gc_reservation_sent_, other->gc_reservation_sent_);
  swap(server_version_, other->server_version_);
  swap(reward_item_attr_def_idx_, other->reward_item_attr_def_idx_);
  swap(reward_item_attr_value_, other->reward_item_attr_value_);
  swap(reward_item_attr_reward_idx_, other->reward_item_attr_reward_idx_);
  swap(reward_drop_list_, other->reward_drop_list_);
  swap(steamdatagram_port_, other->steamdatagram_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kDirectUdpIpFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kDirectUdpPortFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kServerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_address()) {
    server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  if (from.has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = NULL;
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reservationid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(reservationid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedCtor() {
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reservationid_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(reservationid_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedDtor() {
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      server_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reservation_ != NULL);
      reservation_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reservationid_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(reservationid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 direct_udp_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_direct_udp_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_udp_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 direct_udp_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_direct_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 reservationid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reservationid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_address = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_address().data(), static_cast<int>(this->server_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // optional uint32 direct_udp_ip = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direct_udp_ip(), output);
  }

  // optional uint32 direct_udp_port = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direct_udp_port(), output);
  }

  // optional uint64 reservationid = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_reservation(), output);
  }

  // optional string map = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->map(), output);
  }

  // optional string server_address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->server_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // optional uint32 direct_udp_ip = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direct_udp_ip(), target);
  }

  // optional uint32 direct_udp_port = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direct_udp_port(), target);
  }

  // optional uint64 reservationid = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_reservation(), deterministic, target);
  }

  // optional string map = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map(), target);
  }

  // optional string server_address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->server_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string map = 6;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string server_address = 7;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_address());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint32 direct_udp_ip = 2;
    if (has_direct_udp_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct_udp_ip());
    }

    // optional uint32 direct_udp_port = 3;
    if (has_direct_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct_udp_port());
    }

    // optional uint64 reservationid = 4;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_address();
      server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      direct_udp_ip_ = from.direct_udp_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      direct_udp_port_ = from.direct_udp_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      reservationid_ = from.reservationid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
  using std::swap;
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_address_.Swap(&other->server_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_, other->reservation_);
  swap(serverid_, other->serverid_);
  swap(direct_udp_ip_, other->direct_udp_ip_);
  swap(direct_udp_port_, other->direct_udp_port_);
  swap(reservationid_, other->reservationid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::kAccountMvpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_mvp_ = from.account_mvp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedCtor() {
  account_mvp_ = 0u;
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_mvp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_mvp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_mvp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_mvp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_mvp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_mvp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_mvp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_mvp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_mvp = 1;
  if (has_account_mvp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_mvp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_mvp()) {
    set_account_mvp(from.account_mvp());
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
  using std::swap;
  swap(account_mvp_, other->account_mvp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->confirm_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->drop_info_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kRoundFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kKillsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kAssistsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kDeathsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kScoresFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kPingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kRoundResultFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMatchResultFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kTeamScoresFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kConfirmFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationStageFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMatchDurationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyKillsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyHeadshotsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy3KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy4KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy5KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMvpsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountTvFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountLnkFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyKillsAggFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kDropInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      kills_(from.kills_),
      assists_(from.assists_),
      deaths_(from.deaths_),
      scores_(from.scores_),
      pings_(from.pings_),
      team_scores_(from.team_scores_),
      enemy_kills_(from.enemy_kills_),
      enemy_headshots_(from.enemy_headshots_),
      enemy_3ks_(from.enemy_3ks_),
      enemy_4ks_(from.enemy_4ks_),
      enemy_5ks_(from.enemy_5ks_),
      mvps_(from.mvps_),
      enemy_kills_agg_(from.enemy_kills_agg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  if (from.has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = NULL;
  }
  if (from.has_confirm()) {
    confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(*from.confirm_);
  } else {
    confirm_ = NULL;
  }
  if (from.has_drop_info()) {
    drop_info_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(*from.drop_info_);
  } else {
    drop_info_ = NULL;
  }
  ::memcpy(&reservationid_, &from.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectators_count_lnk_) -
    reinterpret_cast<char*>(&reservationid_)) + sizeof(spectators_count_lnk_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedCtor() {
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectators_count_lnk_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(spectators_count_lnk_));
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedDtor() {
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
  if (this != internal_default_instance()) delete confirm_;
  if (this != internal_default_instance()) delete drop_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kills_.Clear();
  assists_.Clear();
  deaths_.Clear();
  scores_.Clear();
  pings_.Clear();
  team_scores_.Clear();
  enemy_kills_.Clear();
  enemy_headshots_.Clear();
  enemy_3ks_.Clear();
  enemy_4ks_.Clear();
  enemy_5ks_.Clear();
  mvps_.Clear();
  enemy_kills_agg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reservation_ != NULL);
      reservation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(confirm_ != NULL);
      confirm_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(drop_info_ != NULL);
      drop_info_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_result_) -
        reinterpret_cast<char*>(&reservationid_)) + sizeof(match_result_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&reservation_stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectators_count_lnk_) -
        reinterpret_cast<char*>(&reservation_stage_)) + sizeof(spectators_count_lnk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reservationid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reservationid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 round = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_kills())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kills())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 assists = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_assists())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_assists())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 deaths = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_deaths())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deaths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 scores = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_scores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pings = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_pings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 round_result = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_round_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_result = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_match_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 team_scores = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_team_scores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_team_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confirm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reservation_stage = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_reservation_stage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservation_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_duration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_match_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_kills = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128u, input, this->mutable_enemy_kills())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_kills())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_headshots = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136u, input, this->mutable_enemy_headshots())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_headshots())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_3ks = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144u, input, this->mutable_enemy_3ks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_3ks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_4ks = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152u, input, this->mutable_enemy_4ks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_4ks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_5ks = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160u, input, this->mutable_enemy_5ks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_5ks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 mvps = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168u, input, this->mutable_mvps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mvps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators_count = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_spectators_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators_count_tv = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_spectators_count_tv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_tv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators_count_lnk = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_spectators_count_lnk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_lnk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 enemy_kills_agg = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200u, input, this->mutable_enemy_kills_agg())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_kills_agg())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reservation(), output);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map(), output);
  }

  // optional int32 round = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->round(), output);
  }

  // repeated int32 kills = 5;
  for (int i = 0, n = this->kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kills(i), output);
  }

  // repeated int32 assists = 6;
  for (int i = 0, n = this->assists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->assists(i), output);
  }

  // repeated int32 deaths = 7;
  for (int i = 0, n = this->deaths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->deaths(i), output);
  }

  // repeated int32 scores = 8;
  for (int i = 0, n = this->scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->scores(i), output);
  }

  // repeated int32 pings = 9;
  for (int i = 0, n = this->pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pings(i), output);
  }

  // optional int32 round_result = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->round_result(), output);
  }

  // optional int32 match_result = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->match_result(), output);
  }

  // repeated int32 team_scores = 12;
  for (int i = 0, n = this->team_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->team_scores(i), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_confirm(), output);
  }

  // optional int32 reservation_stage = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->reservation_stage(), output);
  }

  // optional int32 match_duration = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->match_duration(), output);
  }

  // repeated int32 enemy_kills = 16;
  for (int i = 0, n = this->enemy_kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->enemy_kills(i), output);
  }

  // repeated int32 enemy_headshots = 17;
  for (int i = 0, n = this->enemy_headshots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->enemy_headshots(i), output);
  }

  // repeated int32 enemy_3ks = 18;
  for (int i = 0, n = this->enemy_3ks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->enemy_3ks(i), output);
  }

  // repeated int32 enemy_4ks = 19;
  for (int i = 0, n = this->enemy_4ks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->enemy_4ks(i), output);
  }

  // repeated int32 enemy_5ks = 20;
  for (int i = 0, n = this->enemy_5ks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->enemy_5ks(i), output);
  }

  // repeated int32 mvps = 21;
  for (int i = 0, n = this->mvps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->mvps(i), output);
  }

  // optional uint32 spectators_count = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->spectators_count(), output);
  }

  // optional uint32 spectators_count_tv = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->spectators_count_tv(), output);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->spectators_count_lnk(), output);
  }

  // repeated int32 enemy_kills_agg = 25;
  for (int i = 0, n = this->enemy_kills_agg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->enemy_kills_agg(i), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_drop_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reservation(), deterministic, target);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // optional int32 round = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->round(), target);
  }

  // repeated int32 kills = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->kills_, target);

  // repeated int32 assists = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->assists_, target);

  // repeated int32 deaths = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->deaths_, target);

  // repeated int32 scores = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->scores_, target);

  // repeated int32 pings = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->pings_, target);

  // optional int32 round_result = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->round_result(), target);
  }

  // optional int32 match_result = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->match_result(), target);
  }

  // repeated int32 team_scores = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(12, this->team_scores_, target);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_confirm(), deterministic, target);
  }

  // optional int32 reservation_stage = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->reservation_stage(), target);
  }

  // optional int32 match_duration = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->match_duration(), target);
  }

  // repeated int32 enemy_kills = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(16, this->enemy_kills_, target);

  // repeated int32 enemy_headshots = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(17, this->enemy_headshots_, target);

  // repeated int32 enemy_3ks = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(18, this->enemy_3ks_, target);

  // repeated int32 enemy_4ks = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(19, this->enemy_4ks_, target);

  // repeated int32 enemy_5ks = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(20, this->enemy_5ks_, target);

  // repeated int32 mvps = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(21, this->mvps_, target);

  // optional uint32 spectators_count = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->spectators_count(), target);
  }

  // optional uint32 spectators_count_tv = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->spectators_count_tv(), target);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->spectators_count_lnk(), target);
  }

  // repeated int32 enemy_kills_agg = 25;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(25, this->enemy_kills_agg_, target);

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_drop_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 kills = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->kills_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kills_size());
    total_size += data_size;
  }

  // repeated int32 assists = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->assists_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->assists_size());
    total_size += data_size;
  }

  // repeated int32 deaths = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deaths_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->deaths_size());
    total_size += data_size;
  }

  // repeated int32 scores = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->scores_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scores_size());
    total_size += data_size;
  }

  // repeated int32 pings = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pings_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pings_size());
    total_size += data_size;
  }

  // repeated int32 team_scores = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->team_scores_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_scores_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_kills_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_kills_size());
    total_size += data_size;
  }

  // repeated int32 enemy_headshots = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_headshots_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_headshots_size());
    total_size += data_size;
  }

  // repeated int32 enemy_3ks = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_3ks_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_3ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_4ks = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_4ks_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_4ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_5ks = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_5ks_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_5ks_size());
    total_size += data_size;
  }

  // repeated int32 mvps = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mvps_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mvps_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills_agg = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enemy_kills_agg_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_kills_agg_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
    if (has_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *confirm_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
    if (has_drop_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *drop_info_);
    }

    // optional uint64 reservationid = 1;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

    // optional int32 round = 4;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 round_result = 10;
    if (has_round_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_result());
    }

    // optional int32 match_result = 11;
    if (has_match_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_result());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 reservation_stage = 14;
    if (has_reservation_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservation_stage());
    }

    // optional int32 match_duration = 15;
    if (has_match_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_duration());
    }

    // optional uint32 spectators_count = 22;
    if (has_spectators_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count());
    }

    // optional uint32 spectators_count_tv = 23;
    if (has_spectators_count_tv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count_tv());
    }

    // optional uint32 spectators_count_lnk = 24;
    if (has_spectators_count_lnk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count_lnk());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kills_.MergeFrom(from.kills_);
  assists_.MergeFrom(from.assists_);
  deaths_.MergeFrom(from.deaths_);
  scores_.MergeFrom(from.scores_);
  pings_.MergeFrom(from.pings_);
  team_scores_.MergeFrom(from.team_scores_);
  enemy_kills_.MergeFrom(from.enemy_kills_);
  enemy_headshots_.MergeFrom(from.enemy_headshots_);
  enemy_3ks_.MergeFrom(from.enemy_3ks_);
  enemy_4ks_.MergeFrom(from.enemy_4ks_);
  enemy_5ks_.MergeFrom(from.enemy_5ks_);
  mvps_.MergeFrom(from.mvps_);
  enemy_kills_agg_.MergeFrom(from.enemy_kills_agg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(from.confirm());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_drop_info()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(from.drop_info());
    }
    if (cached_has_bits & 0x00000010u) {
      reservationid_ = from.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      round_ = from.round_;
    }
    if (cached_has_bits & 0x00000040u) {
      round_result_ = from.round_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_result_ = from.match_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      reservation_stage_ = from.reservation_stage_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_duration_ = from.match_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      spectators_count_ = from.spectators_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      spectators_count_tv_ = from.spectators_count_tv_;
    }
    if (cached_has_bits & 0x00001000u) {
      spectators_count_lnk_ = from.spectators_count_lnk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
  using std::swap;
  kills_.InternalSwap(&other->kills_);
  assists_.InternalSwap(&other->assists_);
  deaths_.InternalSwap(&other->deaths_);
  scores_.InternalSwap(&other->scores_);
  pings_.InternalSwap(&other->pings_);
  team_scores_.InternalSwap(&other->team_scores_);
  enemy_kills_.InternalSwap(&other->enemy_kills_);
  enemy_headshots_.InternalSwap(&other->enemy_headshots_);
  enemy_3ks_.InternalSwap(&other->enemy_3ks_);
  enemy_4ks_.InternalSwap(&other->enemy_4ks_);
  enemy_5ks_.InternalSwap(&other->enemy_5ks_);
  mvps_.InternalSwap(&other->mvps_);
  enemy_kills_agg_.InternalSwap(&other->enemy_kills_agg_);
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_, other->reservation_);
  swap(confirm_, other->confirm_);
  swap(drop_info_, other->drop_info_);
  swap(reservationid_, other->reservationid_);
  swap(round_, other->round_);
  swap(round_result_, other->round_result_);
  swap(match_result_, other->match_result_);
  swap(reservation_stage_, other->reservation_stage_);
  swap(match_duration_, other->match_duration_);
  swap(spectators_count_, other->spectators_count_);
  swap(spectators_count_tv_, other->spectators_count_tv_);
  swap(spectators_count_lnk_, other->spectators_count_lnk_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_._instance.get_mutable()->stats_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_._instance.get_mutable()->confirm_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_._instance.get_mutable()->match_end_quest_data_ = const_cast< ::CMsgGC_ServerQuestUpdateData*>(
      ::CMsgGC_ServerQuestUpdateData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kConfirmFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kRematchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kReplayTokenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kReplayClusterIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kAbortedMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kMatchEndQuestDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kServerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
}
CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_confirm()) {
    confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(*from.confirm_);
  } else {
    confirm_ = NULL;
  }
  if (from.has_match_end_quest_data()) {
    match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData(*from.match_end_quest_data_);
  } else {
    match_end_quest_data_ = NULL;
  }
  ::memcpy(&rematch_, &from.rematch_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_version_) -
    reinterpret_cast<char*>(&rematch_)) + sizeof(server_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SharedCtor() {
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_version_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(server_version_));
}

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::~CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete confirm_;
  if (this != internal_default_instance()) delete match_end_quest_data_;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(confirm_ != NULL);
      confirm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(match_end_quest_data_ != NULL);
      match_end_quest_data_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&rematch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_version_) -
        reinterpret_cast<char*>(&rematch_)) + sizeof(server_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confirm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rematch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rematch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rematch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 replay_token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_replay_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 replay_cluster_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_replay_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aborted_match = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_aborted_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aborted_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_end_quest_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_stats(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_confirm(), output);
  }

  // optional uint64 rematch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rematch(), output);
  }

  // optional uint32 replay_token = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->replay_token(), output);
  }

  // optional uint32 replay_cluster_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->replay_cluster_id(), output);
  }

  // optional bool aborted_match = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->aborted_match(), output);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_match_end_quest_data(), output);
  }

  // optional uint32 server_version = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_stats(), deterministic, target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_confirm(), deterministic, target);
  }

  // optional uint64 rematch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rematch(), target);
  }

  // optional uint32 replay_token = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->replay_token(), target);
  }

  // optional uint32 replay_cluster_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->replay_cluster_id(), target);
  }

  // optional bool aborted_match = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->aborted_match(), target);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_match_end_quest_data(), deterministic, target);
  }

  // optional uint32 server_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
    if (has_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *confirm_);
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
    if (has_match_end_quest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_end_quest_data_);
    }

    // optional uint64 rematch = 4;
    if (has_rematch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rematch());
    }

    // optional uint32 replay_token = 5;
    if (has_replay_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_token());
    }

    // optional uint32 replay_cluster_id = 6;
    if (has_replay_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_cluster_id());
    }

    // optional bool aborted_match = 7;
    if (has_aborted_match()) {
      total_size += 1 + 1;
    }

    // optional uint32 server_version = 9;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(from.confirm());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(from.match_end_quest_data());
    }
    if (cached_has_bits & 0x00000008u) {
      rematch_ = from.rematch_;
    }
    if (cached_has_bits & 0x00000010u) {
      replay_token_ = from.replay_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      replay_cluster_id_ = from.replay_cluster_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      aborted_match_ = from.aborted_match_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_version_ = from.server_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::Swap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other) {
  using std::swap;
  swap(stats_, other->stats_);
  swap(confirm_, other->confirm_);
  swap(match_end_quest_data_, other->match_end_quest_data_);
  swap(rematch_, other->rematch_);
  swap(replay_token_, other->replay_token_);
  swap(replay_cluster_id_, other->replay_cluster_id_);
  swap(aborted_match_, other->aborted_match_);
  swap(server_version_, other->server_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}
CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedCtor() {
}

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::~CMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingClient2GCHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2GCHello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingClient2GCHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2GCHello::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::Swap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingClient2GCHello::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->ongoingmatch_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->global_stats_ = const_cast< ::GlobalStatistics*>(
      ::GlobalStatistics::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->ranking_ = const_cast< ::PlayerRankingInfo*>(
      ::PlayerRankingInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->medals_ = const_cast< ::PlayerMedalsInfo*>(
      ::PlayerMedalsInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->my_current_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->my_current_team_ = const_cast< ::TournamentTeam*>(
      ::TournamentTeam::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->activity_ = const_cast< ::AccountActivity*>(
      ::AccountActivity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kOngoingmatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kGlobalStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPenaltySecondsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPenaltyReasonFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kVacBannedFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kRankingFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kCommendationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMedalsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventTeamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentTeamFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventStagesFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kSurveyVoteFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kActivityFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerLevelFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerCurXpFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerXpBonusFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      my_current_event_teams_(from.my_current_event_teams_),
      my_current_event_stages_(from.my_current_event_stages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ongoingmatch()) {
    ongoingmatch_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.ongoingmatch_);
  } else {
    ongoingmatch_ = NULL;
  }
  if (from.has_global_stats()) {
    global_stats_ = new ::GlobalStatistics(*from.global_stats_);
  } else {
    global_stats_ = NULL;
  }
  if (from.has_ranking()) {
    ranking_ = new ::PlayerRankingInfo(*from.ranking_);
  } else {
    ranking_ = NULL;
  }
  if (from.has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = NULL;
  }
  if (from.has_medals()) {
    medals_ = new ::PlayerMedalsInfo(*from.medals_);
  } else {
    medals_ = NULL;
  }
  if (from.has_my_current_event()) {
    my_current_event_ = new ::TournamentEvent(*from.my_current_event_);
  } else {
    my_current_event_ = NULL;
  }
  if (from.has_my_current_team()) {
    my_current_team_ = new ::TournamentTeam(*from.my_current_team_);
  } else {
    my_current_team_ = NULL;
  }
  if (from.has_activity()) {
    activity_ = new ::AccountActivity(*from.activity_);
  } else {
    activity_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_xp_bonus_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_xp_bonus_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedCtor() {
  ::memset(&ongoingmatch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_xp_bonus_flags_) -
      reinterpret_cast<char*>(&ongoingmatch_)) + sizeof(player_xp_bonus_flags_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedDtor() {
  if (this != internal_default_instance()) delete ongoingmatch_;
  if (this != internal_default_instance()) delete global_stats_;
  if (this != internal_default_instance()) delete ranking_;
  if (this != internal_default_instance()) delete commendation_;
  if (this != internal_default_instance()) delete medals_;
  if (this != internal_default_instance()) delete my_current_event_;
  if (this != internal_default_instance()) delete my_current_team_;
  if (this != internal_default_instance()) delete activity_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  my_current_event_teams_.Clear();
  my_current_event_stages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ongoingmatch_ != NULL);
      ongoingmatch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(global_stats_ != NULL);
      global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ranking_ != NULL);
      ranking_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(commendation_ != NULL);
      commendation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(medals_ != NULL);
      medals_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(my_current_event_ != NULL);
      my_current_event_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(my_current_team_ != NULL);
      my_current_team_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(activity_ != NULL);
      activity_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_xp_bonus_flags_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_xp_bonus_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ongoingmatch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GlobalStatistics global_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_penalty_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_penalty_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vac_banned = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_vac_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vac_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerRankingInfo ranking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerCommendationInfo commendation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commendation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerMedalsInfo medals = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_medals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TournamentEvent my_current_event = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_my_current_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentTeam my_current_event_teams = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_current_event_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TournamentTeam my_current_team = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_my_current_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentEvent my_current_event_stages = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_current_event_stages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 survey_vote = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_survey_vote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AccountActivity activity = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_level = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_player_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_cur_xp = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_player_cur_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_cur_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_xp_bonus_flags = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_player_xp_bonus_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_xp_bonus_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ongoingmatch(), output);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_global_stats(), output);
  }

  // optional uint32 penalty_seconds = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->penalty_seconds(), output);
  }

  // optional uint32 penalty_reason = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->penalty_reason(), output);
  }

  // optional int32 vac_banned = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vac_banned(), output);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_ranking(), output);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_commendation(), output);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_medals(), output);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_my_current_event(), output);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_current_event_teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->my_current_event_teams(static_cast<int>(i)),
      output);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_my_current_team(), output);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_current_event_stages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->my_current_event_stages(static_cast<int>(i)),
      output);
  }

  // optional uint32 survey_vote = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->survey_vote(), output);
  }

  // optional .AccountActivity activity = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_activity(), output);
  }

  // optional int32 player_level = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->player_level(), output);
  }

  // optional int32 player_cur_xp = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->player_cur_xp(), output);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->player_xp_bonus_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ongoingmatch(), deterministic, target);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_global_stats(), deterministic, target);
  }

  // optional uint32 penalty_seconds = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->penalty_reason(), target);
  }

  // optional int32 vac_banned = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vac_banned(), target);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_ranking(), deterministic, target);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_commendation(), deterministic, target);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_medals(), deterministic, target);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_my_current_event(), deterministic, target);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_current_event_teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->my_current_event_teams(static_cast<int>(i)), deterministic, target);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_my_current_team(), deterministic, target);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_current_event_stages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->my_current_event_stages(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 survey_vote = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->survey_vote(), target);
  }

  // optional .AccountActivity activity = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_activity(), deterministic, target);
  }

  // optional int32 player_level = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->player_level(), target);
  }

  // optional int32 player_cur_xp = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->player_cur_xp(), target);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->player_xp_bonus_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TournamentTeam my_current_event_teams = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->my_current_event_teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_current_event_teams(static_cast<int>(i)));
    }
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->my_current_event_stages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_current_event_stages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
    if (has_ongoingmatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ongoingmatch_);
    }

    // optional .GlobalStatistics global_stats = 3;
    if (has_global_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *global_stats_);
    }

    // optional .PlayerRankingInfo ranking = 7;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ranking_);
    }

    // optional .PlayerCommendationInfo commendation = 8;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional .PlayerMedalsInfo medals = 9;
    if (has_medals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *medals_);
    }

    // optional .TournamentEvent my_current_event = 10;
    if (has_my_current_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *my_current_event_);
    }

    // optional .TournamentTeam my_current_team = 12;
    if (has_my_current_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *my_current_team_);
    }

    // optional .AccountActivity activity = 15;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *activity_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 penalty_seconds = 4;
    if (has_penalty_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_seconds());
    }

    // optional uint32 penalty_reason = 5;
    if (has_penalty_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_reason());
    }

    // optional int32 vac_banned = 6;
    if (has_vac_banned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vac_banned());
    }

    // optional uint32 survey_vote = 14;
    if (has_survey_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_vote());
    }

    // optional int32 player_level = 17;
    if (has_player_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional int32 player_cur_xp = 18;
    if (has_player_cur_xp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_cur_xp());
    }

    // optional int32 player_xp_bonus_flags = 19;
    if (has_player_xp_bonus_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_xp_bonus_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  my_current_event_teams_.MergeFrom(from.my_current_event_teams_);
  my_current_event_stages_.MergeFrom(from.my_current_event_stages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ongoingmatch()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.ongoingmatch());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_global_stats()->::GlobalStatistics::MergeFrom(from.global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ranking()->::PlayerRankingInfo::MergeFrom(from.ranking());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_medals()->::PlayerMedalsInfo::MergeFrom(from.medals());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_my_current_event()->::TournamentEvent::MergeFrom(from.my_current_event());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_my_current_team()->::TournamentTeam::MergeFrom(from.my_current_team());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_activity()->::AccountActivity::MergeFrom(from.activity());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      penalty_seconds_ = from.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      penalty_reason_ = from.penalty_reason_;
    }
    if (cached_has_bits & 0x00000800u) {
      vac_banned_ = from.vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      survey_vote_ = from.survey_vote_;
    }
    if (cached_has_bits & 0x00002000u) {
      player_level_ = from.player_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      player_cur_xp_ = from.player_cur_xp_;
    }
    if (cached_has_bits & 0x00008000u) {
      player_xp_bonus_flags_ = from.player_xp_bonus_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
  using std::swap;
  CastToBase(&my_current_event_teams_)->InternalSwap(CastToBase(&other->my_current_event_teams_));
  CastToBase(&my_current_event_stages_)->InternalSwap(CastToBase(&other->my_current_event_stages_));
  swap(ongoingmatch_, other->ongoingmatch_);
  swap(global_stats_, other->global_stats_);
  swap(ranking_, other->ranking_);
  swap(commendation_, other->commendation_);
  swap(medals_, other->medals_);
  swap(my_current_event_, other->my_current_event_);
  swap(my_current_team_, other->my_current_team_);
  swap(activity_, other->activity_);
  swap(account_id_, other->account_id_);
  swap(penalty_seconds_, other->penalty_seconds_);
  swap(penalty_reason_, other->penalty_reason_);
  swap(vac_banned_, other->vac_banned_);
  swap(survey_vote_, other->survey_vote_);
  swap(player_level_, other->player_level_);
  swap(player_cur_xp_, other->player_cur_xp_);
  swap(player_xp_bonus_flags_, other->player_xp_bonus_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::kSettingTypeFieldNumber;
const int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::kSettingValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}
CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&setting_type_, &from.setting_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_value_) -
    reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedCtor() {
  ::memset(&setting_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_value_) -
      reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  SharedDtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedDtor() {
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&setting_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_value_) -
        reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setting_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_setting_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setting_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 setting_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_setting_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setting_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 setting_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setting_type(), output);
  }

  // optional uint32 setting_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->setting_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 setting_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setting_type(), target);
  }

  // optional uint32 setting_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->setting_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 setting_type = 1;
    if (has_setting_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setting_type());
    }

    // optional uint32 setting_value = 2;
    if (has_setting_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setting_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      setting_type_ = from.setting_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      setting_value_ = from.setting_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Swap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
  using std::swap;
  swap(setting_type_, other->setting_type_);
  swap(setting_value_, other->setting_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_AccountPrivacySettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_AccountPrivacySettings::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}
CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedCtor() {
}

CMsgGCCStrike15_v2_AccountPrivacySettings::~CMsgGCCStrike15_v2_AccountPrivacySettings() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
  SharedDtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedDtor() {
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_AccountPrivacySettings& CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AccountPrivacySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_AccountPrivacySettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_AccountPrivacySettings)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_AccountPrivacySettings)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->settings(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_AccountPrivacySettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AccountPrivacySettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AccountPrivacySettings)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::Swap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_AccountPrivacySettings::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
  using std::swap;
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_._instance.get_mutable()->abandoned_match_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kAbandonedMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kPenaltySecondsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kPenaltyReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_abandoned_match()) {
    abandoned_match_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.abandoned_match_);
  } else {
    abandoned_match_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(penalty_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedCtor() {
  ::memset(&abandoned_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_reason_) -
      reinterpret_cast<char*>(&abandoned_match_)) + sizeof(penalty_reason_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedDtor() {
  if (this != internal_default_instance()) delete abandoned_match_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(abandoned_match_ != NULL);
    abandoned_match_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_reason_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(penalty_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abandoned_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_penalty_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_penalty_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_abandoned_match(), output);
  }

  // optional uint32 penalty_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->penalty_seconds(), output);
  }

  // optional uint32 penalty_reason = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->penalty_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_abandoned_match(), deterministic, target);
  }

  // optional uint32 penalty_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->penalty_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
    if (has_abandoned_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *abandoned_match_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 penalty_seconds = 3;
    if (has_penalty_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_seconds());
    }

    // optional uint32 penalty_reason = 4;
    if (has_penalty_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_abandoned_match()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.abandoned_match());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      penalty_seconds_ = from.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      penalty_reason_ = from.penalty_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
  using std::swap;
  swap(abandoned_match_, other->abandoned_match_);
  swap(account_id_, other->account_id_);
  swap(penalty_seconds_, other->penalty_seconds_);
  swap(penalty_reason_, other->penalty_reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CMsgGCCStrike15_v2_MatchmakingServer2GCKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServer2GCKick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
}
CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CMsgGCCStrike15_v2_MatchmakingServer2GCKick(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SharedCtor() {
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(reason_));
}

CMsgGCCStrike15_v2_MatchmakingServer2GCKick::~CMsgGCCStrike15_v2_MatchmakingServer2GCKick() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SharedDtor() {
  if (this != internal_default_instance()) delete reservation_;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingServer2GCKick.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reservation_ != NULL);
    reservation_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reservation(), output);
  }

  // optional uint32 reason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reservation(), deterministic, target);
  }

  // optional uint32 reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServer2GCKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServer2GCKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingServer2GCKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::Swap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other) {
  using std::swap;
  swap(reservation_, other->reservation_);
  swap(account_id_, other->account_id_);
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServer2GCKick::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::kRankingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rankings_(from.rankings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SharedCtor() {
  match_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankings_.Clear();
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerRankingInfo rankings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rankings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rankings(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rankings(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .PlayerRankingInfo rankings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rankings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rankings(static_cast<int>(i)));
    }
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankings_.MergeFrom(from.rankings_);
  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other) {
  using std::swap;
  CastToBase(&rankings_)->InternalSwap(CastToBase(&other->rankings_));
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::kMainPostUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}
CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_post_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_main_post_url()) {
    main_post_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_post_url_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedCtor() {
  main_post_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedDtor() {
  main_post_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    main_post_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string main_post_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_post_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string main_post_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->main_post_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string main_post_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_post_url().data(), static_cast<int>(this->main_post_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->main_post_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string main_post_url = 1;
  if (has_main_post_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->main_post_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_main_post_url()) {
    set_has_main_post_url();
    main_post_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_post_url_);
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
  using std::swap;
  main_post_url_.Swap(&other->main_post_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kReasonFieldNumber;
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}
CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_));
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedDtor() {
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Swap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InternalSwap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(reason_, other->reason_);
  swap(seconds_, other->seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientReportPlayer::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptAimbotFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptWallhackFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptSpeedhackFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptTeamharmFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptTextabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptVoiceabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportPlayer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}
CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rpt_voiceabuse_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rpt_voiceabuse_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpt_voiceabuse_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(rpt_voiceabuse_));
}

CMsgGCCStrike15_v2_ClientReportPlayer::~CMsgGCCStrike15_v2_ClientReportPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportPlayer)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportPlayer::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientReportPlayer& CMsgGCCStrike15_v2_ClientReportPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportPlayer.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rpt_voiceabuse_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rpt_voiceabuse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_aimbot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rpt_aimbot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_aimbot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_wallhack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rpt_wallhack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_wallhack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_speedhack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rpt_speedhack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_speedhack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_teamharm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rpt_teamharm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_teamharm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_textabuse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rpt_textabuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_textabuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_voiceabuse = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rpt_voiceabuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_voiceabuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientReportPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientReportPlayer)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 rpt_aimbot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rpt_aimbot(), output);
  }

  // optional uint32 rpt_wallhack = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rpt_wallhack(), output);
  }

  // optional uint32 rpt_speedhack = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rpt_speedhack(), output);
  }

  // optional uint32 rpt_teamharm = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_teamharm(), output);
  }

  // optional uint32 rpt_textabuse = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rpt_textabuse(), output);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpt_voiceabuse(), output);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientReportPlayer)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 rpt_aimbot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_teamharm(), target);
  }

  // optional uint32 rpt_textabuse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rpt_textabuse(), target);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rpt_voiceabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rpt_aimbot = 2;
    if (has_rpt_aimbot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 3;
    if (has_rpt_wallhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 4;
    if (has_rpt_speedhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 5;
    if (has_rpt_teamharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_teamharm());
    }

    // optional uint32 rpt_textabuse = 6;
    if (has_rpt_textabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_textabuse());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 rpt_voiceabuse = 7;
    if (has_rpt_voiceabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_voiceabuse());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientReportPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportPlayer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rpt_aimbot_ = from.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000004u) {
      rpt_wallhack_ = from.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_speedhack_ = from.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_teamharm_ = from.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000020u) {
      rpt_textabuse_ = from.rpt_textabuse_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      rpt_voiceabuse_ = from.rpt_voiceabuse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::Swap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientReportPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(rpt_aimbot_, other->rpt_aimbot_);
  swap(rpt_wallhack_, other->rpt_wallhack_);
  swap(rpt_speedhack_, other->rpt_speedhack_);
  swap(rpt_teamharm_, other->rpt_teamharm_);
  swap(rpt_textabuse_, other->rpt_textabuse_);
  swap(match_id_, other->match_id_);
  swap(rpt_voiceabuse_, other->rpt_voiceabuse_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportPlayer::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientCommendPlayer::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kCommendationFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}
CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedCtor() {
  ::memset(&commendation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&commendation_)) + sizeof(match_id_));
}

CMsgGCCStrike15_v2_ClientCommendPlayer::~CMsgGCCStrike15_v2_ClientCommendPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedDtor() {
  if (this != internal_default_instance()) delete commendation_;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientCommendPlayer::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientCommendPlayer& CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientCommendPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commendation_ != NULL);
    commendation_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerCommendationInfo commendation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commendation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tokens = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tokens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientCommendPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientCommendPlayer)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_commendation(), output);
  }

  // optional uint32 tokens = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tokens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientCommendPlayer)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientCommendPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_commendation(), deterministic, target);
  }

  // optional uint32 tokens = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tokens(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientCommendPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientCommendPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .PlayerCommendationInfo commendation = 9;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 tokens = 10;
    if (has_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientCommendPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientCommendPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientCommendPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientCommendPlayer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tokens_ = from.tokens_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::Swap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientCommendPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
  using std::swap;
  swap(commendation_, other->commendation_);
  swap(account_id_, other->account_id_);
  swap(tokens_, other->tokens_);
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientCommendPlayer::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientReportServer::kRptPoorperfFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptAbusivemodelsFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptBadmotdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptListingabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptInventoryabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientReportServer)
}
CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpt_poorperf_, &from.rpt_poorperf_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportServer)
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedCtor() {
  ::memset(&rpt_poorperf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
}

CMsgGCCStrike15_v2_ClientReportServer::~CMsgGCCStrike15_v2_ClientReportServer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportServer)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientReportServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportServer::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientReportServer& CMsgGCCStrike15_v2_ClientReportServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportServer.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&rpt_poorperf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientReportServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientReportServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rpt_poorperf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rpt_poorperf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_poorperf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_abusivemodels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rpt_abusivemodels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_abusivemodels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_badmotd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rpt_badmotd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_badmotd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_listingabuse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rpt_listingabuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_listingabuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_inventoryabuse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rpt_inventoryabuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_inventoryabuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientReportServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientReportServer)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientReportServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rpt_poorperf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rpt_poorperf(), output);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rpt_abusivemodels(), output);
  }

  // optional uint32 rpt_badmotd = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rpt_badmotd(), output);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rpt_listingabuse(), output);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_inventoryabuse(), output);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientReportServer)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rpt_poorperf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rpt_poorperf(), target);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpt_abusivemodels(), target);
  }

  // optional uint32 rpt_badmotd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rpt_badmotd(), target);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rpt_listingabuse(), target);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_inventoryabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportServer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 rpt_poorperf = 1;
    if (has_rpt_poorperf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_poorperf());
    }

    // optional uint32 rpt_abusivemodels = 2;
    if (has_rpt_abusivemodels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_abusivemodels());
    }

    // optional uint32 rpt_badmotd = 3;
    if (has_rpt_badmotd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_badmotd());
    }

    // optional uint32 rpt_listingabuse = 4;
    if (has_rpt_listingabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_listingabuse());
    }

    // optional uint32 rpt_inventoryabuse = 5;
    if (has_rpt_inventoryabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_inventoryabuse());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientReportServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportServer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      rpt_poorperf_ = from.rpt_poorperf_;
    }
    if (cached_has_bits & 0x00000002u) {
      rpt_abusivemodels_ = from.rpt_abusivemodels_;
    }
    if (cached_has_bits & 0x00000004u) {
      rpt_badmotd_ = from.rpt_badmotd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_listingabuse_ = from.rpt_listingabuse_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_inventoryabuse_ = from.rpt_inventoryabuse_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportServer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportServer::Swap(CMsgGCCStrike15_v2_ClientReportServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientReportServer::InternalSwap(CMsgGCCStrike15_v2_ClientReportServer* other) {
  using std::swap;
  swap(rpt_poorperf_, other->rpt_poorperf_);
  swap(rpt_abusivemodels_, other->rpt_abusivemodels_);
  swap(rpt_badmotd_, other->rpt_badmotd_);
  swap(rpt_listingabuse_, other->rpt_listingabuse_);
  swap(rpt_inventoryabuse_, other->rpt_inventoryabuse_);
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportServer::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientReportResponse::kConfirmationIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kServerIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kResponseTypeFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kResponseResultFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}
CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmation_id_, &from.confirmation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tokens_) -
    reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedCtor() {
  ::memset(&confirmation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokens_) -
      reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
}

CMsgGCCStrike15_v2_ClientReportResponse::~CMsgGCCStrike15_v2_ClientReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportResponse)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportResponse::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientReportResponse& CMsgGCCStrike15_v2_ClientReportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientReportResponse.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&confirmation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tokens_) -
        reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientReportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confirmation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_confirmation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confirmation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 response_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_response_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 response_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_response_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tokens = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tokens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientReportResponse)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 confirmation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confirmation_id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_ip(), output);
  }

  // optional uint32 response_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->response_type(), output);
  }

  // optional uint32 response_result = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->response_result(), output);
  }

  // optional uint32 tokens = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tokens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientReportResponse)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 confirmation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confirmation_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_ip(), target);
  }

  // optional uint32 response_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->response_type(), target);
  }

  // optional uint32 response_result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->response_result(), target);
  }

  // optional uint32 tokens = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tokens(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 confirmation_id = 1;
    if (has_confirmation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confirmation_id());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 response_type = 4;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_type());
    }

    // optional uint32 response_result = 5;
    if (has_response_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_result());
    }

    // optional uint32 tokens = 6;
    if (has_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientReportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_id_ = from.confirmation_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      response_type_ = from.response_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      response_result_ = from.response_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      tokens_ = from.tokens_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportResponse::Swap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientReportResponse::InternalSwap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
  using std::swap;
  swap(confirmation_id_, other->confirmation_id_);
  swap(account_id_, other->account_id_);
  swap(server_ip_, other->server_ip_);
  swap(response_type_, other->response_type_);
  swap(response_result_, other->response_result_);
  swap(tokens_, other->tokens_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportResponse::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedCtor() {
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(request_id_));
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_id_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_matchid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->matchid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_ids_, target);

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->matchid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint64 matchid = 4;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Swap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InternalSwap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  swap(serverid_, other->serverid_);
  swap(matchid_, other->matchid_);
  swap(request_id_, other->request_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WatchableMatchInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchableMatchInfo::kServerIpFieldNumber;
const int WatchableMatchInfo::kTvPortFieldNumber;
const int WatchableMatchInfo::kTvSpectatorsFieldNumber;
const int WatchableMatchInfo::kTvTimeFieldNumber;
const int WatchableMatchInfo::kTvWatchPasswordFieldNumber;
const int WatchableMatchInfo::kClDecryptdataKeyFieldNumber;
const int WatchableMatchInfo::kClDecryptdataKeyPubFieldNumber;
const int WatchableMatchInfo::kGameTypeFieldNumber;
const int WatchableMatchInfo::kGameMapgroupFieldNumber;
const int WatchableMatchInfo::kGameMapFieldNumber;
const int WatchableMatchInfo::kServerIdFieldNumber;
const int WatchableMatchInfo::kMatchIdFieldNumber;
const int WatchableMatchInfo::kReservationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchableMatchInfo::WatchableMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_WatchableMatchInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WatchableMatchInfo)
}
WatchableMatchInfo::WatchableMatchInfo(const WatchableMatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tv_watch_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tv_watch_password()) {
    tv_watch_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tv_watch_password_);
  }
  game_mapgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mapgroup()) {
    game_mapgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mapgroup_);
  }
  game_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_map()) {
    game_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_map_);
  }
  ::memcpy(&server_ip_, &from.server_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&server_ip_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:WatchableMatchInfo)
}

void WatchableMatchInfo::SharedCtor() {
  tv_watch_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mapgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&server_ip_)) + sizeof(game_type_));
}

WatchableMatchInfo::~WatchableMatchInfo() {
  // @@protoc_insertion_point(destructor:WatchableMatchInfo)
  SharedDtor();
}

void WatchableMatchInfo::SharedDtor() {
  tv_watch_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mapgroup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchableMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WatchableMatchInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WatchableMatchInfo& WatchableMatchInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_WatchableMatchInfo.base);
  return *internal_default_instance();
}


void WatchableMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchableMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tv_watch_password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mapgroup_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      game_map_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&server_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cl_decryptdata_key_) -
        reinterpret_cast<char*>(&server_ip_)) + sizeof(cl_decryptdata_key_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&cl_decryptdata_key_pub_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_type_) -
        reinterpret_cast<char*>(&cl_decryptdata_key_pub_)) + sizeof(game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WatchableMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WatchableMatchInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tv_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_spectators = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tv_spectators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tv_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tv_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tv_watch_password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tv_watch_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cl_decryptdata_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cl_decryptdata_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cl_decryptdata_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cl_decryptdata_key_pub = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cl_decryptdata_key_pub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cl_decryptdata_key_pub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mapgroup = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mapgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WatchableMatchInfo.game_mapgroup");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_map().data(), static_cast<int>(this->game_map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WatchableMatchInfo.game_map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 reservation_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_reservation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WatchableMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WatchableMatchInfo)
  return false;
#undef DO_
}

void WatchableMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WatchableMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_ip = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_ip(), output);
  }

  // optional uint32 tv_port = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tv_port(), output);
  }

  // optional uint32 tv_spectators = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tv_spectators(), output);
  }

  // optional uint32 tv_time = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tv_time(), output);
  }

  // optional bytes tv_watch_password = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->tv_watch_password(), output);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cl_decryptdata_key(), output);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cl_decryptdata_key_pub(), output);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_type(), output);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_mapgroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->game_mapgroup(), output);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_map().data(), static_cast<int>(this->game_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->game_map(), output);
  }

  // optional uint64 server_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->server_id(), output);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->match_id(), output);
  }

  // optional uint64 reservation_id = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->reservation_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WatchableMatchInfo)
}

::google::protobuf::uint8* WatchableMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WatchableMatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_ip(), target);
  }

  // optional uint32 tv_port = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tv_port(), target);
  }

  // optional uint32 tv_spectators = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tv_spectators(), target);
  }

  // optional uint32 tv_time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tv_time(), target);
  }

  // optional bytes tv_watch_password = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tv_watch_password(), target);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cl_decryptdata_key(), target);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cl_decryptdata_key_pub(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mapgroup().data(), static_cast<int>(this->game_mapgroup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_mapgroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_map().data(), static_cast<int>(this->game_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->game_map(), target);
  }

  // optional uint64 server_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->server_id(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->match_id(), target);
  }

  // optional uint64 reservation_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->reservation_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchableMatchInfo)
  return target;
}

size_t WatchableMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchableMatchInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes tv_watch_password = 5;
    if (has_tv_watch_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tv_watch_password());
    }

    // optional string game_mapgroup = 9;
    if (has_game_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mapgroup());
    }

    // optional string game_map = 10;
    if (has_game_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_map());
    }

    // optional uint32 server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 tv_port = 2;
    if (has_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_port());
    }

    // optional uint32 tv_spectators = 3;
    if (has_tv_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_spectators());
    }

    // optional uint32 tv_time = 4;
    if (has_tv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_time());
    }

    // optional uint64 cl_decryptdata_key = 6;
    if (has_cl_decryptdata_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cl_decryptdata_key());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 cl_decryptdata_key_pub = 7;
    if (has_cl_decryptdata_key_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cl_decryptdata_key_pub());
    }

    // optional uint64 server_id = 11;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional uint64 match_id = 12;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint64 reservation_id = 13;
    if (has_reservation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservation_id());
    }

    // optional uint32 game_type = 8;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchableMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WatchableMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchableMatchInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchableMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WatchableMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WatchableMatchInfo)
    MergeFrom(*source);
  }
}

void WatchableMatchInfo::MergeFrom(const WatchableMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchableMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tv_watch_password();
      tv_watch_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tv_watch_password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_mapgroup();
      game_mapgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mapgroup_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_game_map();
      game_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_map_);
    }
    if (cached_has_bits & 0x00000008u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_port_ = from.tv_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_spectators_ = from.tv_spectators_;
    }
    if (cached_has_bits & 0x00000040u) {
      tv_time_ = from.tv_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      cl_decryptdata_key_ = from.cl_decryptdata_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      cl_decryptdata_key_pub_ = from.cl_decryptdata_key_pub_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      reservation_id_ = from.reservation_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      game_type_ = from.game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WatchableMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WatchableMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchableMatchInfo::CopyFrom(const WatchableMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchableMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchableMatchInfo::IsInitialized() const {
  return true;
}

void WatchableMatchInfo::Swap(WatchableMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchableMatchInfo::InternalSwap(WatchableMatchInfo* other) {
  using std::swap;
  tv_watch_password_.Swap(&other->tv_watch_password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_mapgroup_.Swap(&other->game_mapgroup_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_map_.Swap(&other->game_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_ip_, other->server_ip_);
  swap(tv_port_, other->tv_port_);
  swap(tv_spectators_, other->tv_spectators_);
  swap(tv_time_, other->tv_time_);
  swap(cl_decryptdata_key_, other->cl_decryptdata_key_);
  swap(cl_decryptdata_key_pub_, other->cl_decryptdata_key_pub_);
  swap(server_id_, other->server_id_);
  swap(match_id_, other->match_id_);
  swap(reservation_id_, other->reservation_id_);
  swap(game_type_, other->game_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WatchableMatchInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_._instance.get_mutable()->res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kVersionFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kJoinTokenFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kJoinIppFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kResFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kErrormsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errormsg()) {
    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  if (from.has_res()) {
    res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.res_);
  } else {
    res_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_ipp_) -
    reinterpret_cast<char*>(&version_)) + sizeof(join_ipp_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedCtor() {
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_ipp_) -
      reinterpret_cast<char*>(&res_)) + sizeof(join_ipp_));
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::~CMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      errormsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&join_ipp_) -
        reinterpret_cast<char*>(&version_)) + sizeof(join_ipp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 join_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_join_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 join_ipp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_join_ipp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_ipp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errormsg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormsg().data(), static_cast<int>(this->errormsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 join_token = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->join_token(), output);
  }

  // optional uint32 join_ipp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->join_ipp(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_res(), output);
  }

  // optional string errormsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->errormsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 join_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->join_token(), target);
  }

  // optional uint32 join_ipp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->join_ipp(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_res(), deterministic, target);
  }

  // optional string errormsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errormsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string errormsg = 6;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *res_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 join_token = 3;
    if (has_join_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_token());
    }

    // optional uint32 join_ipp = 4;
    if (has_join_ipp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_ipp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientRequestJoinFriendData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errormsg();
      errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      join_token_ = from.join_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      join_ipp_ = from.join_ipp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Swap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
  using std::swap;
  errormsg_.Swap(&other->errormsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(res_, other->res_);
  swap(version_, other->version_);
  swap(account_id_, other->account_id_);
  swap(join_token_, other->join_token_);
  swap(join_ipp_, other->join_ipp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestJoinFriendData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_._instance.get_mutable()->res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kVersionFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServerIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServerPortFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kResFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kErrormsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}
CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errormsg()) {
    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  if (from.has_res()) {
    res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.res_);
  } else {
    res_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedCtor() {
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&res_)) + sizeof(server_port_));
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData::~CMsgGCCStrike15_v2_ClientRequestJoinServerData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinServerData::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientRequestJoinServerData& CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      errormsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&version_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errormsg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormsg().data(), static_cast<int>(this->errormsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // optional uint32 server_ip = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_ip(), output);
  }

  // optional uint32 server_port = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_port(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_res(), output);
  }

  // optional string errormsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->errormsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestJoinServerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // optional uint32 server_ip = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_ip(), target);
  }

  // optional uint32 server_port = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_port(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_res(), deterministic, target);
  }

  // optional string errormsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->errormsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string errormsg = 7;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *res_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint32 server_ip = 4;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinServerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientRequestJoinServerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errormsg();
      errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Swap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
  using std::swap;
  errormsg_.Swap(&other->errormsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(res_, other->res_);
  swap(version_, other->version_);
  swap(account_id_, other->account_id_);
  swap(serverid_, other->serverid_);
  swap(server_ip_, other->server_ip_);
  swap(server_port_, other->server_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestJoinServerData::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCstrike15_v2_ClientRequestNewMission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCstrike15_v2_ClientRequestNewMission::kMissionIdFieldNumber;
const int CMsgGCCstrike15_v2_ClientRequestNewMission::kCampaignIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}
CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&campaign_id_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campaign_id_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
}

CMsgGCCstrike15_v2_ClientRequestNewMission::~CMsgGCCstrike15_v2_ClientRequestNewMission() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
  SharedDtor();
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedDtor() {
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_ClientRequestNewMission::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCstrike15_v2_ClientRequestNewMission& CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission.base);
  return *internal_default_instance();
}


void CMsgGCCstrike15_v2_ClientRequestNewMission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&mission_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&campaign_id_) -
        reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mission_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mission_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 campaign_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_campaign_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campaign_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCstrike15_v2_ClientRequestNewMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCstrike15_v2_ClientRequestNewMission)
  return false;
#undef DO_
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mission_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_id(), output);
  }

  // optional uint32 campaign_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campaign_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCstrike15_v2_ClientRequestNewMission)
}

::google::protobuf::uint8* CMsgGCCstrike15_v2_ClientRequestNewMission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mission_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_id(), target);
  }

  // optional uint32 campaign_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campaign_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_ClientRequestNewMission)
  return target;
}

size_t CMsgGCCstrike15_v2_ClientRequestNewMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // optional uint32 campaign_id = 3;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campaign_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_ClientRequestNewMission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCstrike15_v2_ClientRequestNewMission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCstrike15_v2_ClientRequestNewMission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCstrike15_v2_ClientRequestNewMission)
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mission_id_ = from.mission_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      campaign_id_ = from.campaign_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::Swap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCstrike15_v2_ClientRequestNewMission::InternalSwap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
  using std::swap;
  swap(mission_id_, other->mission_id_);
  swap(campaign_id_, other->campaign_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCstrike15_v2_ClientRequestNewMission::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kXpProgressDataFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kAccountIdFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentXpFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentLevelFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kUpgradedDefidxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      xp_progress_data_(from.xp_progress_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upgraded_defidx_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(upgraded_defidx_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upgraded_defidx_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(upgraded_defidx_));
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  SharedDtor();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedDtor() {
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.base);
  return *internal_default_instance();
}


void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_progress_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upgraded_defidx_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(upgraded_defidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XpProgressData xp_progress_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xp_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_xp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_current_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_current_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upgraded_defidx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_upgraded_defidx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgraded_defidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  return false;
#undef DO_
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_progress_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->xp_progress_data(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 current_xp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_xp(), output);
  }

  // optional uint32 current_level = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_level(), output);
  }

  // optional uint32 upgraded_defidx = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upgraded_defidx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}

::google::protobuf::uint8* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_progress_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->xp_progress_data(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 current_xp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_level(), target);
  }

  // optional uint32 upgraded_defidx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upgraded_defidx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  return target;
}

size_t CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .XpProgressData xp_progress_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_progress_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_progress_data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 current_xp = 3;
    if (has_current_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_xp());
    }

    // optional uint32 current_level = 4;
    if (has_current_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_level());
    }

    // optional uint32 upgraded_defidx = 5;
    if (has_upgraded_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgraded_defidx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_xp_ = from.current_xp_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_level_ = from.current_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      upgraded_defidx_ = from.upgraded_defidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InternalSwap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  using std::swap;
  CastToBase(&xp_progress_data_)->InternalSwap(CastToBase(&other->xp_progress_data_));
  swap(account_id_, other->account_id_);
  swap(current_xp_, other->current_xp_);
  swap(current_level_, other->current_level_);
  swap(upgraded_defidx_, other->upgraded_defidx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_WatchInfoUsers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_WatchInfoUsers::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kWatchableMatchInfosFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kExtendedTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_WatchInfoUsers.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}
CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      watchable_match_infos_(from.watchable_match_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extended_timeout_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_timeout_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
}

CMsgGCCStrike15_v2_WatchInfoUsers::~CMsgGCCStrike15_v2_WatchInfoUsers() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_WatchInfoUsers)
  SharedDtor();
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedDtor() {
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_WatchInfoUsers::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_WatchInfoUsers& CMsgGCCStrike15_v2_WatchInfoUsers::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_WatchInfoUsers.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_WatchInfoUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  watchable_match_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extended_timeout_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WatchableMatchInfo watchable_match_infos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_watchable_match_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_timeout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_extended_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_WatchInfoUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_WatchInfoUsers)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watchable_match_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->watchable_match_infos(static_cast<int>(i)),
      output);
  }

  // optional uint32 extended_timeout = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extended_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_WatchInfoUsers)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_WatchInfoUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_ids_, target);

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watchable_match_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->watchable_match_infos(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 extended_timeout = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extended_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_WatchInfoUsers)
  return target;
}

size_t CMsgGCCStrike15_v2_WatchInfoUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->watchable_match_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->watchable_match_infos(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional uint32 extended_timeout = 5;
    if (has_extended_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_WatchInfoUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_WatchInfoUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_WatchInfoUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_WatchInfoUsers)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  watchable_match_infos_.MergeFrom(from.watchable_match_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_timeout_ = from.extended_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::Swap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_WatchInfoUsers::InternalSwap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  CastToBase(&watchable_match_infos_)->InternalSwap(CastToBase(&other->watchable_match_infos_));
  swap(request_id_, other->request_id_);
  swap(extended_timeout_, other->extended_timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_WatchInfoUsers::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kRequestIdDeprecatedFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kAccountIdsDeprecatedFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kRequestLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_ids__deprecated_(from.account_ids__deprecated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id__deprecated_, &from.request_id__deprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_level_) -
    reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedCtor() {
  ::memset(&request_id__deprecated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_level_) -
      reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::~CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids__deprecated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&request_id__deprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_level_) -
        reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id__deprecated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id__deprecated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id__deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids__deprecated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_ids__deprecated())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids__deprecated())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id__deprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id__deprecated(), output);
  }

  // repeated uint32 account_ids__deprecated = 2;
  for (int i = 0, n = this->account_ids__deprecated_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids__deprecated(i), output);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  // optional uint32 request_level = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->request_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id__deprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id__deprecated(), target);
  }

  // repeated uint32 account_ids__deprecated = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_ids__deprecated_, target);

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  // optional uint32 request_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->request_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestPlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids__deprecated = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids__deprecated_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids__deprecated_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 request_id__deprecated = 1;
    if (has_request_id__deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id__deprecated());
    }

    // optional uint32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 request_level = 4;
    if (has_request_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestPlayersProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientRequestPlayersProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids__deprecated_.MergeFrom(from.account_ids__deprecated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      request_id__deprecated_ = from.request_id__deprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      request_level_ = from.request_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Swap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InternalSwap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
  using std::swap;
  account_ids__deprecated_.InternalSwap(&other->account_ids__deprecated_);
  swap(request_id__deprecated_, other->request_id__deprecated_);
  swap(account_id_, other->account_id_);
  swap(request_level_, other->request_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestPlayersProfile::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayersProfile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_PlayersProfile::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_PlayersProfile::kAccountProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayersProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_PlayersProfile)
}
CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      account_profiles_(from.account_profiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayersProfile)
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedCtor() {
  request_id_ = 0u;
}

CMsgGCCStrike15_v2_PlayersProfile::~CMsgGCCStrike15_v2_PlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayersProfile)
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedDtor() {
}

void CMsgGCCStrike15_v2_PlayersProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayersProfile::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_PlayersProfile& CMsgGCCStrike15_v2_PlayersProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayersProfile.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_profiles_.Clear();
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_PlayersProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_PlayersProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_account_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_PlayersProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_PlayersProfile)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayersProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_PlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_profiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->account_profiles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_PlayersProfile)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayersProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayersProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_profiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->account_profiles(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayersProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->account_profiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->account_profiles(static_cast<int>(i)));
    }
  }

  // optional uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayersProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_PlayersProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayersProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayersProfile)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_profiles_.MergeFrom(from.account_profiles_);
  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayersProfile::Swap(CMsgGCCStrike15_v2_PlayersProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_PlayersProfile::InternalSwap(CMsgGCCStrike15_v2_PlayersProfile* other) {
  using std::swap;
  CastToBase(&account_profiles_)->InternalSwap(CastToBase(&other->account_profiles_));
  swap(request_id_, other->request_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayersProfile::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kSuspectidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kFractionidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptAimbotFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptWallhackFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptSpeedhackFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptTeamharmFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedDtor() {
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_caseid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suspectid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_suspectid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fractionid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fractionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_aimbot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rpt_aimbot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_aimbot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_wallhack = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rpt_wallhack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_wallhack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_speedhack = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rpt_speedhack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_speedhack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpt_teamharm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_rpt_teamharm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_teamharm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional uint32 suspectid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->suspectid(), output);
  }

  // optional uint32 fractionid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fractionid(), output);
  }

  // optional uint32 rpt_aimbot = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_aimbot(), output);
  }

  // optional uint32 rpt_wallhack = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rpt_wallhack(), output);
  }

  // optional uint32 rpt_speedhack = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpt_speedhack(), output);
  }

  // optional uint32 rpt_teamharm = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rpt_teamharm(), output);
  }

  // optional uint32 reason = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional uint32 suspectid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->suspectid(), target);
  }

  // optional uint32 fractionid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fractionid(), target);
  }

  // optional uint32 rpt_aimbot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rpt_teamharm(), target);
  }

  // optional uint32 reason = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 suspectid = 3;
    if (has_suspectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspectid());
    }

    // optional uint32 fractionid = 4;
    if (has_fractionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionid());
    }

    // optional uint32 rpt_aimbot = 5;
    if (has_rpt_aimbot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 6;
    if (has_rpt_wallhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 7;
    if (has_rpt_speedhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 8;
    if (has_rpt_teamharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_teamharm());
    }

    // optional uint32 reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      suspectid_ = from.suspectid_;
    }
    if (cached_has_bits & 0x00000004u) {
      fractionid_ = from.fractionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_aimbot_ = from.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_wallhack_ = from.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000020u) {
      rpt_speedhack_ = from.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000040u) {
      rpt_teamharm_ = from.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000080u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
  using std::swap;
  swap(caseid_, other->caseid_);
  swap(suspectid_, other->suspectid_);
  swap(fractionid_, other->fractionid_);
  swap(rpt_aimbot_, other->rpt_aimbot_);
  swap(rpt_wallhack_, other->rpt_wallhack_);
  swap(rpt_speedhack_, other->rpt_speedhack_);
  swap(rpt_teamharm_, other->rpt_teamharm_);
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kCaseurlFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kVerdictFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kTimestampFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kThrottlesecondsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kSuspectidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kFractionidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kNumroundsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kFractionroundsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kStreakconvictionsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caseurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caseurl()) {
    caseurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caseurl_);
  }
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedCtor() {
  caseurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedDtor() {
  caseurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    caseurl_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numrounds_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(numrounds_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&fractionrounds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&fractionrounds_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_caseid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string caseurl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caseurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caseurl().data(), static_cast<int>(this->caseurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 verdict = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_verdict();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verdict_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 throttleseconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_throttleseconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &throttleseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suspectid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_suspectid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fractionid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_fractionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numrounds = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_numrounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fractionrounds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_fractionrounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 streakconvictions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_streakconvictions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streakconvictions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional string caseurl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caseurl().data(), static_cast<int>(this->caseurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->caseurl(), output);
  }

  // optional uint32 verdict = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verdict(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional uint32 throttleseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->throttleseconds(), output);
  }

  // optional uint32 suspectid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suspectid(), output);
  }

  // optional uint32 fractionid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fractionid(), output);
  }

  // optional uint32 numrounds = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numrounds(), output);
  }

  // optional uint32 fractionrounds = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fractionrounds(), output);
  }

  // optional int32 streakconvictions = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->streakconvictions(), output);
  }

  // optional uint32 reason = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional string caseurl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caseurl().data(), static_cast<int>(this->caseurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caseurl(), target);
  }

  // optional uint32 verdict = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verdict(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional uint32 throttleseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->throttleseconds(), target);
  }

  // optional uint32 suspectid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suspectid(), target);
  }

  // optional uint32 fractionid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fractionid(), target);
  }

  // optional uint32 numrounds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numrounds(), target);
  }

  // optional uint32 fractionrounds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fractionrounds(), target);
  }

  // optional int32 streakconvictions = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->streakconvictions(), target);
  }

  // optional uint32 reason = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string caseurl = 2;
    if (has_caseurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caseurl());
    }

    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 verdict = 3;
    if (has_verdict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verdict());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 throttleseconds = 5;
    if (has_throttleseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->throttleseconds());
    }

    // optional uint32 suspectid = 6;
    if (has_suspectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspectid());
    }

    // optional uint32 fractionid = 7;
    if (has_fractionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionid());
    }

    // optional uint32 numrounds = 8;
    if (has_numrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numrounds());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 fractionrounds = 9;
    if (has_fractionrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionrounds());
    }

    // optional int32 streakconvictions = 10;
    if (has_streakconvictions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streakconvictions());
    }

    // optional uint32 reason = 11;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_caseurl();
      caseurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caseurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttleseconds_ = from.throttleseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      suspectid_ = from.suspectid_;
    }
    if (cached_has_bits & 0x00000040u) {
      fractionid_ = from.fractionid_;
    }
    if (cached_has_bits & 0x00000080u) {
      numrounds_ = from.numrounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      fractionrounds_ = from.fractionrounds_;
    }
    if (cached_has_bits & 0x00000200u) {
      streakconvictions_ = from.streakconvictions_;
    }
    if (cached_has_bits & 0x00000400u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
  using std::swap;
  caseurl_.Swap(&other->caseurl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(caseid_, other->caseid_);
  swap(verdict_, other->verdict_);
  swap(timestamp_, other->timestamp_);
  swap(throttleseconds_, other->throttleseconds_);
  swap(suspectid_, other->suspectid_);
  swap(fractionid_, other->fractionid_);
  swap(numrounds_, other->numrounds_);
  swap(fractionrounds_, other->fractionrounds_);
  swap(streakconvictions_, other->streakconvictions_);
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::kStatusidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusid_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusid_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedDtor() {
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statusid_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_caseid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 statusid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_statusid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional uint32 statusid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statusid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional uint32 statusid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->statusid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 statusid = 2;
    if (has_statusid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statusid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      statusid_ = from.statusid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
  using std::swap;
  swap(caseid_, other->caseid_);
  swap(statusid_, other->statusid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CClientHeaderOverwatchEvidence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientHeaderOverwatchEvidence::kAccountidFieldNumber;
const int CClientHeaderOverwatchEvidence::kCaseidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CClientHeaderOverwatchEvidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClientHeaderOverwatchEvidence)
}
CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CClientHeaderOverwatchEvidence)
}

void CClientHeaderOverwatchEvidence::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
}

CClientHeaderOverwatchEvidence::~CClientHeaderOverwatchEvidence() {
  // @@protoc_insertion_point(destructor:CClientHeaderOverwatchEvidence)
  SharedDtor();
}

void CClientHeaderOverwatchEvidence::SharedDtor() {
}

void CClientHeaderOverwatchEvidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CClientHeaderOverwatchEvidence::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientHeaderOverwatchEvidence& CClientHeaderOverwatchEvidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CClientHeaderOverwatchEvidence.base);
  return *internal_default_instance();
}


void CClientHeaderOverwatchEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientHeaderOverwatchEvidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientHeaderOverwatchEvidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClientHeaderOverwatchEvidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 caseid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_caseid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClientHeaderOverwatchEvidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClientHeaderOverwatchEvidence)
  return false;
#undef DO_
}

void CClientHeaderOverwatchEvidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClientHeaderOverwatchEvidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 caseid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->caseid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClientHeaderOverwatchEvidence)
}

::google::protobuf::uint8* CClientHeaderOverwatchEvidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CClientHeaderOverwatchEvidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 caseid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->caseid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientHeaderOverwatchEvidence)
  return target;
}

size_t CClientHeaderOverwatchEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientHeaderOverwatchEvidence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 caseid = 2;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientHeaderOverwatchEvidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientHeaderOverwatchEvidence)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientHeaderOverwatchEvidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientHeaderOverwatchEvidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientHeaderOverwatchEvidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientHeaderOverwatchEvidence)
    MergeFrom(*source);
  }
}

void CClientHeaderOverwatchEvidence::MergeFrom(const CClientHeaderOverwatchEvidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientHeaderOverwatchEvidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientHeaderOverwatchEvidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientHeaderOverwatchEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientHeaderOverwatchEvidence::CopyFrom(const CClientHeaderOverwatchEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientHeaderOverwatchEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHeaderOverwatchEvidence::IsInitialized() const {
  return true;
}

void CClientHeaderOverwatchEvidence::Swap(CClientHeaderOverwatchEvidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientHeaderOverwatchEvidence::InternalSwap(CClientHeaderOverwatchEvidence* other) {
  using std::swap;
  swap(caseid_, other->caseid_);
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CClientHeaderOverwatchEvidence::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientTextMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kIdFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}
CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgGCCStrike15_v2_GC2ClientTextMsg::~CMsgGCCStrike15_v2_GC2ClientTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTextMsg::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GC2ClientTextMsg& CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ClientTextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GC2ClientTextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientTextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientTextMsg)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::Swap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GC2ClientTextMsg::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
  using std::swap;
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ClientTextMsg::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCTextMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Client2GCTextMsg::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCTextMsg::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}
CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedCtor() {
  id_ = 0u;
}

CMsgGCCStrike15_v2_Client2GCTextMsg::~CMsgGCCStrike15_v2_Client2GCTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedDtor() {
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCTextMsg::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Client2GCTextMsg& CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes args = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Client2GCTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Client2GCTextMsg)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Client2GCTextMsg)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCTextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes args = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCTextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Client2GCTextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCTextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCTextMsg)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::Swap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Client2GCTextMsg::InternalSwap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
  using std::swap;
  args_.InternalSwap(CastToBase(&other->args_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCTextMsg::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_._instance.get_mutable()->serverinfo_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_._instance.get_mutable()->match_end_quest_data_ = const_cast< ::CMsgGC_ServerQuestUpdateData*>(
      ::CMsgGC_ServerQuestUpdateData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchEndRunRewardDrops::kServerinfoFieldNumber;
const int CMsgGCCStrike15_v2_MatchEndRunRewardDrops::kMatchEndQuestDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_serverinfo()) {
    serverinfo_ = new ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(*from.serverinfo_);
  } else {
    serverinfo_ = NULL;
  }
  if (from.has_match_end_quest_data()) {
    match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData(*from.match_end_quest_data_);
  } else {
    match_end_quest_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedCtor() {
  ::memset(&serverinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_end_quest_data_) -
      reinterpret_cast<char*>(&serverinfo_)) + sizeof(match_end_quest_data_));
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::~CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedDtor() {
  if (this != internal_default_instance()) delete serverinfo_;
  if (this != internal_default_instance()) delete match_end_quest_data_;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(serverinfo_ != NULL);
      serverinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(match_end_quest_data_ != NULL);
      match_end_quest_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_end_quest_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_serverinfo(), output);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_match_end_quest_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_serverinfo(), deterministic, target);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_match_end_quest_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRunRewardDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverinfo_);
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
    if (has_match_end_quest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_end_quest_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchEndRunRewardDrops>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_serverinfo()->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(from.serverinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(from.match_end_quest_data());
    }
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Swap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InternalSwap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
  using std::swap;
  swap(serverinfo_, other->serverinfo_);
  swap(match_end_quest_data_, other->match_end_quest_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchEndRunRewardDrops::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconItemPreviewDataBlock_Sticker::kSlotFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kStickerIdFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kWearFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kScaleFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kRotationFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kTintIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock_Sticker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEconItemPreviewDataBlock.Sticker)
}
CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&tint_id_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock.Sticker)
}

void CEconItemPreviewDataBlock_Sticker::SharedCtor() {
  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tint_id_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
}

CEconItemPreviewDataBlock_Sticker::~CEconItemPreviewDataBlock_Sticker() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock.Sticker)
  SharedDtor();
}

void CEconItemPreviewDataBlock_Sticker::SharedDtor() {
}

void CEconItemPreviewDataBlock_Sticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_Sticker::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock_Sticker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock_Sticker.base);
  return *internal_default_instance();
}


void CEconItemPreviewDataBlock_Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock.Sticker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_id_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEconItemPreviewDataBlock_Sticker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEconItemPreviewDataBlock.Sticker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sticker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sticker_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sticker_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wear = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_wear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rotation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tint_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tint_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEconItemPreviewDataBlock.Sticker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEconItemPreviewDataBlock.Sticker)
  return false;
#undef DO_
}

void CEconItemPreviewDataBlock_Sticker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEconItemPreviewDataBlock.Sticker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional uint32 sticker_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sticker_id(), output);
  }

  // optional float wear = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wear(), output);
  }

  // optional float scale = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }

  // optional float rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional uint32 tint_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tint_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEconItemPreviewDataBlock.Sticker)
}

::google::protobuf::uint8* CEconItemPreviewDataBlock_Sticker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock.Sticker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional uint32 sticker_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sticker_id(), target);
  }

  // optional float wear = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wear(), target);
  }

  // optional float scale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale(), target);
  }

  // optional float rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional uint32 tint_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tint_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock.Sticker)
  return target;
}

size_t CEconItemPreviewDataBlock_Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock.Sticker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 sticker_id = 2;
    if (has_sticker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sticker_id());
    }

    // optional float wear = 3;
    if (has_wear()) {
      total_size += 1 + 4;
    }

    // optional float scale = 4;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional uint32 tint_id = 6;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock_Sticker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEconItemPreviewDataBlock_Sticker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock.Sticker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock.Sticker)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const CEconItemPreviewDataBlock_Sticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      sticker_id_ = from.sticker_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      wear_ = from.wear_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000020u) {
      tint_id_ = from.tint_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const CEconItemPreviewDataBlock_Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock_Sticker::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock_Sticker::Swap(CEconItemPreviewDataBlock_Sticker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconItemPreviewDataBlock_Sticker::InternalSwap(CEconItemPreviewDataBlock_Sticker* other) {
  using std::swap;
  swap(slot_, other->slot_);
  swap(sticker_id_, other->sticker_id_);
  swap(wear_, other->wear_);
  swap(scale_, other->scale_);
  swap(rotation_, other->rotation_);
  swap(tint_id_, other->tint_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CEconItemPreviewDataBlock_Sticker::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconItemPreviewDataBlock::kAccountidFieldNumber;
const int CEconItemPreviewDataBlock::kItemidFieldNumber;
const int CEconItemPreviewDataBlock::kDefindexFieldNumber;
const int CEconItemPreviewDataBlock::kPaintindexFieldNumber;
const int CEconItemPreviewDataBlock::kRarityFieldNumber;
const int CEconItemPreviewDataBlock::kQualityFieldNumber;
const int CEconItemPreviewDataBlock::kPaintwearFieldNumber;
const int CEconItemPreviewDataBlock::kPaintseedFieldNumber;
const int CEconItemPreviewDataBlock::kKilleaterscoretypeFieldNumber;
const int CEconItemPreviewDataBlock::kKilleatervalueFieldNumber;
const int CEconItemPreviewDataBlock::kCustomnameFieldNumber;
const int CEconItemPreviewDataBlock::kStickersFieldNumber;
const int CEconItemPreviewDataBlock::kInventoryFieldNumber;
const int CEconItemPreviewDataBlock::kOriginFieldNumber;
const int CEconItemPreviewDataBlock::kQuestidFieldNumber;
const int CEconItemPreviewDataBlock::kDropreasonFieldNumber;
const int CEconItemPreviewDataBlock::kMusicindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEconItemPreviewDataBlock)
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stickers_(from.stickers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  customname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_customname()) {
    customname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customname_);
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&musicindex_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(musicindex_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock)
}

void CEconItemPreviewDataBlock::SharedCtor() {
  customname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&musicindex_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(musicindex_));
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock)
  SharedDtor();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  customname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CEconItemPreviewDataBlock.base);
  return *internal_default_instance();
}


void CEconItemPreviewDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stickers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    customname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paintwear_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(paintwear_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&paintseed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&musicindex_) -
        reinterpret_cast<char*>(&paintseed_)) + sizeof(musicindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEconItemPreviewDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEconItemPreviewDataBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_defindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paintindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_paintindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rarity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rarity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paintwear = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_paintwear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintwear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paintseed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_paintseed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintseed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killeaterscoretype = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_killeaterscoretype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeaterscoretype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killeatervalue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_killeatervalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeatervalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string customname = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customname().data(), static_cast<int>(this->customname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CEconItemPreviewDataBlock.customname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stickers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inventory = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_inventory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 questid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_questid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dropreason = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_dropreason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 musicindex = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_musicindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEconItemPreviewDataBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEconItemPreviewDataBlock)
  return false;
#undef DO_
}

void CEconItemPreviewDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 defindex = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defindex(), output);
  }

  // optional uint32 paintindex = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paintindex(), output);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }

  // optional uint32 quality = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }

  // optional uint32 paintwear = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->paintwear(), output);
  }

  // optional uint32 paintseed = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paintseed(), output);
  }

  // optional uint32 killeaterscoretype = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->killeaterscoretype(), output);
  }

  // optional uint32 killeatervalue = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killeatervalue(), output);
  }

  // optional string customname = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customname().data(), static_cast<int>(this->customname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CEconItemPreviewDataBlock.customname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->customname(), output);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stickers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->stickers(static_cast<int>(i)),
      output);
  }

  // optional uint32 inventory = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->inventory(), output);
  }

  // optional uint32 origin = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->origin(), output);
  }

  // optional uint32 questid = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->questid(), output);
  }

  // optional uint32 dropreason = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dropreason(), output);
  }

  // optional uint32 musicindex = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->musicindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEconItemPreviewDataBlock)
}

::google::protobuf::uint8* CEconItemPreviewDataBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 defindex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defindex(), target);
  }

  // optional uint32 paintindex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paintindex(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }

  // optional uint32 quality = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quality(), target);
  }

  // optional uint32 paintwear = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->paintwear(), target);
  }

  // optional uint32 paintseed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paintseed(), target);
  }

  // optional uint32 killeaterscoretype = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->killeaterscoretype(), target);
  }

  // optional uint32 killeatervalue = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killeatervalue(), target);
  }

  // optional string customname = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customname().data(), static_cast<int>(this->customname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CEconItemPreviewDataBlock.customname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->customname(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stickers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->stickers(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 inventory = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->inventory(), target);
  }

  // optional uint32 origin = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->origin(), target);
  }

  // optional uint32 questid = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->questid(), target);
  }

  // optional uint32 dropreason = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dropreason(), target);
  }

  // optional uint32 musicindex = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->musicindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock)
  return target;
}

size_t CEconItemPreviewDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->stickers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stickers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string customname = 11;
    if (has_customname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customname());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 defindex = 3;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

    // optional uint32 paintindex = 4;
    if (has_paintindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintindex());
    }

    // optional uint32 rarity = 5;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }

    // optional uint32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 paintwear = 7;
    if (has_paintwear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintwear());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 paintseed = 8;
    if (has_paintseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintseed());
    }

    // optional uint32 killeaterscoretype = 9;
    if (has_killeaterscoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeaterscoretype());
    }

    // optional uint32 killeatervalue = 10;
    if (has_killeatervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeatervalue());
    }

    // optional uint32 inventory = 13;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 origin = 14;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // optional uint32 questid = 15;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 dropreason = 16;
    if (has_dropreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropreason());
    }

    // optional uint32 musicindex = 17;
    if (has_musicindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musicindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEconItemPreviewDataBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stickers_.MergeFrom(from.stickers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_customname();
      customname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customname_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      paintindex_ = from.paintindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000040u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      paintwear_ = from.paintwear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      paintseed_ = from.paintseed_;
    }
    if (cached_has_bits & 0x00000200u) {
      killeaterscoretype_ = from.killeaterscoretype_;
    }
    if (cached_has_bits & 0x00000400u) {
      killeatervalue_ = from.killeatervalue_;
    }
    if (cached_has_bits & 0x00000800u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00001000u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00002000u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00004000u) {
      dropreason_ = from.dropreason_;
    }
    if (cached_has_bits & 0x00008000u) {
      musicindex_ = from.musicindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEconItemPreviewDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock::Swap(CEconItemPreviewDataBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconItemPreviewDataBlock::InternalSwap(CEconItemPreviewDataBlock* other) {
  using std::swap;
  CastToBase(&stickers_)->InternalSwap(CastToBase(&other->stickers_));
  customname_.Swap(&other->customname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemid_, other->itemid_);
  swap(accountid_, other->accountid_);
  swap(defindex_, other->defindex_);
  swap(paintindex_, other->paintindex_);
  swap(rarity_, other->rarity_);
  swap(quality_, other->quality_);
  swap(paintwear_, other->paintwear_);
  swap(paintseed_, other->paintseed_);
  swap(killeaterscoretype_, other->killeaterscoretype_);
  swap(killeatervalue_, other->killeatervalue_);
  swap(inventory_, other->inventory_);
  swap(origin_, other->origin_);
  swap(questid_, other->questid_);
  swap(dropreason_, other->dropreason_);
  swap(musicindex_, other->musicindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::kIteminfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedCtor() {
  iteminfo_ = NULL;
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedDtor() {
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != NULL);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_iteminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_iteminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (has_iteminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_iteminfo()) {
    mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Swap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InternalSwap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
  using std::swap;
  swap(iteminfo_, other->iteminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgItemAcknowledged::InitAsDefaultInstance() {
  ::_CMsgItemAcknowledged_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgItemAcknowledged::kIteminfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgItemAcknowledged::CMsgItemAcknowledged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgItemAcknowledged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged)
}

void CMsgItemAcknowledged::SharedCtor() {
  iteminfo_ = NULL;
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged)
  SharedDtor();
}

void CMsgItemAcknowledged::SharedDtor() {
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgItemAcknowledged::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgItemAcknowledged.base);
  return *internal_default_instance();
}


void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != NULL);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgItemAcknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgItemAcknowledged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgItemAcknowledged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgItemAcknowledged)
  return false;
#undef DO_
}

void CMsgItemAcknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iteminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgItemAcknowledged)
}

::google::protobuf::uint8* CMsgItemAcknowledged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iteminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgItemAcknowledged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemAcknowledged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemAcknowledged)
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_iteminfo()) {
    mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
  }
}

void CMsgItemAcknowledged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::Swap(CMsgItemAcknowledged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  swap(iteminfo_, other->iteminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgItemAcknowledged::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamSFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamAFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamDFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param_s_, &from.param_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_m_) -
    reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
  ::memset(&param_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_m_) -
      reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&param_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_m_) -
        reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 param_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_param_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_param_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_param_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_m = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_param_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->param_s(), output);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_a(), output);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param_d(), output);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->param_m(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->param_m(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 param_s = 1;
    if (has_param_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_s());
    }

    // optional uint64 param_a = 2;
    if (has_param_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_a());
    }

    // optional uint64 param_d = 3;
    if (has_param_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_d());
    }

    // optional uint64 param_m = 4;
    if (has_param_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_m());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      param_s_ = from.param_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_a_ = from.param_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      param_d_ = from.param_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_m_ = from.param_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
  using std::swap;
  swap(param_s_, other->param_s_);
  swap(param_a_, other->param_a_);
  swap(param_d_, other->param_d_);
  swap(param_m_, other->param_m_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::kIteminfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
  iteminfo_ = NULL;
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != NULL);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iteminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iteminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_iteminfo()) {
    mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
  using std::swap;
  swap(iteminfo_, other->iteminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kDefindexFieldNumber;
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kAccountidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
}
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      accountids_(from.accountids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&defindex_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(defindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defindex_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(defindex_));
}

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::~CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  SharedDtor();
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SharedDtor() {
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defindex_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(defindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_defindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 accountids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_accountids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 defindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defindex(), output);
  }

  // repeated uint32 accountids = 3;
  for (int i = 0, n = this->accountids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->accountids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 defindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defindex(), target);
  }

  // repeated uint32 accountids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->accountids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  return target;
}

size_t CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 accountids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->accountids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->accountids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 defindex = 2;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergeFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accountids_.MergeFrom(from.accountids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      defindex_ = from.defindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::Swap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::InternalSwap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other) {
  using std::swap;
  accountids_.InternalSwap(&other->accountids_);
  swap(match_id_, other->match_id_);
  swap(defindex_, other->defindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}
CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedCtor() {
}

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::~CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::Swap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}
CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accountid()) {
    set_accountid(from.accountid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Swap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}
CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accountid()) {
    set_accountid(from.accountid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Swap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchListRequestTournamentGames::kEventidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}
CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedCtor() {
  eventid_ = 0;
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::~CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestTournamentGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 eventid = 1;
  if (has_eventid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestTournamentGames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchListRequestTournamentGames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventid()) {
    set_eventid(from.eventid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Swap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
  using std::swap;
  swap(eventid_, other->eventid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestTournamentGames::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kMatchidFieldNumber;
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kOutcomeidFieldNumber;
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}
CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedCtor() {
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedDtor() {
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_matchid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 outcomeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_outcomeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outcomeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // optional uint64 outcomeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->outcomeid(), output);
  }

  // optional uint32 token = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // optional uint64 outcomeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->outcomeid(), target);
  }

  // optional uint32 token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint64 outcomeid = 2;
    if (has_outcomeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outcomeid());
    }

    // optional uint32 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      outcomeid_ = from.outcomeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Swap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
  using std::swap;
  swap(matchid_, other->matchid_);
  swap(outcomeid_, other->outcomeid_);
  swap(token_, other->token_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_MatchInfo::InitAsDefaultInstance() {
  ::_CDataGCCStrike15_v2_MatchInfo_default_instance_._instance.get_mutable()->watchablematchinfo_ = const_cast< ::WatchableMatchInfo*>(
      ::WatchableMatchInfo::internal_default_instance());
  ::_CDataGCCStrike15_v2_MatchInfo_default_instance_._instance.get_mutable()->roundstats_legacy_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_MatchInfo::kMatchidFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kMatchtimeFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kWatchablematchinfoFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kRoundstatsLegacyFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kRoundstatsallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_MatchInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_MatchInfo)
}
CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roundstatsall_(from.roundstatsall_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_watchablematchinfo()) {
    watchablematchinfo_ = new ::WatchableMatchInfo(*from.watchablematchinfo_);
  } else {
    watchablematchinfo_ = NULL;
  }
  if (from.has_roundstats_legacy()) {
    roundstats_legacy_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(*from.roundstats_legacy_);
  } else {
    roundstats_legacy_ = NULL;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchtime_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(matchtime_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_MatchInfo)
}

void CDataGCCStrike15_v2_MatchInfo::SharedCtor() {
  ::memset(&watchablematchinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchtime_) -
      reinterpret_cast<char*>(&watchablematchinfo_)) + sizeof(matchtime_));
}

CDataGCCStrike15_v2_MatchInfo::~CDataGCCStrike15_v2_MatchInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_MatchInfo)
  SharedDtor();
}

void CDataGCCStrike15_v2_MatchInfo::SharedDtor() {
  if (this != internal_default_instance()) delete watchablematchinfo_;
  if (this != internal_default_instance()) delete roundstats_legacy_;
}

void CDataGCCStrike15_v2_MatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_MatchInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_MatchInfo& CDataGCCStrike15_v2_MatchInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_MatchInfo.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_MatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roundstatsall_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(watchablematchinfo_ != NULL);
      watchablematchinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(roundstats_legacy_ != NULL);
      roundstats_legacy_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchtime_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(matchtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_MatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_MatchInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_matchid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_matchtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WatchableMatchInfo watchablematchinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_watchablematchinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roundstats_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roundstatsall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_MatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_MatchInfo)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_MatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_MatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // optional uint32 matchtime = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchtime(), output);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_watchablematchinfo(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_roundstats_legacy(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roundstatsall_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roundstatsall(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_MatchInfo)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_MatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_MatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // optional uint32 matchtime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchtime(), target);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_watchablematchinfo(), deterministic, target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_roundstats_legacy(), deterministic, target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roundstatsall_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roundstatsall(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_MatchInfo)
  return target;
}

size_t CDataGCCStrike15_v2_MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_MatchInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roundstatsall_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roundstatsall(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .WatchableMatchInfo watchablematchinfo = 3;
    if (has_watchablematchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *watchablematchinfo_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
    if (has_roundstats_legacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roundstats_legacy_);
    }

    // optional uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 matchtime = 2;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_MatchInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_MatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_MatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_MatchInfo)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roundstatsall_.MergeFrom(from.roundstatsall_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_watchablematchinfo()->::WatchableMatchInfo::MergeFrom(from.watchablematchinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_roundstats_legacy()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(from.roundstats_legacy());
    }
    if (cached_has_bits & 0x00000004u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchtime_ = from.matchtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_MatchInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_MatchInfo::Swap(CDataGCCStrike15_v2_MatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_MatchInfo::InternalSwap(CDataGCCStrike15_v2_MatchInfo* other) {
  using std::swap;
  CastToBase(&roundstatsall_)->InternalSwap(CastToBase(&other->roundstatsall_));
  swap(watchablematchinfo_, other->watchablematchinfo_);
  swap(roundstats_legacy_, other->roundstats_legacy_);
  swap(matchid_, other->matchid_);
  swap(matchtime_, other->matchtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_MatchInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroupTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentGroupTeam::kTeamIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroupTeam::kScoreFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroupTeam::kCorrectpickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroupTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}
CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correctpick_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correctpick_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
}

CDataGCCStrike15_v2_TournamentGroupTeam::~CDataGCCStrike15_v2_TournamentGroupTeam() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroupTeam)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedDtor() {
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroupTeam::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroupTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroupTeam.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroupTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correctpick_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool correctpick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_correctpick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correctpick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentGroupTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentGroupTeam)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional bool correctpick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correctpick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentGroupTeam)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroupTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional bool correctpick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correctpick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroupTeam)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroupTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool correctpick = 3;
    if (has_correctpick()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroupTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentGroupTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroupTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroupTeam)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      correctpick_ = from.correctpick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::Swap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentGroupTeam::InternalSwap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(score_, other->score_);
  swap(correctpick_, other->correctpick_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroupTeam::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroup_Picks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentGroup_Picks::kPickidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}
CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pickids_(from.pickids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedCtor() {
}

CDataGCCStrike15_v2_TournamentGroup_Picks::~CDataGCCStrike15_v2_TournamentGroup_Picks() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedDtor() {
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup_Picks::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroup_Picks::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pickids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_pickids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pickids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentGroup.Picks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentGroup.Picks)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  for (int i = 0, n = this->pickids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pickids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentGroup.Picks)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroup_Picks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->pickids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup.Picks)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup_Picks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 pickids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pickids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pickids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup_Picks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentGroup_Picks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroup.Picks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroup.Picks)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pickids_.MergeFrom(from.pickids_);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::Swap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentGroup_Picks::InternalSwap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
  using std::swap;
  pickids_.InternalSwap(&other->pickids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroup_Picks::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentGroup::kGroupidFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kNameFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kDescFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicksDeprecatedFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kTeamsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kStageIdsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicklockuntiltimeFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPickableteamsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPointsPerPickFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentGroup)
}
CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      stage_ids_(from.stage_ids_),
      picks_(from.picks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_per_pick_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup)
}

void CDataGCCStrike15_v2_TournamentGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_per_pick_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
}

CDataGCCStrike15_v2_TournamentGroup::~CDataGCCStrike15_v2_TournamentGroup() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDataGCCStrike15_v2_TournamentGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentGroup.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  stage_ids_.Clear();
  picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_per_pick_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataGCCStrike15_v2_TournamentGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataGCCStrike15_v2_TournamentGroup.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 picks__deprecated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_picks__deprecated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &picks__deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stage_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_stage_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stage_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 picklockuntiltime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_picklockuntiltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &picklockuntiltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pickableteams = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pickableteams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickableteams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_per_pick = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_points_per_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_per_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentGroup)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // optional uint32 picks__deprecated = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->picks__deprecated(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated int32 stage_ids = 6;
  for (int i = 0, n = this->stage_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->stage_ids(i), output);
  }

  // optional uint32 picklockuntiltime = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->picklockuntiltime(), output);
  }

  // optional uint32 pickableteams = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pickableteams(), output);
  }

  // optional uint32 points_per_pick = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->points_per_pick(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->picks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentGroup)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint32 picks__deprecated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->picks__deprecated(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->teams(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 stage_ids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->stage_ids_, target);

  // optional uint32 picklockuntiltime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->picklockuntiltime(), target);
  }

  // optional uint32 pickableteams = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pickableteams(), target);
  }

  // optional uint32 points_per_pick = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->points_per_pick(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->picks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated int32 stage_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stage_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stage_ids_size());
    total_size += data_size;
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 picks__deprecated = 4;
    if (has_picks__deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->picks__deprecated());
    }

    // optional uint32 picklockuntiltime = 7;
    if (has_picklockuntiltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->picklockuntiltime());
    }

    // optional uint32 pickableteams = 8;
    if (has_pickableteams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pickableteams());
    }

    // optional uint32 points_per_pick = 9;
    if (has_points_per_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_per_pick());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroup)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  stage_ids_.MergeFrom(from.stage_ids_);
  picks_.MergeFrom(from.picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000008u) {
      picks__deprecated_ = from.picks__deprecated_;
    }
    if (cached_has_bits & 0x00000010u) {
      picklockuntiltime_ = from.picklockuntiltime_;
    }
    if (cached_has_bits & 0x00000020u) {
      pickableteams_ = from.pickableteams_;
    }
    if (cached_has_bits & 0x00000040u) {
      points_per_pick_ = from.points_per_pick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup::Swap(CDataGCCStrike15_v2_TournamentGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentGroup::InternalSwap(CDataGCCStrike15_v2_TournamentGroup* other) {
  using std::swap;
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  stage_ids_.InternalSwap(&other->stage_ids_);
  CastToBase(&picks_)->InternalSwap(CastToBase(&other->picks_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groupid_, other->groupid_);
  swap(picks__deprecated_, other->picks__deprecated_);
  swap(picklockuntiltime_, other->picklockuntiltime_);
  swap(pickableteams_, other->pickableteams_);
  swap(points_per_pick_, other->points_per_pick_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroup::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentSection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentSection::kSectionidFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kNameFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kDescFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentSection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentSection)
}
CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  sectionid_ = from.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentSection)
}

void CDataGCCStrike15_v2_TournamentSection::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectionid_ = 0u;
}

CDataGCCStrike15_v2_TournamentSection::~CDataGCCStrike15_v2_TournamentSection() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentSection)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentSection::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDataGCCStrike15_v2_TournamentSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentSection::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentSection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentSection.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentSection::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  sectionid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentSection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sectionid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sectionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataGCCStrike15_v2_TournamentSection.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDataGCCStrike15_v2_TournamentSection.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentSection)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sectionid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sectionid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentSection)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sectionid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sectionid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentSection)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 sectionid = 1;
    if (has_sectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sectionid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentSection)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentSection)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      sectionid_ = from.sectionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentSection::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentSection::Swap(CDataGCCStrike15_v2_TournamentSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentSection::InternalSwap(CDataGCCStrike15_v2_TournamentSection* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sectionid_, other->sectionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentSection::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentInfo::InitAsDefaultInstance() {
  ::_CDataGCCStrike15_v2_TournamentInfo_default_instance_._instance.get_mutable()->tournament_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataGCCStrike15_v2_TournamentInfo::kSectionsFieldNumber;
const int CDataGCCStrike15_v2_TournamentInfo::kTournamentEventFieldNumber;
const int CDataGCCStrike15_v2_TournamentInfo::kTournamentTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDataGCCStrike15_v2_TournamentInfo)
}
CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sections_(from.sections_),
      tournament_teams_(from.tournament_teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tournament_event()) {
    tournament_event_ = new ::TournamentEvent(*from.tournament_event_);
  } else {
    tournament_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentInfo)
}

void CDataGCCStrike15_v2_TournamentInfo::SharedCtor() {
  tournament_event_ = NULL;
}

CDataGCCStrike15_v2_TournamentInfo::~CDataGCCStrike15_v2_TournamentInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentInfo)
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentInfo::SharedDtor() {
  if (this != internal_default_instance()) delete tournament_event_;
}

void CDataGCCStrike15_v2_TournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataGCCStrike15_v2_TournamentInfo& CDataGCCStrike15_v2_TournamentInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CDataGCCStrike15_v2_TournamentInfo.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sections_.Clear();
  tournament_teams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tournament_event_ != NULL);
    tournament_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataGCCStrike15_v2_TournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDataGCCStrike15_v2_TournamentInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TournamentEvent tournament_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tournament_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentTeam tournament_teams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tournament_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDataGCCStrike15_v2_TournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDataGCCStrike15_v2_TournamentInfo)
  return false;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDataGCCStrike15_v2_TournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sections(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TournamentEvent tournament_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tournament_event(), output);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournament_teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tournament_teams(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDataGCCStrike15_v2_TournamentInfo)
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sections(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TournamentEvent tournament_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tournament_event(), deterministic, target);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournament_teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tournament_teams(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentInfo)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sections(static_cast<int>(i)));
    }
  }

  // repeated .TournamentTeam tournament_teams = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tournament_teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tournament_teams(static_cast<int>(i)));
    }
  }

  // optional .TournamentEvent tournament_event = 2;
  if (has_tournament_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tournament_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataGCCStrike15_v2_TournamentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentInfo)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  if (from.has_tournament_event()) {
    mutable_tournament_event()->::TournamentEvent::MergeFrom(from.tournament_event());
  }
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentInfo::Swap(CDataGCCStrike15_v2_TournamentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataGCCStrike15_v2_TournamentInfo::InternalSwap(CDataGCCStrike15_v2_TournamentInfo* other) {
  using std::swap;
  CastToBase(&sections_)->InternalSwap(CastToBase(&other->sections_));
  CastToBase(&tournament_teams_)->InternalSwap(CastToBase(&other->tournament_teams_));
  swap(tournament_event_, other->tournament_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchList::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchList_default_instance_._instance.get_mutable()->tournamentinfo_ = const_cast< ::CDataGCCStrike15_v2_TournamentInfo*>(
      ::CDataGCCStrike15_v2_TournamentInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_MatchList::kMsgrequestidFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kServertimeFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kMatchesFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kStreamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kTournamentinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_MatchList)
}
CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      matches_(from.matches_),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tournamentinfo()) {
    tournamentinfo_ = new ::CDataGCCStrike15_v2_TournamentInfo(*from.tournamentinfo_);
  } else {
    tournamentinfo_ = NULL;
  }
  ::memcpy(&msgrequestid_, &from.msgrequestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&msgrequestid_)) + sizeof(servertime_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchList)
}

void CMsgGCCStrike15_v2_MatchList::SharedCtor() {
  ::memset(&tournamentinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertime_) -
      reinterpret_cast<char*>(&tournamentinfo_)) + sizeof(servertime_));
}

CMsgGCCStrike15_v2_MatchList::~CMsgGCCStrike15_v2_MatchList() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchList)
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchList::SharedDtor() {
  if (this != internal_default_instance()) delete tournamentinfo_;
}

void CMsgGCCStrike15_v2_MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchList::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_MatchList& CMsgGCCStrike15_v2_MatchList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_MatchList.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  streams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tournamentinfo_ != NULL);
    tournamentinfo_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&msgrequestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&servertime_) -
        reinterpret_cast<char*>(&msgrequestid_)) + sizeof(servertime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_MatchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_MatchList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgrequestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msgrequestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgrequestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 servertime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TournamentTeam streams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_MatchList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_MatchList)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgrequestid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgrequestid(), output);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 servertime = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertime(), output);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->matches(static_cast<int>(i)),
      output);
  }

  // repeated .TournamentTeam streams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->streams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->streams(static_cast<int>(i)),
      output);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_tournamentinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_MatchList)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgrequestid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgrequestid(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 servertime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertime(), target);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->matches(static_cast<int>(i)), deterministic, target);
  }

  // repeated .TournamentTeam streams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->streams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->streams(static_cast<int>(i)), deterministic, target);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_tournamentinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchList)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  // repeated .TournamentTeam streams = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->streams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->streams(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tournamentinfo_);
    }

    // optional uint32 msgrequestid = 1;
    if (has_msgrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgrequestid());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_MatchList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchList)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const CMsgGCCStrike15_v2_MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  streams_.MergeFrom(from.streams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tournamentinfo()->::CDataGCCStrike15_v2_TournamentInfo::MergeFrom(from.tournamentinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      msgrequestid_ = from.msgrequestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      servertime_ = from.servertime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const CMsgGCCStrike15_v2_MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchList::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchList::Swap(CMsgGCCStrike15_v2_MatchList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_MatchList::InternalSwap(CMsgGCCStrike15_v2_MatchList* other) {
  using std::swap;
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  CastToBase(&streams_)->InternalSwap(CastToBase(&other->streams_));
  swap(tournamentinfo_, other->tournamentinfo_);
  swap(msgrequestid_, other->msgrequestid_);
  swap(accountid_, other->accountid_);
  swap(servertime_, other->servertime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchList::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kSectionidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kGroupidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kIndexFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kTeamidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kItemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}
CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sectionid_, &from.sectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedCtor() {
  ::memset(&sectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedDtor() {
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&sectionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sectionid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sectionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sectionid(), output);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // optional int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional int32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional uint64 itemid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sectionid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // optional int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional int32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional uint64 itemid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 sectionid = 1;
    if (has_sectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sectionid());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional uint64 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sectionid_ = from.sectionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Swap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InternalSwap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
  using std::swap;
  swap(sectionid_, other->sectionid_);
  swap(groupid_, other->groupid_);
  swap(index_, other->index_);
  swap(teamid_, other->teamid_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Predictions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Predictions::kEventIdFieldNumber;
const int CMsgGCCStrike15_v2_Predictions::kGroupMatchTeamPicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Predictions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Predictions)
}
CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      group_match_team_picks_(from.group_match_team_picks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions)
}

void CMsgGCCStrike15_v2_Predictions::SharedCtor() {
  event_id_ = 0u;
}

CMsgGCCStrike15_v2_Predictions::~CMsgGCCStrike15_v2_Predictions() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Predictions::SharedDtor() {
}

void CMsgGCCStrike15_v2_Predictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Predictions& CMsgGCCStrike15_v2_Predictions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Predictions.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Predictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_match_team_picks_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Predictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Predictions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_group_match_team_picks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Predictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Predictions)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Predictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Predictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_match_team_picks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->group_match_team_picks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Predictions)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Predictions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_match_team_picks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->group_match_team_picks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->group_match_team_picks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->group_match_team_picks(static_cast<int>(i)));
    }
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Predictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Predictions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Predictions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Predictions)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const CMsgGCCStrike15_v2_Predictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_match_team_picks_.MergeFrom(from.group_match_team_picks_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Predictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const CMsgGCCStrike15_v2_Predictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions::Swap(CMsgGCCStrike15_v2_Predictions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Predictions::InternalSwap(CMsgGCCStrike15_v2_Predictions* other) {
  using std::swap;
  CastToBase(&group_match_team_picks_)->InternalSwap(CastToBase(&other->group_match_team_picks_));
  swap(event_id_, other->event_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Predictions::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kPickFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kItemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}
CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot::~CMsgGCCStrike15_v2_Fantasy_FantasySlot() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedDtor() {
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasySlot::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 pick = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pick(), output);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy_FantasySlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 pick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pick(), target);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pick = 2;
    if (has_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pick());
    }

    // optional uint64 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasySlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Fantasy_FantasySlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      pick_ = from.pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Swap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(pick_, other->pick_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy_FantasySlot::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::kSectionidFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sectionid_ = from.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedCtor() {
  sectionid_ = 0;
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::~CMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedDtor() {
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  sectionid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sectionid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sectionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sectionid(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->slots(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sectionid(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->slots(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slots(static_cast<int>(i)));
    }
  }

  // optional int32 sectionid = 1;
  if (has_sectionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sectionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasyTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Fantasy_FantasyTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from.has_sectionid()) {
    set_sectionid(from.sectionid());
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Swap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
  using std::swap;
  CastToBase(&slots_)->InternalSwap(CastToBase(&other->slots_));
  swap(sectionid_, other->sectionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy_FantasyTeam::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Fantasy::kEventIdFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Fantasy)
}
CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy)
}

void CMsgGCCStrike15_v2_Fantasy::SharedCtor() {
  event_id_ = 0u;
}

CMsgGCCStrike15_v2_Fantasy::~CMsgGCCStrike15_v2_Fantasy() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy::SharedDtor() {
}

void CMsgGCCStrike15_v2_Fantasy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Fantasy& CMsgGCCStrike15_v2_Fantasy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Fantasy.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Fantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Fantasy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Fantasy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Fantasy)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Fantasy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->teams(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Fantasy)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->teams(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Fantasy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy::Swap(CMsgGCCStrike15_v2_Fantasy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Fantasy::InternalSwap(CMsgGCCStrike15_v2_Fantasy* other) {
  using std::swap;
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  swap(event_id_, other->event_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_String::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_String::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CAttribute_String.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_String& CAttribute_String::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CAttribute_String.base);
  return *internal_default_instance();
}


void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_String)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_String.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_String)
  return false;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_String)
}

::google::protobuf::uint8* CAttribute_String::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_String* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_String>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_String)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_String)
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_has_value();
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCReloadVersions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCReloadVersions::CMsgGCToGCReloadVersions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCToGCReloadVersions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCReloadVersions)
}
CMsgGCToGCReloadVersions::CMsgGCToGCReloadVersions(const CMsgGCToGCReloadVersions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCReloadVersions)
}

void CMsgGCToGCReloadVersions::SharedCtor() {
}

CMsgGCToGCReloadVersions::~CMsgGCToGCReloadVersions() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCReloadVersions)
  SharedDtor();
}

void CMsgGCToGCReloadVersions::SharedDtor() {
}

void CMsgGCToGCReloadVersions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCToGCReloadVersions::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCReloadVersions& CMsgGCToGCReloadVersions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCToGCReloadVersions.base);
  return *internal_default_instance();
}


void CMsgGCToGCReloadVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCReloadVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCReloadVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCReloadVersions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCReloadVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCReloadVersions)
  return false;
#undef DO_
}

void CMsgGCToGCReloadVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCReloadVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCReloadVersions)
}

::google::protobuf::uint8* CMsgGCToGCReloadVersions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCReloadVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCReloadVersions)
  return target;
}

size_t CMsgGCToGCReloadVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCReloadVersions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCReloadVersions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCReloadVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCReloadVersions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCReloadVersions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCReloadVersions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCReloadVersions)
    MergeFrom(*source);
  }
}

void CMsgGCToGCReloadVersions::MergeFrom(const CMsgGCToGCReloadVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCReloadVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCReloadVersions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCReloadVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCReloadVersions::CopyFrom(const CMsgGCToGCReloadVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCReloadVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCReloadVersions::IsInitialized() const {
  return true;
}

void CMsgGCToGCReloadVersions::Swap(CMsgGCToGCReloadVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCReloadVersions::InternalSwap(CMsgGCToGCReloadVersions* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCToGCReloadVersions::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgCStrike15Welcome::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCStrike15Welcome::kStoreItemHashFieldNumber;
const int CMsgCStrike15Welcome::kTimeplayedconsecutivelyFieldNumber;
const int CMsgCStrike15Welcome::kTimeFirstPlayedFieldNumber;
const int CMsgCStrike15Welcome::kLastTimePlayedFieldNumber;
const int CMsgCStrike15Welcome::kLastIpAddressFieldNumber;
const int CMsgCStrike15Welcome::kGscookieidFieldNumber;
const int CMsgCStrike15Welcome::kUniqueidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCStrike15Welcome::CMsgCStrike15Welcome()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgCStrike15Welcome.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCStrike15Welcome)
}
CMsgCStrike15Welcome::CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&store_item_hash_, &from.store_item_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&uniqueid_) -
    reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
  // @@protoc_insertion_point(copy_constructor:CMsgCStrike15Welcome)
}

void CMsgCStrike15Welcome::SharedCtor() {
  ::memset(&store_item_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniqueid_) -
      reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
}

CMsgCStrike15Welcome::~CMsgCStrike15Welcome() {
  // @@protoc_insertion_point(destructor:CMsgCStrike15Welcome)
  SharedDtor();
}

void CMsgCStrike15Welcome::SharedDtor() {
}

void CMsgCStrike15Welcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgCStrike15Welcome::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCStrike15Welcome& CMsgCStrike15Welcome::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgCStrike15Welcome.base);
  return *internal_default_instance();
}


void CMsgCStrike15Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCStrike15Welcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&store_item_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uniqueid_) -
        reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCStrike15Welcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCStrike15Welcome)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 store_item_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_store_item_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_item_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeplayedconsecutively = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeplayedconsecutively();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeplayedconsecutively_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_first_played = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_time_first_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_first_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_played = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_last_time_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ip_address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_last_ip_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gscookieid = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_gscookieid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gscookieid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uniqueid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_uniqueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCStrike15Welcome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCStrike15Welcome)
  return false;
#undef DO_
}

void CMsgCStrike15Welcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCStrike15Welcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 store_item_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->store_item_hash(), output);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeplayedconsecutively(), output);
  }

  // optional uint32 time_first_played = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_first_played(), output);
  }

  // optional uint32 last_time_played = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->last_time_played(), output);
  }

  // optional uint32 last_ip_address = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->last_ip_address(), output);
  }

  // optional uint64 gscookieid = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->gscookieid(), output);
  }

  // optional uint64 uniqueid = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->uniqueid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCStrike15Welcome)
}

::google::protobuf::uint8* CMsgCStrike15Welcome::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCStrike15Welcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 store_item_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->store_item_hash(), target);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeplayedconsecutively(), target);
  }

  // optional uint32 time_first_played = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_first_played(), target);
  }

  // optional uint32 last_time_played = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->last_time_played(), target);
  }

  // optional uint32 last_ip_address = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->last_ip_address(), target);
  }

  // optional uint64 gscookieid = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->gscookieid(), target);
  }

  // optional uint64 uniqueid = 19;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->uniqueid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCStrike15Welcome)
  return target;
}

size_t CMsgCStrike15Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCStrike15Welcome)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 store_item_hash = 5;
    if (has_store_item_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_item_hash());
    }

    // optional uint32 timeplayedconsecutively = 6;
    if (has_timeplayedconsecutively()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeplayedconsecutively());
    }

    // optional uint32 last_ip_address = 13;
    if (has_last_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ip_address());
    }

    // optional uint32 time_first_played = 10;
    if (has_time_first_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_first_played());
    }

    // optional uint32 last_time_played = 12;
    if (has_last_time_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_played());
    }

    // optional uint64 gscookieid = 18;
    if (has_gscookieid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gscookieid());
    }

    // optional uint64 uniqueid = 19;
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCStrike15Welcome::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCStrike15Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCStrike15Welcome* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCStrike15Welcome>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCStrike15Welcome)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCStrike15Welcome)
    MergeFrom(*source);
  }
}

void CMsgCStrike15Welcome::MergeFrom(const CMsgCStrike15Welcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCStrike15Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      store_item_hash_ = from.store_item_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeplayedconsecutively_ = from.timeplayedconsecutively_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_ip_address_ = from.last_ip_address_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_first_played_ = from.time_first_played_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_time_played_ = from.last_time_played_;
    }
    if (cached_has_bits & 0x00000020u) {
      gscookieid_ = from.gscookieid_;
    }
    if (cached_has_bits & 0x00000040u) {
      uniqueid_ = from.uniqueid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCStrike15Welcome::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCStrike15Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCStrike15Welcome::CopyFrom(const CMsgCStrike15Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCStrike15Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCStrike15Welcome::IsInitialized() const {
  return true;
}

void CMsgCStrike15Welcome::Swap(CMsgCStrike15Welcome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCStrike15Welcome::InternalSwap(CMsgCStrike15Welcome* other) {
  using std::swap;
  swap(store_item_hash_, other->store_item_hash_);
  swap(timeplayedconsecutively_, other->timeplayedconsecutively_);
  swap(last_ip_address_, other->last_ip_address_);
  swap(time_first_played_, other->time_first_played_);
  swap(last_time_played_, other->last_time_played_);
  swap(gscookieid_, other->gscookieid_);
  swap(uniqueid_, other->uniqueid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgCStrike15Welcome::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kValueNameFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kValueIntFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kServerAddrFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kServerPortFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kChokedBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      choked_blocks_(from.choked_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_name()) {
    value_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_name_);
  }
  ::memcpy(&value_int_, &from.value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedCtor() {
  value_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedDtor() {
  value_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choked_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&value_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_name().data(), static_cast<int>(this->value_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value_int = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_server_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string choked_blocks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_choked_blocks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choked_blocks(this->choked_blocks_size() - 1).data(),
            static_cast<int>(this->choked_blocks(this->choked_blocks_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_name().data(), static_cast<int>(this->value_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value_name(), output);
  }

  // optional int32 value_int = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value_int(), output);
  }

  // optional uint32 server_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_addr(), output);
  }

  // optional uint32 server_port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_port(), output);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0, n = this->choked_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choked_blocks(i).data(), static_cast<int>(this->choked_blocks(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->choked_blocks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_name().data(), static_cast<int>(this->value_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value_name(), target);
  }

  // optional int32 value_int = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value_int(), target);
  }

  // optional uint32 server_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_addr(), target);
  }

  // optional uint32 server_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_port(), target);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0, n = this->choked_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choked_blocks(i).data(), static_cast<int>(this->choked_blocks(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->choked_blocks(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string choked_blocks = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->choked_blocks_size());
  for (int i = 0, n = this->choked_blocks_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->choked_blocks(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string value_name = 1;
    if (has_value_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_name());
    }

    // optional int32 value_int = 2;
    if (has_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_int());
    }

    // optional uint32 server_addr = 3;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_addr());
    }

    // optional uint32 server_port = 4;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choked_blocks_.MergeFrom(from.choked_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value_name();
      value_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_int_ = from.value_int_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_addr_ = from.server_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Swap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
  using std::swap;
  choked_blocks_.InternalSwap(CastToBase(&other->choked_blocks_));
  value_name_.Swap(&other->value_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_int_, other->value_int_);
  swap(server_addr_, other->server_addr_);
  swap(server_port_, other->server_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kViewanglesFieldNumber;
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      viewangles_(from.viewangles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedDtor() {
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewangles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 viewangles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_viewangles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_viewangles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // repeated uint32 viewangles = 2;
  for (int i = 0, n = this->viewangles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->viewangles(i), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // repeated uint32 viewangles = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->viewangles_, target);

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 viewangles = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->viewangles_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->viewangles_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  viewangles_.MergeFrom(from.viewangles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Swap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
  using std::swap;
  viewangles_.InternalSwap(&other->viewangles_);
  swap(accountid_, other->accountid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}
CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedCtor() {
}

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::~CMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedDtor() {
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GiftsLeaderboardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardRequest::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardRequest::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::kGiftsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gifts_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gifts_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedDtor() {
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gifts_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gifts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gifts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gifts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 gifts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gifts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 gifts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gifts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 gifts = 2;
    if (has_gifts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gifts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gifts_ = from.gifts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(gifts_, other->gifts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kServertimeFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTimePeriodSecondsFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTotalGiftsGivenFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTotalGiversFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&servertime_, &from.servertime_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_givers_) -
    reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedCtor() {
  ::memset(&servertime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_givers_) -
      reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedDtor() {
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&servertime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_givers_) -
        reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 servertime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_period_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_period_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_period_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_gifts_given = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_total_gifts_given();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_gifts_given_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_givers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_total_givers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_givers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servertime(), output);
  }

  // optional uint32 time_period_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_period_seconds(), output);
  }

  // optional uint32 total_gifts_given = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_gifts_given(), output);
  }

  // optional uint32 total_givers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_givers(), output);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servertime(), target);
  }

  // optional uint32 time_period_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_period_seconds(), target);
  }

  // optional uint32 total_gifts_given = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_gifts_given(), target);
  }

  // optional uint32 total_givers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_givers(), target);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 servertime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

    // optional uint32 time_period_seconds = 2;
    if (has_time_period_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_period_seconds());
    }

    // optional uint32 total_gifts_given = 3;
    if (has_total_gifts_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_gifts_given());
    }

    // optional uint32 total_givers = 4;
    if (has_total_givers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_givers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      servertime_ = from.servertime_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_period_seconds_ = from.time_period_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_gifts_given_ = from.total_gifts_given_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_givers_ = from.total_givers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(servertime_, other->servertime_);
  swap(time_period_seconds_, other->time_period_seconds_);
  swap(total_gifts_given_, other->total_gifts_given_);
  swap(total_givers_, other->total_givers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientSubmitSurveyVote::kSurveyIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientSubmitSurveyVote::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}
CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&survey_id_, &from.survey_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_) -
    reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedCtor() {
  ::memset(&survey_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_) -
      reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::~CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&survey_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_) -
        reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_survey_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

  // optional uint32 vote = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vote(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->survey_id(), target);
  }

  // optional uint32 vote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vote(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientSubmitSurveyVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

    // optional uint32 vote = 2;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vote());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientSubmitSurveyVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientSubmitSurveyVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      survey_id_ = from.survey_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_ = from.vote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Swap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InternalSwap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
  using std::swap;
  swap(survey_id_, other->survey_id_);
  swap(vote_, other->vote_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientSubmitSurveyVote::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Server2GCClientValidate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Server2GCClientValidate::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}
CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_Server2GCClientValidate::~CMsgGCCStrike15_v2_Server2GCClientValidate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedDtor() {
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCClientValidate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Server2GCClientValidate& CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Server2GCClientValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Server2GCClientValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Server2GCClientValidate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Server2GCClientValidate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Server2GCClientValidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Server2GCClientValidate)
  return target;
}

size_t CMsgGCCStrike15_v2_Server2GCClientValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Server2GCClientValidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Server2GCClientValidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Server2GCClientValidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Server2GCClientValidate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accountid()) {
    set_accountid(from.accountid());
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::Swap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Server2GCClientValidate::InternalSwap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Server2GCClientValidate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPathFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kFileFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kCrcFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kHashFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kLenFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPackNumberFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPackFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
}
CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file()) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pack_file_id_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(pack_file_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pack_file_id_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(pack_file_id_));
}

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::~CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pack_file_id_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(pack_file_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 len = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pack_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_file_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pack_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // optional uint32 crc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc(), output);
  }

  // optional int32 hash = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hash(), output);
  }

  // optional int32 len = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->len(), output);
  }

  // optional int32 pack_number = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pack_number(), output);
  }

  // optional int32 pack_file_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pack_file_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // optional uint32 crc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc(), target);
  }

  // optional int32 hash = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hash(), target);
  }

  // optional int32 len = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->len(), target);
  }

  // optional int32 pack_number = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pack_number(), target);
  }

  // optional int32 pack_file_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pack_file_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  return target;
}

size_t CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 crc = 4;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional int32 hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hash());
    }

    // optional int32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional int32 pack_number = 7;
    if (has_pack_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_number());
    }

    // optional int32 pack_file_id = 8;
    if (has_pack_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergeFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file();
      file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000040u) {
      pack_number_ = from.pack_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      pack_file_id_ = from.pack_file_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CopyFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::Swap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::InternalSwap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(crc_, other->crc_);
  swap(hash_, other->hash_);
  swap(len_, other->len_);
  swap(pack_number_, other->pack_number_);
  swap(pack_file_id_, other->pack_file_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kEventidFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kStageidFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kTeamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      teamids_(from.teamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eventid_, &from.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedCtor() {
  ::memset(&eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::~CMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedDtor() {
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_type_) -
        reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eventid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stageid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 teamids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_teamids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional uint32 stageid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stageid(), output);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated uint32 teamids = 4;
  for (int i = 0, n = this->teamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->teamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional uint32 stageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stageid(), target);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated uint32 teamids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->teamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 teamids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->teamids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->teamids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 stageid = 2;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTournamentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GC2ClientTournamentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teamids_.MergeFrom(from.teamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_type_ = from.game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Swap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
  using std::swap;
  teamids_.InternalSwap(&other->teamids_);
  swap(eventid_, other->eventid_);
  swap(stageid_, other->stageid_);
  swap(game_type_, other->game_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ClientTournamentInfo::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOEconCoupon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconCoupon::kEntryidFieldNumber;
const int CSOEconCoupon::kDefidxFieldNumber;
const int CSOEconCoupon::kExpirationDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconCoupon::CSOEconCoupon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOEconCoupon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOEconCoupon)
}
CSOEconCoupon::CSOEconCoupon(const CSOEconCoupon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_date_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
  // @@protoc_insertion_point(copy_constructor:CSOEconCoupon)
}

void CSOEconCoupon::SharedCtor() {
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_date_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
}

CSOEconCoupon::~CSOEconCoupon() {
  // @@protoc_insertion_point(destructor:CSOEconCoupon)
  SharedDtor();
}

void CSOEconCoupon::SharedDtor() {
}

void CSOEconCoupon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSOEconCoupon::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconCoupon& CSOEconCoupon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOEconCoupon.base);
  return *internal_default_instance();
}


void CSOEconCoupon::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconCoupon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_date_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconCoupon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOEconCoupon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entryid = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 defidx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_defidx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 expiration_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_expiration_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOEconCoupon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOEconCoupon)
  return false;
#undef DO_
}

void CSOEconCoupon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOEconCoupon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entryid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entryid(), output);
  }

  // optional uint32 defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defidx(), output);
  }

  // optional fixed32 expiration_date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->expiration_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOEconCoupon)
}

::google::protobuf::uint8* CSOEconCoupon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconCoupon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entryid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entryid(), target);
  }

  // optional uint32 defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defidx(), target);
  }

  // optional fixed32 expiration_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->expiration_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconCoupon)
  return target;
}

size_t CSOEconCoupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconCoupon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 entryid = 1 [(.key_field) = true];
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

    // optional uint32 defidx = 2;
    if (has_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defidx());
    }

    // optional fixed32 expiration_date = 3;
    if (has_expiration_date()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconCoupon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconCoupon)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconCoupon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconCoupon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconCoupon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconCoupon)
    MergeFrom(*source);
  }
}

void CSOEconCoupon::MergeFrom(const CSOEconCoupon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconCoupon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      defidx_ = from.defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_date_ = from.expiration_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconCoupon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconCoupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconCoupon::CopyFrom(const CSOEconCoupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconCoupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconCoupon::IsInitialized() const {
  return true;
}

void CSOEconCoupon::Swap(CSOEconCoupon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconCoupon::InternalSwap(CSOEconCoupon* other) {
  using std::swap;
  swap(entryid_, other->entryid_);
  swap(defidx_, other->defidx_);
  swap(expiration_date_, other->expiration_date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSOEconCoupon::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOQuestProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOQuestProgress::kQuestidFieldNumber;
const int CSOQuestProgress::kPointsRemainingFieldNumber;
const int CSOQuestProgress::kBonusPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOQuestProgress::CSOQuestProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOQuestProgress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOQuestProgress)
}
CSOQuestProgress::CSOQuestProgress(const CSOQuestProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bonus_points_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
  // @@protoc_insertion_point(copy_constructor:CSOQuestProgress)
}

void CSOQuestProgress::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bonus_points_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
}

CSOQuestProgress::~CSOQuestProgress() {
  // @@protoc_insertion_point(destructor:CSOQuestProgress)
  SharedDtor();
}

void CSOQuestProgress::SharedDtor() {
}

void CSOQuestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSOQuestProgress::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOQuestProgress& CSOQuestProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOQuestProgress.base);
  return *internal_default_instance();
}


void CSOQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuestProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bonus_points_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOQuestProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOQuestProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_questid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_points_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bonus_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOQuestProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOQuestProgress)
  return false;
#undef DO_
}

void CSOQuestProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOQuestProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional uint32 points_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_remaining(), output);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOQuestProgress)
}

::google::protobuf::uint8* CSOQuestProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuestProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional uint32 points_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_remaining(), target);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuestProgress)
  return target;
}

size_t CSOQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuestProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 questid = 1 [(.key_field) = true];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 points_remaining = 2;
    if (has_points_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_remaining());
    }

    // optional uint32 bonus_points = 3;
    if (has_bonus_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOQuestProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOQuestProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOQuestProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOQuestProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOQuestProgress)
    MergeFrom(*source);
  }
}

void CSOQuestProgress::MergeFrom(const CSOQuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_remaining_ = from.points_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_points_ = from.bonus_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOQuestProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestProgress::CopyFrom(const CSOQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestProgress::IsInitialized() const {
  return true;
}

void CSOQuestProgress::Swap(CSOQuestProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOQuestProgress::InternalSwap(CSOQuestProgress* other) {
  using std::swap;
  swap(questid_, other->questid_);
  swap(points_remaining_, other->points_remaining_);
  swap(bonus_points_, other->bonus_points_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSOQuestProgress::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOPersonaDataPublic::InitAsDefaultInstance() {
  ::_CSOPersonaDataPublic_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOPersonaDataPublic::kPlayerLevelFieldNumber;
const int CSOPersonaDataPublic::kCommendationFieldNumber;
const int CSOPersonaDataPublic::kElevatedStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOPersonaDataPublic::CSOPersonaDataPublic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOPersonaDataPublic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOPersonaDataPublic)
}
CSOPersonaDataPublic::CSOPersonaDataPublic(const CSOPersonaDataPublic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = NULL;
  }
  ::memcpy(&player_level_, &from.player_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevated_state_) -
    reinterpret_cast<char*>(&player_level_)) + sizeof(elevated_state_));
  // @@protoc_insertion_point(copy_constructor:CSOPersonaDataPublic)
}

void CSOPersonaDataPublic::SharedCtor() {
  ::memset(&commendation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevated_state_) -
      reinterpret_cast<char*>(&commendation_)) + sizeof(elevated_state_));
}

CSOPersonaDataPublic::~CSOPersonaDataPublic() {
  // @@protoc_insertion_point(destructor:CSOPersonaDataPublic)
  SharedDtor();
}

void CSOPersonaDataPublic::SharedDtor() {
  if (this != internal_default_instance()) delete commendation_;
}

void CSOPersonaDataPublic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSOPersonaDataPublic::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOPersonaDataPublic& CSOPersonaDataPublic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CSOPersonaDataPublic.base);
  return *internal_default_instance();
}


void CSOPersonaDataPublic::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOPersonaDataPublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commendation_ != NULL);
    commendation_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&player_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elevated_state_) -
        reinterpret_cast<char*>(&player_level_)) + sizeof(elevated_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOPersonaDataPublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOPersonaDataPublic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerCommendationInfo commendation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commendation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool elevated_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_elevated_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elevated_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOPersonaDataPublic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOPersonaDataPublic)
  return false;
#undef DO_
}

void CSOPersonaDataPublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOPersonaDataPublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_level = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_level(), output);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_commendation(), output);
  }

  // optional bool elevated_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->elevated_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOPersonaDataPublic)
}

::google::protobuf::uint8* CSOPersonaDataPublic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOPersonaDataPublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_level = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_level(), target);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_commendation(), deterministic, target);
  }

  // optional bool elevated_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->elevated_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOPersonaDataPublic)
  return target;
}

size_t CSOPersonaDataPublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOPersonaDataPublic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .PlayerCommendationInfo commendation = 2;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional int32 player_level = 1;
    if (has_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional bool elevated_state = 3;
    if (has_elevated_state()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOPersonaDataPublic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOPersonaDataPublic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOPersonaDataPublic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOPersonaDataPublic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOPersonaDataPublic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOPersonaDataPublic)
    MergeFrom(*source);
  }
}

void CSOPersonaDataPublic::MergeFrom(const CSOPersonaDataPublic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOPersonaDataPublic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      player_level_ = from.player_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      elevated_state_ = from.elevated_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOPersonaDataPublic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOPersonaDataPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOPersonaDataPublic::CopyFrom(const CSOPersonaDataPublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOPersonaDataPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPersonaDataPublic::IsInitialized() const {
  return true;
}

void CSOPersonaDataPublic::Swap(CSOPersonaDataPublic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOPersonaDataPublic::InternalSwap(CSOPersonaDataPublic* other) {
  using std::swap;
  swap(commendation_, other->commendation_);
  swap(player_level_, other->player_level_);
  swap(elevated_state_, other->elevated_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSOPersonaDataPublic::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GlobalGame_Subscribe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GlobalGame_Subscribe::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Subscribe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GlobalGame_Subscribe)
}
CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_ = from.ticket_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Subscribe)
}

void CMsgGC_GlobalGame_Subscribe::SharedCtor() {
  ticket_ = GOOGLE_ULONGLONG(0);
}

CMsgGC_GlobalGame_Subscribe::~CMsgGC_GlobalGame_Subscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Subscribe)
  SharedDtor();
}

void CMsgGC_GlobalGame_Subscribe::SharedDtor() {
}

void CMsgGC_GlobalGame_Subscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Subscribe::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GlobalGame_Subscribe& CMsgGC_GlobalGame_Subscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Subscribe.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Subscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GlobalGame_Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GlobalGame_Subscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ticket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GlobalGame_Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GlobalGame_Subscribe)
  return false;
#undef DO_
}

void CMsgGC_GlobalGame_Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GlobalGame_Subscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GlobalGame_Subscribe)
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Subscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Subscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Subscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Subscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Subscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GlobalGame_Subscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Subscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Subscribe)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const CMsgGC_GlobalGame_Subscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    set_ticket(from.ticket());
  }
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const CMsgGC_GlobalGame_Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Subscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Subscribe::Swap(CMsgGC_GlobalGame_Subscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GlobalGame_Subscribe::InternalSwap(CMsgGC_GlobalGame_Subscribe* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Subscribe::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GlobalGame_Unsubscribe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GlobalGame_Unsubscribe::kTimeleftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Unsubscribe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GlobalGame_Unsubscribe)
}
CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeleft_ = from.timeleft_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Unsubscribe)
}

void CMsgGC_GlobalGame_Unsubscribe::SharedCtor() {
  timeleft_ = 0;
}

CMsgGC_GlobalGame_Unsubscribe::~CMsgGC_GlobalGame_Unsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Unsubscribe)
  SharedDtor();
}

void CMsgGC_GlobalGame_Unsubscribe::SharedDtor() {
}

void CMsgGC_GlobalGame_Unsubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Unsubscribe::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GlobalGame_Unsubscribe& CMsgGC_GlobalGame_Unsubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Unsubscribe.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Unsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Unsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeleft_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GlobalGame_Unsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GlobalGame_Unsubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeleft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timeleft();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GlobalGame_Unsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GlobalGame_Unsubscribe)
  return false;
#undef DO_
}

void CMsgGC_GlobalGame_Unsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GlobalGame_Unsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 timeleft = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeleft(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GlobalGame_Unsubscribe)
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Unsubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Unsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 timeleft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeleft(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Unsubscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Unsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Unsubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 timeleft = 1;
  if (has_timeleft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeleft());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Unsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Unsubscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GlobalGame_Unsubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Unsubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Unsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Unsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeleft()) {
    set_timeleft(from.timeleft());
  }
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Unsubscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Unsubscribe::Swap(CMsgGC_GlobalGame_Unsubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GlobalGame_Unsubscribe::InternalSwap(CMsgGC_GlobalGame_Unsubscribe* other) {
  using std::swap;
  swap(timeleft_, other->timeleft_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Unsubscribe::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GlobalGame_Play::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GlobalGame_Play::kTicketFieldNumber;
const int CMsgGC_GlobalGame_Play::kGametimemsFieldNumber;
const int CMsgGC_GlobalGame_Play::kMsperpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Play.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GlobalGame_Play)
}
CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ticket_, &from.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&msperpoint_) -
    reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Play)
}

void CMsgGC_GlobalGame_Play::SharedCtor() {
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msperpoint_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
}

CMsgGC_GlobalGame_Play::~CMsgGC_GlobalGame_Play() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Play)
  SharedDtor();
}

void CMsgGC_GlobalGame_Play::SharedDtor() {
}

void CMsgGC_GlobalGame_Play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Play::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GlobalGame_Play& CMsgGC_GlobalGame_Play::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGC_GlobalGame_Play.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Play::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msperpoint_) -
        reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GlobalGame_Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GlobalGame_Play)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ticket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gametimems = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gametimems();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametimems_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msperpoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msperpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msperpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GlobalGame_Play)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GlobalGame_Play)
  return false;
#undef DO_
}

void CMsgGC_GlobalGame_Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GlobalGame_Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  // optional uint32 gametimems = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gametimems(), output);
  }

  // optional uint32 msperpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msperpoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GlobalGame_Play)
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Play::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  // optional uint32 gametimems = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gametimems(), target);
  }

  // optional uint32 msperpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msperpoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Play)
  return target;
}

size_t CMsgGC_GlobalGame_Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Play)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket());
    }

    // optional uint32 gametimems = 2;
    if (has_gametimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametimems());
    }

    // optional uint32 msperpoint = 3;
    if (has_msperpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msperpoint());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Play::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Play)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Play* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GlobalGame_Play>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Play)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Play)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Play::MergeFrom(const CMsgGC_GlobalGame_Play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_ = from.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      gametimems_ = from.gametimems_;
    }
    if (cached_has_bits & 0x00000004u) {
      msperpoint_ = from.msperpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GlobalGame_Play::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Play::CopyFrom(const CMsgGC_GlobalGame_Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Play::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Play::Swap(CMsgGC_GlobalGame_Play* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GlobalGame_Play::InternalSwap(CMsgGC_GlobalGame_Play* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(gametimems_, other->gametimems_);
  swap(msperpoint_, other->msperpoint_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Play::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_AcknowledgePenalty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_AcknowledgePenalty::kAcknowledgedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}
CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acknowledged_ = from.acknowledged_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedCtor() {
  acknowledged_ = 0;
}

CMsgGCCStrike15_v2_AcknowledgePenalty::~CMsgGCCStrike15_v2_AcknowledgePenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
  SharedDtor();
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedDtor() {
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AcknowledgePenalty::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_AcknowledgePenalty& CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AcknowledgePenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acknowledged_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 acknowledged = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_acknowledged();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acknowledged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_AcknowledgePenalty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_AcknowledgePenalty)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 acknowledged = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acknowledged(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_AcknowledgePenalty)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AcknowledgePenalty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 acknowledged = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acknowledged(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AcknowledgePenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_AcknowledgePenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 acknowledged = 1;
  if (has_acknowledged()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acknowledged());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AcknowledgePenalty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_AcknowledgePenalty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AcknowledgePenalty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AcknowledgePenalty)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acknowledged()) {
    set_acknowledged(from.acknowledged());
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::Swap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_AcknowledgePenalty::InternalSwap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
  using std::swap;
  swap(acknowledged_, other->acknowledged_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AcknowledgePenalty::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}
CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedCtor() {
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedDtor() {
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Swap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InternalSwap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Client2GCStreamUnlock::kTicketFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCStreamUnlock::kOsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}
CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ticket_, &from.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&os_) -
    reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedCtor() {
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&os_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock::~CMsgGCCStrike15_v2_Client2GCStreamUnlock() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedDtor() {
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCStreamUnlock::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Client2GCStreamUnlock& CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&os_) -
        reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ticket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 os = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_os();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  // optional int32 os = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCStreamUnlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  // optional int32 os = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCStreamUnlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket());
    }

    // optional int32 os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCStreamUnlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Client2GCStreamUnlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_ = from.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      os_ = from.os_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Swap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InternalSwap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(os_, other->os_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCStreamUnlock::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientToGCRequestElevate::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}
CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedCtor() {
  stage_ = 0u;
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate::~CMsgGCCStrike15_v2_ClientToGCRequestElevate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestElevate::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientToGCRequestElevate& CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCRequestElevate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestElevate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 stage = 1;
  if (has_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestElevate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientToGCRequestElevate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stage()) {
    set_stage(from.stage());
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Swap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
  using std::swap;
  swap(stage_, other->stage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCRequestElevate::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCChat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientToGCChat::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCChat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}
CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGCCStrike15_v2_ClientToGCChat::~CMsgGCCStrike15_v2_ClientToGCChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCChat)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientToGCChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCChat::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientToGCChat& CMsgGCCStrike15_v2_ClientToGCChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCChat.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientToGCChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientToGCChat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientToGCChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientToGCChat)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientToGCChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCChat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientToGCChat)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCChat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCChat)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientToGCChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCChat)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCChat::Swap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientToGCChat::InternalSwap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCChat::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_GCToClientChat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_GCToClientChat::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_GCToClientChat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GCToClientChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_GCToClientChat)
}
CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GCToClientChat)
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgGCCStrike15_v2_GCToClientChat::~CMsgGCCStrike15_v2_GCToClientChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GCToClientChat)
  SharedDtor();
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GCToClientChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GCToClientChat::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_GCToClientChat& CMsgGCCStrike15_v2_GCToClientChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_GCToClientChat.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GCToClientChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GCToClientChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_GCToClientChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_GCToClientChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_GCToClientChat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_GCToClientChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_GCToClientChat)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_GCToClientChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_GCToClientChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GCToClientChat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_GCToClientChat)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GCToClientChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GCToClientChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GCToClientChat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GCToClientChat)
  return target;
}

size_t CMsgGCCStrike15_v2_GCToClientChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GCToClientChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GCToClientChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_GCToClientChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GCToClientChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GCToClientChat)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GCToClientChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GCToClientChat::Swap(CMsgGCCStrike15_v2_GCToClientChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_GCToClientChat::InternalSwap(CMsgGCCStrike15_v2_GCToClientChat* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GCToClientChat::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientAuthKeyCode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientAuthKeyCode::kEventidFieldNumber;
const int CMsgGCCStrike15_v2_ClientAuthKeyCode::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}
CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0u;
}

CMsgGCCStrike15_v2_ClientAuthKeyCode::~CMsgGCCStrike15_v2_ClientAuthKeyCode() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientAuthKeyCode::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientAuthKeyCode& CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientAuthKeyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  eventid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eventid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientAuthKeyCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientAuthKeyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientAuthKeyCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientAuthKeyCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientAuthKeyCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientAuthKeyCode)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::Swap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientAuthKeyCode::InternalSwap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eventid_, other->eventid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientAuthKeyCode::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_GotvSyncPacket::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_GotvSyncPacket_default_instance_._instance.get_mutable()->data_ = const_cast< ::CEngineGotvSyncPacket*>(
      ::CEngineGotvSyncPacket::internal_default_instance());
}
void CMsgGCCStrike15_GotvSyncPacket::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_GotvSyncPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_GotvSyncPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_GotvSyncPacket)
}
CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::CEngineGotvSyncPacket(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_GotvSyncPacket)
}

void CMsgGCCStrike15_GotvSyncPacket::SharedCtor() {
  data_ = NULL;
}

CMsgGCCStrike15_GotvSyncPacket::~CMsgGCCStrike15_GotvSyncPacket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_GotvSyncPacket)
  SharedDtor();
}

void CMsgGCCStrike15_GotvSyncPacket::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void CMsgGCCStrike15_GotvSyncPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_GotvSyncPacket::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_GotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_GotvSyncPacket.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_GotvSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_GotvSyncPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_GotvSyncPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_GotvSyncPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEngineGotvSyncPacket data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_GotvSyncPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_GotvSyncPacket)
  return false;
#undef DO_
}

void CMsgGCCStrike15_GotvSyncPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_GotvSyncPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEngineGotvSyncPacket data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_GotvSyncPacket)
}

::google::protobuf::uint8* CMsgGCCStrike15_GotvSyncPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_GotvSyncPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEngineGotvSyncPacket data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_GotvSyncPacket)
  return target;
}

size_t CMsgGCCStrike15_GotvSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_GotvSyncPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CEngineGotvSyncPacket data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_GotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_GotvSyncPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_GotvSyncPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_GotvSyncPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_GotvSyncPacket)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_GotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::CEngineGotvSyncPacket::MergeFrom(from.data());
  }
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_GotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_GotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_GotvSyncPacket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_GotvSyncPacket::Swap(CMsgGCCStrike15_GotvSyncPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_GotvSyncPacket::InternalSwap(CMsgGCCStrike15_GotvSyncPacket* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_GotvSyncPacket::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerDecalDigitalSignature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDecalDigitalSignature::kSignatureFieldNumber;
const int PlayerDecalDigitalSignature::kAccountidFieldNumber;
const int PlayerDecalDigitalSignature::kRtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEndposFieldNumber;
const int PlayerDecalDigitalSignature::kStartposFieldNumber;
const int PlayerDecalDigitalSignature::kRightFieldNumber;
const int PlayerDecalDigitalSignature::kTxDefidxFieldNumber;
const int PlayerDecalDigitalSignature::kEntindexFieldNumber;
const int PlayerDecalDigitalSignature::kHitboxFieldNumber;
const int PlayerDecalDigitalSignature::kCreationtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEquipslotFieldNumber;
const int PlayerDecalDigitalSignature::kTraceIdFieldNumber;
const int PlayerDecalDigitalSignature::kNormalFieldNumber;
const int PlayerDecalDigitalSignature::kTintIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerDecalDigitalSignature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerDecalDigitalSignature)
}
PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      endpos_(from.endpos_),
      startpos_(from.startpos_),
      right_(from.right_),
      normal_(from.normal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tint_id_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(tint_id_));
  // @@protoc_insertion_point(copy_constructor:PlayerDecalDigitalSignature)
}

void PlayerDecalDigitalSignature::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tint_id_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(tint_id_));
}

PlayerDecalDigitalSignature::~PlayerDecalDigitalSignature() {
  // @@protoc_insertion_point(destructor:PlayerDecalDigitalSignature)
  SharedDtor();
}

void PlayerDecalDigitalSignature::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerDecalDigitalSignature::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerDecalDigitalSignature& PlayerDecalDigitalSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_PlayerDecalDigitalSignature.base);
  return *internal_default_instance();
}


void PlayerDecalDigitalSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDecalDigitalSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpos_.Clear();
  startpos_.Clear();
  right_.Clear();
  normal_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equipslot_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(equipslot_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_id_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(tint_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerDecalDigitalSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerDecalDigitalSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float endpos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_endpos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_endpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float startpos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_startpos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_startpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_right())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_right())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_defidx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tx_defidx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_defidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entindex = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hitbox = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_hitbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creationtime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_creationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 equipslot = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_equipslot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float normal = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109u, input, this->mutable_normal())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normal())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tint_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_tint_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerDecalDigitalSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerDecalDigitalSignature)
  return false;
#undef DO_
}

void PlayerDecalDigitalSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerDecalDigitalSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 rtime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtime(), output);
  }

  // repeated float endpos = 4;
  for (int i = 0, n = this->endpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->endpos(i), output);
  }

  // repeated float startpos = 5;
  for (int i = 0, n = this->startpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->startpos(i), output);
  }

  // repeated float right = 6;
  for (int i = 0, n = this->right_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->right(i), output);
  }

  // optional uint32 tx_defidx = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_defidx(), output);
  }

  // optional int32 entindex = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->entindex(), output);
  }

  // optional uint32 hitbox = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hitbox(), output);
  }

  // optional float creationtime = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->creationtime(), output);
  }

  // optional uint32 equipslot = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->equipslot(), output);
  }

  // optional uint32 trace_id = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->trace_id(), output);
  }

  // repeated float normal = 13;
  for (int i = 0, n = this->normal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->normal(i), output);
  }

  // optional uint32 tint_id = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tint_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerDecalDigitalSignature)
}

::google::protobuf::uint8* PlayerDecalDigitalSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDecalDigitalSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 rtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtime(), target);
  }

  // repeated float endpos = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->endpos_, target);

  // repeated float startpos = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->startpos_, target);

  // repeated float right = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->right_, target);

  // optional uint32 tx_defidx = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_defidx(), target);
  }

  // optional int32 entindex = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->entindex(), target);
  }

  // optional uint32 hitbox = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hitbox(), target);
  }

  // optional float creationtime = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->creationtime(), target);
  }

  // optional uint32 equipslot = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->equipslot(), target);
  }

  // optional uint32 trace_id = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->trace_id(), target);
  }

  // repeated float normal = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(13, this->normal_, target);

  // optional uint32 tint_id = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tint_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDecalDigitalSignature)
  return target;
}

size_t PlayerDecalDigitalSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDecalDigitalSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float endpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->endpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->endpos_size());
    total_size += data_size;
  }

  // repeated float startpos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->startpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->startpos_size());
    total_size += data_size;
  }

  // repeated float right = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->right_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->right_size());
    total_size += data_size;
  }

  // repeated float normal = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->normal_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->normal_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 rtime = 3;
    if (has_rtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime());
    }

    // optional uint32 tx_defidx = 7;
    if (has_tx_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_defidx());
    }

    // optional int32 entindex = 8;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional uint32 hitbox = 9;
    if (has_hitbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbox());
    }

    // optional float creationtime = 10;
    if (has_creationtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 equipslot = 11;
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipslot());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 trace_id = 12;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_id());
    }

    // optional uint32 tint_id = 14;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDecalDigitalSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDecalDigitalSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerDecalDigitalSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerDecalDigitalSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerDecalDigitalSignature)
    MergeFrom(*source);
  }
}

void PlayerDecalDigitalSignature::MergeFrom(const PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endpos_.MergeFrom(from.endpos_);
  startpos_.MergeFrom(from.startpos_);
  right_.MergeFrom(from.right_);
  normal_.MergeFrom(from.normal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_ = from.rtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_defidx_ = from.tx_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      hitbox_ = from.hitbox_;
    }
    if (cached_has_bits & 0x00000040u) {
      creationtime_ = from.creationtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      equipslot_ = from.equipslot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      tint_id_ = from.tint_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDecalDigitalSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::CopyFrom(const PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDecalDigitalSignature::IsInitialized() const {
  return true;
}

void PlayerDecalDigitalSignature::Swap(PlayerDecalDigitalSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDecalDigitalSignature::InternalSwap(PlayerDecalDigitalSignature* other) {
  using std::swap;
  endpos_.InternalSwap(&other->endpos_);
  startpos_.InternalSwap(&other->startpos_);
  right_.InternalSwap(&other->right_);
  normal_.InternalSwap(&other->normal_);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(rtime_, other->rtime_);
  swap(tx_defidx_, other->tx_defidx_);
  swap(entindex_, other->entindex_);
  swap(hitbox_, other->hitbox_);
  swap(creationtime_, other->creationtime_);
  swap(equipslot_, other->equipslot_);
  swap(trace_id_, other->trace_id_);
  swap(tint_id_, other->tint_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerDecalDigitalSignature::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_._instance.get_mutable()->data_ = const_cast< ::PlayerDecalDigitalSignature*>(
      ::PlayerDecalDigitalSignature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientPlayerDecalSign::kDataFieldNumber;
const int CMsgGCCStrike15_v2_ClientPlayerDecalSign::kItemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}
CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::PlayerDecalDigitalSignature(*from.data_);
  } else {
    data_ = NULL;
  }
  itemid_ = from.itemid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign::~CMsgGCCStrike15_v2_ClientPlayerDecalSign() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPlayerDecalSign::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientPlayerDecalSign& CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->Clear();
  }
  itemid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_data(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientPlayerDecalSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_data(), deterministic, target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPlayerDecalSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .PlayerDecalDigitalSignature data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPlayerDecalSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientPlayerDecalSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Swap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InternalSwap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientPlayerDecalSign::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientLogonFatalError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientLogonFatalError::kErrorcodeFieldNumber;
const int CMsgGCCStrike15_v2_ClientLogonFatalError::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}
CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
}

CMsgGCCStrike15_v2_ClientLogonFatalError::~CMsgGCCStrike15_v2_ClientLogonFatalError() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientLogonFatalError::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientLogonFatalError& CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientLogonFatalError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  errorcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientLogonFatalError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientLogonFatalError)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errorcode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientLogonFatalError)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientLogonFatalError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errorcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientLogonFatalError)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientLogonFatalError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientLogonFatalError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientLogonFatalError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientLogonFatalError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientLogonFatalError)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::Swap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientLogonFatalError::InternalSwap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientLogonFatalError::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPollState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientPollState::kPollidFieldNumber;
const int CMsgGCCStrike15_v2_ClientPollState::kNamesFieldNumber;
const int CMsgGCCStrike15_v2_ClientPollState::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientPollState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientPollState)
}
CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      names_(from.names_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pollid_ = from.pollid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPollState)
}

void CMsgGCCStrike15_v2_ClientPollState::SharedCtor() {
  pollid_ = 0u;
}

CMsgGCCStrike15_v2_ClientPollState::~CMsgGCCStrike15_v2_ClientPollState() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPollState)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientPollState::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientPollState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPollState::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientPollState& CMsgGCCStrike15_v2_ClientPollState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientPollState.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPollState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPollState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  values_.Clear();
  pollid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientPollState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientPollState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pollid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pollid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pollid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            static_cast<int>(this->names(this->names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCCStrike15_v2_ClientPollState.names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientPollState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientPollState)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientPollState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientPollState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pollid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pollid(), output);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientPollState.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // repeated int32 values = 3;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientPollState)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientPollState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPollState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pollid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pollid(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientPollState.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // repeated int32 values = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->values_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPollState)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPollState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPollState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated int32 values = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  // optional uint32 pollid = 1;
  if (has_pollid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pollid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPollState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPollState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientPollState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPollState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPollState)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPollState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  values_.MergeFrom(from.values_);
  if (from.has_pollid()) {
    set_pollid(from.pollid());
  }
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPollState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPollState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPollState::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPollState::Swap(CMsgGCCStrike15_v2_ClientPollState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientPollState::InternalSwap(CMsgGCCStrike15_v2_ClientPollState* other) {
  using std::swap;
  names_.InternalSwap(CastToBase(&other->names_));
  values_.InternalSwap(&other->values_);
  swap(pollid_, other->pollid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientPollState::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Register::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Party_Register::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kVerFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kAprFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kArkFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kNbyFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kGrpFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kSlotsFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kLauncherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Register.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Party_Register)
}
CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&launcher_) -
    reinterpret_cast<char*>(&id_)) + sizeof(launcher_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Register)
}

void CMsgGCCStrike15_v2_Party_Register::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launcher_) -
      reinterpret_cast<char*>(&id_)) + sizeof(launcher_));
}

CMsgGCCStrike15_v2_Party_Register::~CMsgGCCStrike15_v2_Party_Register() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Register)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Register::SharedDtor() {
}

void CMsgGCCStrike15_v2_Party_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Register::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Party_Register& CMsgGCCStrike15_v2_Party_Register::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Register.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launcher_) -
        reinterpret_cast<char*>(&id_)) + sizeof(launcher_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Party_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Party_Register)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 apr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_apr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nby = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_grp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slots = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launcher = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_launcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Party_Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Party_Register)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Party_Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 ver = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // optional uint32 apr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apr(), output);
  }

  // optional uint32 ark = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ark(), output);
  }

  // optional uint32 nby = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nby(), output);
  }

  // optional uint32 grp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grp(), output);
  }

  // optional uint32 slots = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slots(), output);
  }

  // optional uint32 launcher = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->launcher(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Party_Register)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 ver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // optional uint32 apr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apr(), target);
  }

  // optional uint32 ark = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ark(), target);
  }

  // optional uint32 nby = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nby(), target);
  }

  // optional uint32 grp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grp(), target);
  }

  // optional uint32 slots = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slots(), target);
  }

  // optional uint32 launcher = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->launcher(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Register)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Register)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 apr = 3;
    if (has_apr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apr());
    }

    // optional uint32 ark = 4;
    if (has_ark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ark());
    }

    // optional uint32 nby = 5;
    if (has_nby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nby());
    }

    // optional uint32 grp = 6;
    if (has_grp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grp());
    }

    // optional uint32 slots = 7;
    if (has_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slots());
    }

    // optional uint32 launcher = 8;
    if (has_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Register)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Register* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Party_Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Register)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      apr_ = from.apr_;
    }
    if (cached_has_bits & 0x00000008u) {
      ark_ = from.ark_;
    }
    if (cached_has_bits & 0x00000010u) {
      nby_ = from.nby_;
    }
    if (cached_has_bits & 0x00000020u) {
      grp_ = from.grp_;
    }
    if (cached_has_bits & 0x00000040u) {
      slots_ = from.slots_;
    }
    if (cached_has_bits & 0x00000080u) {
      launcher_ = from.launcher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Register::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Register::Swap(CMsgGCCStrike15_v2_Party_Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Party_Register::InternalSwap(CMsgGCCStrike15_v2_Party_Register* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(ver_, other->ver_);
  swap(apr_, other->apr_);
  swap(ark_, other->ark_);
  swap(nby_, other->nby_);
  swap(grp_, other->grp_);
  swap(slots_, other->slots_);
  swap(launcher_, other->launcher_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Register::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Search::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Party_Search::kVerFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kAprFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kArkFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kGrpsFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kLauncherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Search.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Party_Search)
}
CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      grps_(from.grps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&launcher_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(launcher_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Search)
}

void CMsgGCCStrike15_v2_Party_Search::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launcher_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(launcher_));
}

CMsgGCCStrike15_v2_Party_Search::~CMsgGCCStrike15_v2_Party_Search() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Search)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Search::SharedDtor() {
}

void CMsgGCCStrike15_v2_Party_Search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Search::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Party_Search& CMsgGCCStrike15_v2_Party_Search::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Search.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Search::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Search)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launcher_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(launcher_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Party_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Party_Search)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 apr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_apr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 grps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_grps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launcher = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_launcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Party_Search)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Party_Search)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Party_Search)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 apr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->apr(), output);
  }

  // optional uint32 ark = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ark(), output);
  }

  // repeated uint32 grps = 4;
  for (int i = 0, n = this->grps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->grps(i), output);
  }

  // optional uint32 launcher = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->launcher(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Party_Search)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Search::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Search)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 apr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->apr(), target);
  }

  // optional uint32 ark = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ark(), target);
  }

  // repeated uint32 grps = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->grps_, target);

  // optional uint32 launcher = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->launcher(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Search)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Search)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 grps = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->grps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->grps_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 apr = 2;
    if (has_apr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apr());
    }

    // optional uint32 ark = 3;
    if (has_ark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ark());
    }

    // optional uint32 launcher = 5;
    if (has_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Search)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Search* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Party_Search>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Search)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Search)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Search)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grps_.MergeFrom(from.grps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      apr_ = from.apr_;
    }
    if (cached_has_bits & 0x00000004u) {
      ark_ = from.ark_;
    }
    if (cached_has_bits & 0x00000008u) {
      launcher_ = from.launcher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Search::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Search::Swap(CMsgGCCStrike15_v2_Party_Search* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Party_Search::InternalSwap(CMsgGCCStrike15_v2_Party_Search* other) {
  using std::swap;
  grps_.InternalSwap(&other->grps_);
  swap(ver_, other->ver_);
  swap(apr_, other->apr_);
  swap(ark_, other->ark_);
  swap(launcher_, other->launcher_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Search::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Party_SearchResults_Entry::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Party_SearchResults_Entry::kGrpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}
CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(grp_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(grp_));
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry::~CMsgGCCStrike15_v2_Party_SearchResults_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedDtor() {
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults_Entry::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(grp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_grp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 grp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_SearchResults_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 grp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 grp = 2;
    if (has_grp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Party_SearchResults_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      grp_ = from.grp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Swap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(grp_, other->grp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_SearchResults_Entry::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_SearchResults::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Party_SearchResults::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_SearchResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}
CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedCtor() {
}

CMsgGCCStrike15_v2_Party_SearchResults::~CMsgGCCStrike15_v2_Party_SearchResults() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedDtor() {
}

void CMsgGCCStrike15_v2_Party_SearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Party_SearchResults& CMsgGCCStrike15_v2_Party_SearchResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_SearchResults.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Party_SearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Party_SearchResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Party_SearchResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Party_SearchResults)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_SearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Party_SearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Party_SearchResults)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_SearchResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Party_SearchResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_SearchResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_SearchResults)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults::Swap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Party_SearchResults::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_SearchResults::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Invite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Party_Invite::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Party_Invite::kLobbyidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Invite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Party_Invite)
}
CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobbyid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Invite)
}

void CMsgGCCStrike15_v2_Party_Invite::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobbyid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
}

CMsgGCCStrike15_v2_Party_Invite::~CMsgGCCStrike15_v2_Party_Invite() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Invite)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Invite::SharedDtor() {
}

void CMsgGCCStrike15_v2_Party_Invite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Invite::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Party_Invite& CMsgGCCStrike15_v2_Party_Invite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Party_Invite.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Invite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobbyid_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Party_Invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Party_Invite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobbyid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lobbyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobbyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Party_Invite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Party_Invite)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Party_Invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 lobbyid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lobbyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Party_Invite)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Invite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 lobbyid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lobbyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Invite)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Invite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 lobbyid = 2;
    if (has_lobbyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobbyid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Invite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Invite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Party_Invite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Invite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Invite)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Invite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobbyid_ = from.lobbyid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Invite::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Invite::Swap(CMsgGCCStrike15_v2_Party_Invite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Party_Invite::InternalSwap(CMsgGCCStrike15_v2_Party_Invite* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(lobbyid_, other->lobbyid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Invite::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kRtcoplayFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedDtor() {
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&online_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtcoplay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rtcoplay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtcoplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 rtcoplay = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rtcoplay(), output);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 rtcoplay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rtcoplay(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 rtcoplay = 2;
    if (has_rtcoplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtcoplay());
    }

    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtcoplay_ = from.rtcoplay_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
  using std::swap;
  swap(accountid_, other->accountid_);
  swap(rtcoplay_, other->rtcoplay_);
  swap(online_, other->online_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_Account_RequestCoPlays::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_Account_RequestCoPlays::kPlayersFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays::kServertimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedCtor() {
  servertime_ = 0u;
}

CMsgGCCStrike15_v2_Account_RequestCoPlays::~CMsgGCCStrike15_v2_Account_RequestCoPlays() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  SharedDtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedDtor() {
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_Account_RequestCoPlays& CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Account_RequestCoPlays::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  servertime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 servertime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // optional uint32 servertime = 2;
  if (has_servertime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->servertime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_Account_RequestCoPlays>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Account_RequestCoPlays)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Account_RequestCoPlays)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_servertime()) {
    set_servertime(from.servertime());
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(servertime_, other->servertime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kAuthorizedSteamIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kGameserverSteamIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kGameserverNetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}
CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&authorized_steam_id_, &from.authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&authorized_public_ip_) -
    reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedCtor() {
  ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authorized_public_ip_) -
      reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket::~CMsgGCCStrike15_v2_ClientToGCRequestTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedDtor() {
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestTicket::descriptor() {
  ::protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCStrike15_v2_ClientToGCRequestTicket& CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cstrike15_5fgcmessages_2eproto::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authorized_public_ip_) -
        reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 authorized_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_authorized_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 authorized_public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_authorized_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_gameserver_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_net_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gameserver_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  return false;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 authorized_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->authorized_public_ip(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional fixed64 gameserver_net_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameserver_net_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCRequestTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 authorized_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional fixed64 gameserver_net_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameserver_net_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 authorized_steam_id = 1;
    if (has_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_net_id = 4;
    if (has_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 authorized_public_ip = 2;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCStrike15_v2_ClientToGCRequestTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      authorized_steam_id_ = from.authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameserver_net_id_ = from.gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Swap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
  using std::swap;
  swap(authorized_steam_id_, other->authorized_steam_id_);
  swap(gameserver_steam_id_, other->gameserver_steam_id_);
  swap(gameserver_net_id_, other->gameserver_net_id_);
  swap(authorized_public_ip_, other->authorized_public_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCRequestTicket::GetMetadata() const {
  protobuf_cstrike15_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cstrike15_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameServerPing* Arena::CreateMaybeMessage< ::GameServerPing >(Arena* arena) {
  return Arena::CreateInternal< ::GameServerPing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DataCenterPing* Arena::CreateMaybeMessage< ::DataCenterPing >(Arena* arena) {
  return Arena::CreateInternal< ::DataCenterPing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DetailedSearchStatistic* Arena::CreateMaybeMessage< ::DetailedSearchStatistic >(Arena* arena) {
  return Arena::CreateInternal< ::DetailedSearchStatistic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TournamentPlayer* Arena::CreateMaybeMessage< ::TournamentPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::TournamentPlayer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TournamentTeam* Arena::CreateMaybeMessage< ::TournamentTeam >(Arena* arena) {
  return Arena::CreateInternal< ::TournamentTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TournamentEvent* Arena::CreateMaybeMessage< ::TournamentEvent >(Arena* arena) {
  return Arena::CreateInternal< ::TournamentEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GlobalStatistics* Arena::CreateMaybeMessage< ::GlobalStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::GlobalStatistics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OperationalStatisticDescription* Arena::CreateMaybeMessage< ::OperationalStatisticDescription >(Arena* arena) {
  return Arena::CreateInternal< ::OperationalStatisticDescription >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OperationalStatisticElement* Arena::CreateMaybeMessage< ::OperationalStatisticElement >(Arena* arena) {
  return Arena::CreateInternal< ::OperationalStatisticElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OperationalStatisticsPacket* Arena::CreateMaybeMessage< ::OperationalStatisticsPacket >(Arena* arena) {
  return Arena::CreateInternal< ::OperationalStatisticsPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerRankingInfo* Arena::CreateMaybeMessage< ::PlayerRankingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerRankingInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerCommendationInfo* Arena::CreateMaybeMessage< ::PlayerCommendationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerCommendationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerMedalsInfo* Arena::CreateMaybeMessage< ::PlayerMedalsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerMedalsInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AccountActivity* Arena::CreateMaybeMessage< ::AccountActivity >(Arena* arena) {
  return Arena::CreateInternal< ::AccountActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TournamentMatchSetup* Arena::CreateMaybeMessage< ::TournamentMatchSetup >(Arena* arena) {
  return Arena::CreateInternal< ::TournamentMatchSetup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerHltvInfo* Arena::CreateMaybeMessage< ::ServerHltvInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ServerHltvInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::IpAddressMask* Arena::CreateMaybeMessage< ::IpAddressMask >(Arena* arena) {
  return Arena::CreateInternal< ::IpAddressMask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::XpProgressData* Arena::CreateMaybeMessage< ::XpProgressData >(Arena* arena) {
  return Arena::CreateInternal< ::XpProgressData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MatchEndItemUpdates* Arena::CreateMaybeMessage< ::MatchEndItemUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::MatchEndItemUpdates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ScoreLeaderboardData_Entry* Arena::CreateMaybeMessage< ::ScoreLeaderboardData_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::ScoreLeaderboardData_Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ScoreLeaderboardData_AccountEntries* Arena::CreateMaybeMessage< ::ScoreLeaderboardData_AccountEntries >(Arena* arena) {
  return Arena::CreateInternal< ::ScoreLeaderboardData_AccountEntries >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ScoreLeaderboardData* Arena::CreateMaybeMessage< ::ScoreLeaderboardData >(Arena* arena) {
  return Arena::CreateInternal< ::ScoreLeaderboardData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerQuestData_QuestItemData* Arena::CreateMaybeMessage< ::PlayerQuestData_QuestItemData >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerQuestData_QuestItemData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerQuestData* Arena::CreateMaybeMessage< ::PlayerQuestData >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerQuestData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGC_ServerQuestUpdateData* Arena::CreateMaybeMessage< ::CMsgGC_ServerQuestUpdateData >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGC_ServerQuestUpdateData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStart* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStart >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingStart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStop* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStop >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CPreMatchInfoData_TeamStats* Arena::CreateMaybeMessage< ::CPreMatchInfoData_TeamStats >(Arena* arena) {
  return Arena::CreateInternal< ::CPreMatchInfoData_TeamStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CPreMatchInfoData* Arena::CreateMaybeMessage< ::CPreMatchInfoData >(Arena* arena) {
  return Arena::CreateInternal< ::CPreMatchInfoData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientReportPlayer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientReportPlayer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientCommendPlayer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientReportServer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportServer >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientReportServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientReportResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientReportResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WatchableMatchInfo* Arena::CreateMaybeMessage< ::WatchableMatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::WatchableMatchInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinServerData* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCstrike15_v2_ClientRequestNewMission* Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_WatchInfoUsers* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_WatchInfoUsers >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_WatchInfoUsers >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_PlayersProfile* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayersProfile >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_PlayersProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CClientHeaderOverwatchEvidence* Arena::CreateMaybeMessage< ::CClientHeaderOverwatchEvidence >(Arena* arena) {
  return Arena::CreateInternal< ::CClientHeaderOverwatchEvidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTextMsg* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Client2GCTextMsg* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CEconItemPreviewDataBlock_Sticker* Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock_Sticker >(Arena* arena) {
  return Arena::CreateInternal< ::CEconItemPreviewDataBlock_Sticker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CEconItemPreviewDataBlock* Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock >(Arena* arena) {
  return Arena::CreateInternal< ::CEconItemPreviewDataBlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgItemAcknowledged* Arena::CreateMaybeMessage< ::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgItemAcknowledged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_MatchInfo* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_MatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_MatchInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentGroupTeam* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroupTeam >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentGroupTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup_Picks* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentSection* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentSection >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentSection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDataGCCStrike15_v2_TournamentInfo* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CDataGCCStrike15_v2_TournamentInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_MatchList* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchList >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_MatchList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Predictions* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Predictions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Fantasy* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Fantasy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAttribute_String* Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateInternal< ::CAttribute_String >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCToGCReloadVersions* Arena::CreateMaybeMessage< ::CMsgGCToGCReloadVersions >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCToGCReloadVersions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgCStrike15Welcome* Arena::CreateMaybeMessage< ::CMsgCStrike15Welcome >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgCStrike15Welcome >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Server2GCClientValidate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSOEconCoupon* Arena::CreateMaybeMessage< ::CSOEconCoupon >(Arena* arena) {
  return Arena::CreateInternal< ::CSOEconCoupon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSOQuestProgress* Arena::CreateMaybeMessage< ::CSOQuestProgress >(Arena* arena) {
  return Arena::CreateInternal< ::CSOQuestProgress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSOPersonaDataPublic* Arena::CreateMaybeMessage< ::CSOPersonaDataPublic >(Arena* arena) {
  return Arena::CreateInternal< ::CSOPersonaDataPublic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGC_GlobalGame_Subscribe* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Subscribe >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGC_GlobalGame_Subscribe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGC_GlobalGame_Unsubscribe* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Unsubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGC_GlobalGame_Unsubscribe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGC_GlobalGame_Play* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Play >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGC_GlobalGame_Play >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_AcknowledgePenalty* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Client2GCStreamUnlock* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestElevate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCChat* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCChat >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientToGCChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_GCToClientChat* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GCToClientChat >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_GCToClientChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientAuthKeyCode* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_GotvSyncPacket* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_GotvSyncPacket >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_GotvSyncPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayerDecalDigitalSignature* Arena::CreateMaybeMessage< ::PlayerDecalDigitalSignature >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerDecalDigitalSignature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientPlayerDecalSign* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientLogonFatalError* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientPollState* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPollState >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientPollState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Party_Register* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Register >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Party_Register >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Party_Search* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Search >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Party_Search >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Party_SearchResults >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Party_Invite* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Invite >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Party_Invite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestTicket* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
